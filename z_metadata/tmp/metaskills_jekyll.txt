filename: 2005-12-19-how-to-setup-a-simple-mysql-backup-script.html
         title: How To Setup a Simple MySQL Backup Script
    categories: ["Database", "Heuristics", "Home", "Workflow"]
     disqus_id: /2005/12/19/how-to-setup-a-simple-mysql-backup-script
          body: 


<p> Lately, I've been loving all things that can be solved by using <a href="http://archive.macosxlabs.org/rsyncx/rsyncx.html" rel="external" title="Solving Problems With RsyncX" class="external-link">RsyncX</a>. It's my de facto backup utility and I just keep finding more and more tasks for it as each day goes by. It has become the hammer for all my system's needs. So when it came time for me to implement a nice little backup routine for the MySQL databases hosted here at ActionMoniker.com, it was the first tool I considered. My requirements were simple, I needed a SQL script of selected databases in logically named folders for each DB with time-stamps in the file name. Then step and repeat on a regular basis. </p>

<p> To use RsyncX for the job, I would have to copy the literal file system for the databases, typically these are located in <code>/usr/local/mysql/data/dbname</code> on your macintosh file system. Doing such would have been a technically valid method, but this solution would not have given me a portable backup file since RsyncX would copy the directory in whole, which includes separate files for each table in the database. Not to mention permission issues for restoring the files.</p>

<h2>Perhaps MySQL Administrator?  </h2>
<p> So instead of square pegging RsyncX I turned to the one of the greatest inventions for the Open Source database community, the <a href="http://dev.mysql.com/downloads/administrator/index.html" rel="external" title="Database Administration GUI for OS X MySQL Databases" class="external-link">MySQL Administrator</a> application. This wonderful program brings many features of administrating MySQL databases into a nice tidy graphical user interface that most users can understand by simply pointing and clicking around. It is very easy to understand and it is akin to the "Enterprise Manager" for Microsoft SQL Server running on Windows. The things you can accomplished with MySQL Administrator are past the scope of this article, but I do want to point out that MySQL Administrator does offer a manual and automatic backup solution for you by using your Mac's "user" crontab. If you are unfamiliar with cron, it is your Mac's (UNIX-Style) built-in job scheduling system. </p>

<p> If you have ever tried using MySQL Administrator's backup routine, DO NOT DO IT! The program fails miserably for most users since it uses your local system account, not the DB user account associated with the database you are tying to backup. If you are reading this article because you have tried using MySQL Administrator's backup system, you may have seen a system message like this: </p>

<macro:code lang="plaintext">
From: kencollins@ken-pb.local (Cron Daemon)
To: kencollins@ken-pb.local
Date: Mon, 19 Dec 2005 23:04:01 -0500 (EST)
Subject: Cron <kencollins@ken-pb> "/Applications/MySQL Administrator.app/Contents/Resources/mabackup" --directory="/Users/kencollins/Desktop" --connection="localhost" --prefix="MetaDB" MetaDB
</macro:code>

<p> Before I get to that simple solution and if you are one of the unlucky that tried backups with MySQL Administrator, let's digress for a moment and clean up the work it did to your system. First, if you have not already done so, install <a href="http://webmin.com/" rel="external" title="The Swiss Army Knife of Mac OS X Admin Tools" class="external-link">Webmin</a> . Many of my tutorials will rely on it. This is a powerful tool that runs as a bundle of PERL modules accessible via a web browser on your local machine. It allows you to administrate many underlying system events and programs on your system. <strong>DISCLAIMER: It can be somewhat hazardous if you are not familiar with what you are doing.</strong> That said, the documentation on their website has a very straight forward  help file on installing the latest version. Now to the cleanup: </p>

<ul>
  <li><strong>Step 1</strong> - removing the MySQL Administrator cron entry. Open Webmin and navigate to "System -&gt; Scheduled Cron Jobs", directly beside "yourusername" you should see a command similar to the subject line in my example error above. Click on it to edit the job, and hit "delete" at the bottom of the page.</li>
  <li><strong>Step 2</strong> - removing any junk emails or system notices. Open Webmin and navigate to "Servers -&gt; Read User Mail", click on your username, then delete any messages similar to the ones above. You should have one message each time MySQL Administrator failed to do what you wanted.</li>
</ul>

<h2>The Simple Solution  </h2>

<p>OK, now that our system has less junk processes, to the fun part, a simple and working MySQL backup. For this task I created a really simple script. Let's take a look at it below. </p>

<code type="sh">
#!/bin/bash
timestamp="$(date -u +%Y-%m-%d_%a)"
/usr/local/mysql/bin/mysqldump -uXXXX -pXXXX metadb > /Backups/MetaDB_${timestamp}.sql
</code>

<p>There are two parts to this script, the first line sets a variable called "timestamp" in the friendliest format I can think of (YYYY-MM-DD_Day), for example 2005-12-19_Mon. The second line of this script uses the mysqldump utility, gives it a username, password, and your database name. Replace XXXX with the username and password of your database and remember, if you are calling this script from a remote machine, it must have remote access to the database name, directly after your password. The last half of the second line writes your database backup file in a directory of your choosing with a filename using the <code>${timestamp}</code> variable of the system time from line one. In this example, this will generate a file called "MetaDB_2005-12-19_Mon.sql". </p>

<p> To run this script, save it to a text file like MyDB-Backup.command or .sh and make it executable. My favorite way of doing this is to use <a href="http://macromates.com/" rel="external" title="The Best Text Editor for the Mac OS X" class="external-link">TextMate's</a> built-in UNIX Shell automation scripts, but if you do not have such a fancy text editor, simple use the Terminal and enter this command on the file <code>chmod +x yourfilename.sh</code> Lastly, you can schedule this job to run at any interval using the system's crontab. This can be added using Webmin or by opening up the crontab, located at <code>/etc/crontab</code> and then follow the example in the header of the file. </p>



filename: 2005-12-22-textmate-by-programmers-for-efficiency-experts.html
         title: TextMate, by Programmers, for Efficiency Experts
    categories: ["Apple/OSX", "Home", "TextMate"]
     disqus_id: /2005/12/22/textmate-by-programmers-for-efficiency-experts
          body: 


<img src="/files/textmate/textmate-logo.gif" alt="TextMate Logo" width="98" height="101" longdesc="TextMate Logo" style="float:left;"/>
    <p> About a year ago a fellow co-worker of mine was raving that I should learn VIM from the command line interface (CLI) so that I could use it for all my text editing needs. My co-worker at the time was (and probably still is) the Systems Administrator and Lead Application Developer for a company that sold <a href="http://www.planetcdrom.com/discount-software/" title="Buy Cheap Discounted Educational Software" rel="external" class="external-link">cheap discount software</a>. During my tenure there I served as the Marketing Manager and as such, many of my projects to completely overhaul their search engine and online marketing strategies called for aligning their internal tools and processes. While doing said technical revamps and specification writing, I guess I was exposed as more of a geek than your typical marketer. Hence the recommendation to go further down the rabbit hole. <em>DISCLAIMER: before I go any further -- I would like to say, yes, that link up there is a shameless plug and is meant only to help in the organic search strategies for PlanetCDROM.com.</em> OK, I feel better. </p>
    <h2>Down the Rabbit Hole? </h2>
    <p>So did I do it? Am I using VIM and did I even code this XHTML in such an arcane system? The answer is no, but I will admit that I love the CLI from a UNIX operating system. In fact, I will be writing another installment on how to <a href="/2006/3/19/getting-on-good-terms-with-the-os-x-shell">tweak and customize your shell environment.</a></p>
    <p>The main reason I did not learn VIM is because it goes against my technical MO which is also the main theme of this website -- that working at a higher level is better than keeping your head in the trenches. Sure tried and true pays off sometimes, but technology moves fast and there evolves better ways. VIM stays to far down the path of the harder, at least for me anyway. I typically like to get into the details only enough, so that I can figure out a better way of doing things. VIM would have made a good choice to learn if I was forced to work in a Windows environment where my only escape to the UNIX-style world was shell access to a Fedora Core operating system, but hey, that's not the case. I like to advocate working and hosting on Macs and that's a convention all to itself. </p>
    <h2>Die VIM, Die!
    Enter TextMate. </h2>
    <p> OK, now I'm going to say it and say it only once. Using <a href="http://macromates.com/" rel="external" class="external-link" title="Code and markup brought into the 21st century.">TextMate</a> from the Mac OS X is pure &quot;<a href="http://agilemanifesto.org/" rel="external" class="external-link" title="Agile Software Develeopment Manifesto">Convention over Configuration</a>&quot; one of the founding principles of agile software development. I know many don't like the hype of this methodology, especially when used to discuss Ruby on Rails application development but I think these are the same people that like working harder, not smarter and I'm sure they said the same thing about PHP six years ago and also think <a href="http://troutgirl.com/blog/index.php?/archives/22_Friendster_goes_PHP.html" rel="external" title="JAVA vs. PHP, go discuss it elsewhere!" class="external-link">JAVA is the only way of programming</a>. So we can ignore them, I choose to. So here are a few of the marketing reasons  about why I choose TextMate as my editor over BBEdit on the Mac OS.</p>
    <p><strong>Column Typing</strong> - I love clean organized code and this image snippet shows that editing clean organized code is really easy in TextMate which keeps you from performing the same change across multiple lines. </p>
    <p><img src="/files/textmate/columns.gif" alt="Column Typing in TextMate" width="200" height="60" longdesc="Column Typing in TextMate" /></p>
    <p><strong>Collapsible Foldings</strong> - Use these to hide method definitions, class files, tables, DIVs, or any of your markup that you want out of view. I have also found this especially helpful when editing or viewing very large XML files. <em>HINT: You can old down the option button to fully collapse and expand the foldings. Option-collapse to hide everything and then open up the folding like normal and it will easy you in tag by tag. </em></p>
    <p><img src="/files/textmate/foldings.gif" alt="Collapse Content in TextMate" width="228" height="150" longdesc="Collapse Content in TextMate" /></p>
    <p><strong>Syntax Highlighting</strong> - Not just for the whole document, but nested markup too. TextMate does this better than any program I've seen and it does it really well for a huge amount of different file types, even shell scripts. This task was a huge chore in BBEdit. <em>HINT: When you download TextMate, don't stop there. <a href="http://macromates.com/textmate/manual/bundles.html#getting_more_bundles" title="Get more TextMate bundles with subversion." rel="external" class="external-link">Install Subversion on your system and download the trunk files to get all the bundles.</a></em> This not only gives you more syntax highlighting, but more actions too. </p>
    <p><img src="/files/textmate/syntax.png" alt="Syntax Highlighting in TextMate" width="200" height="135" longdesc="Syntax Highlighting in TextMate" /></p>
    <p><strong>Tabbed Navigation &amp; Project Drawers </strong>- This was another chore in BBEdit and by now most applications are figuring out that tabbed navigation is a must for every program. HINT: <em>One of the things I really like about using the project drawer, which comes up automatically if you drag a folder onto TextMate, is that you can create custom environment variables for the project that talk directly to your shell environment. These could be custom paths, etc. </em></p>
    <p><img src="/files/textmate/tabs.gif" alt="Tabbed Files in TextMate" width="239" height="49" longdesc="Tabbed Files in TextMate" /></p>
    <p>That's just a small excerpt from their <a href="http://macromates.com/" rel="external" class="external-link" title="Code and markup brought into the 21st century.">their website</a> on why TextMate is so great. There are many more and I have only really started to scratch the surface on using it. Here are a few more that directly relate to how I use it. </p><a name="manpages" class="anchor"></a>

    <h2>Man oh Man.</h2>
    <p>TextMate links directly with your shell environment. That means you can run scripts and code directly from the editor. It even has an HTML output window. I am constantly reading the <code>man</code> pages for all the UNIX software that comes on OS X. Rather than doing this in the shell, I select the command or application name from within TextMate and it pops up the manual page in a nice searchable HTML window. For instance, rather than using <code>man dig</code> or <code>man rsync</code> from the terminal, just select it in TextMate and hit Control-H. </p>
    <h2>It's all Hallow's Eve</h2>
    <p>What can be cooler than a built in theme called &quot;All Hallow's Eve&quot;. This theme is the typical black background with high contrast code and markup that you see in many of the screenshots for TextMate. Many VIM'ers loved this setting for legibility and its built right into Textmate. </p>
    <h2>What's the Difference?</h2>
    <p>Diffs are great and tell you a lot. I really only discovered them because TextMate offers such a simple way of using them. In this example I can show the differences in the configuration of a 2621 Cisco router. This really helps sort things out.
    </p><br />
    
		<div style="text-align: center; margin: 0 auto;"><img src="/files/textmate/textmate-diff.gif" alt="TextMate DIFF Example" width="539" height="415" longdesc="TextMate DIFF Example" />
	  </div>
		
		<p>Lastly, I would love to hear why some other people have moved to using TextMate or perhaps you may have an example of another editor that is the end all for geeks like us?</p>



filename: 2006-01-06-ken-collins-resume.html
         title: Ken Collins' Resume
    categories: ["Colophon"]
     disqus_id: /2006/1/6/ken-collins-resume
          body: 


<h2>Contact Information</h2>

<div style="margin: 10px 0 0 20px;">
<em>Address:</em> 2405 Sterling Point Drive, Portsmouth, Virginia 23703<br />
<em>Phone/Fax:</em> (757) 271-3850<br />
<em>Email:</em> <script type="text/javascript">document.write(
"<n uers=\"znvygb:xra\100zrgnfxvyyf\056arg\">xra\100zrgnfxvyyf\056arg<\057n>".replace(/[a-zA-Z]/g, function(c){return String.fromCharCode((c<="Z"?90:122)>=(c=c.charCodeAt(0)+13)?c:c-26);}));
</script>
</div>


<h2>Summary</h2>

<p>
I am a ruby/rails specialist that thrives on providing elegant solutions to complex problems based on a love for efficiency, working smarter, and seeing positive results. I am a very strong believer in using idiomatic coding conventions in a test driven development process because it helps small teams understand peer code and remain agile. I take ownership of projects, have a strong work ethic, and require no hand holding.
</p>


<h2>Highlights of Qualifications</h2>

<p><strong>PROGRAMMING SKILLS:</strong> Ruby, JavaScript, and XHTML/CSS. I am incredibly proficient in Ruby and have collaborated on quite a few open source projects. To date, I have been programming web applications using Ruby and JavaScript professionally for more than 3 years. My XHTML/CSS skills far exceed most programmers since I have been developing web sites for more than 10 years and have been doing compliant presentation layer XHTML for more than 6 years.</p>

<p><strong>WEB APPLICATION EXPERIENCE:</strong> Ruby and especially the Rails framework is my love and focus. I have been working in Rails since before its version was 1.0 and migrations were a reality. Unlike a lot of other programmers, I know the Rails framework inside and out and I specialize in ActiveRecord extensions in both the abstract high-level and in detail at the connection adapter levels. My code is highly organized and I pride myself in working smarter by keeping up to date in the changing landscape of both Ruby and Rails as the technologies move forward. My second love is the Prototype JavaScript framework and programming interactive glue in a fully object oriented way.</p>

<p><strong>INFORMATION TECHNOLOGY SKILLS:</strong> Administrating UNIX operating systems in small to mid-size networks, with an emphasis on OSX client/server. Experience in managing Rails applications in production environments utilizing Apache/Mongrel/Capistrano. System Administration skills includes managing postfix/cyrus mail, open directory, split horizon DNS, MySQL, firewalls, and virtual private networks. I am also familiar with configuring Cisco and Extreme Networks routers/switches.</p>

<p><strong>TOOLS OF THE TRADE:</strong> A Mac with TextMate and a terminal. In detail, for application development, I prefer to build a full stack that mimics as closely as possible any production environment I will be deploying to. Typically this involves using MacPorts to install my own Apache2, MySQL, Ruby, Git/Subversion, SQLite3, FreeTDS/ODBC/DBI, OpenSSL, Libxml, ImageMagick, etc. I am a proficient in the Unix shell, and recently have moved to ZSH. On the creative side, my previous design experience has kept me strong in the usage of PhotoShop/Illustrator for doing my own site designs and/or splicing other's designs into hand coded XHTML/CSS to match pixel for pixel. I am equally proficient with Subversion and Git alike. I prefer to work with Git and local topic branches and if necessary, I have extensive experience with git-svn.</p>

<p><strong>PEOPLE SKILLS:</strong> I love to work with talented people. Even more I love to teach and help others learn about the things I love to do. I am currently the organizer for the <a href="http://757rb.org/" class="external-link">Hampton Roads Ruby User's Group (757.rb)</a> where I give talks each and every month. Teaching others and writing articles is not only enjoyable, but helps me stay current.</p>

<!-- <p><strong>ONLINE MARKETING EXPERIENCE:</strong> Community/Membership Web Sites, Email Marketing, Hosting and Reporting, Booking Engines, Loyalty Programs, Content Management Systems, Search Engine Marketing, Affiliate Programs, Comparison Shopping Portals, Online Marketing Places, Asset Management, eCommerce Methods, PR Systems, and Online Media Placement.</p>

<p><strong>ADVERTISING EXPERIENCE:</strong> Consumer Brands, Food, Cultural &amp; Non-Profits, Travel-Tourism &amp; Hospitality, Financial Institutions, Architecture &amp; Construction, Education, Health &amp; Medicine, Property Management, Advertising Agencies, Internet &amp; Application Service Providers, Technology Companies, and Many Local Industries.</p> -->



<h2>Professional Experience </h2>


<fieldset class="resume decisiv">
  
  <legend>Decisiv, Inc. - Richmond, VA</legend>
  <div class="form-item"><em>Sr. Software Engineer</em> - <strong>2006 to Present </strong></div>
  
  <p>Joined a small development team and assumed lead developer for 2 core Rails applications actively being ported from Java to Ruby. Redesigned and wrote the whole presentation layer for both applications, which now also includes custom AJAX LinkRenders for WillPaginate. Ported components from Java/Struts to Ruby/Rails while rewriting SQL Server stored procedures to ruby class/instance methods. Champion and developed unit/functional testing processes in both applications. This included writing low level SQL Server rake tasks which tunneled commands via SSH to window boxes for cloning schemas, and replicating stored procedures for test databases to rewriting both applications authentication systems to idiomatic rails libraries that include test helpers for functional testing while still maintaining backward compatibility to SSO services for legacy Java components. Create and maintain numerous libraries/plugins that extend the rails framework for the business model. These happen at almost every component to the framework but I specialize in ActiveRecord plugins to support legacy schemas and multi platform systems. Wrote all PDF::Writer generator classes that abstract out typical verbose PDF::Writer code to a friendlier interface.</p>
  
</fieldset>




<fieldset class="resume decipher">
  
  <legend>Decipher, Inc. - Norfolk, VA</legend>
  <div class="form-item"><em>Software &amp; Network Engineer</em> - <strong>2005 to 2006 </strong></div>
  
  <p>As the sole developer created a greenfield rails eCommerce application tailored for the consumer coupon industry. Due to the unique nature of the digital goods, virtual inventorying and security, the entire application included strict business rules on the monthly inventory per retailer campaign that had timeout hooks in the front end shopping cart. Digital goods were compiled and delivered via a custom Java application per transaction that created serialized coupons with barcodes for that specific transaction by the central rails application. Made extensive use of ImageMagick and the GNU Barcode ruby wrappers. Developed payment processing utilizing both the direct and express checkout methods of PayPal's NVP API. This app never made it to public view and most details are still patent pending. Built a community marketing site for the company's upcoming trading card game (TCG) called FightKlub. The majority of my involvement for this application involved developing customizations to Mephisto/Beast and deploying them into production. These sites can be currently found at <a href="http://www.decipher.com/" class="external-link">decipher.com</a> and include Prototype animations, custom liquid templates, and core extensions to Beast to register new founding mentors.</p>

  <p>Moved entire company from Microsoft ActiveDirectory/Exchange services to Apple XServes using OpenDirectory/Postfix/Cyrus. Also moved all non legacy .Net applications and websites to those existing XServes. Troubleshooted critical routing errors by predecessors and firewall configurations which also involved setting up new gigabit Cisco equipment to maintain companies DMZ and existing VLANs to offsite warehouses.</p>

</fieldset>




<fieldset class="resume arcamax">

  <legend>Arcamax, Inc. - Newport News, VA </legend>
  <div class="form-item"><em>Marketing Director </em>- <strong>2004 to 2005 </strong></div>

  <p>Joined the Executive Committee to help provide steerage for the company's new business unit that focused entirely on eCommerce sales of closeout <a href="http://www.planetcdrom.com/" title="Arcamax, Inc. - Planet CD-ROM" rel="external" class="external-link">CD-ROM Software</a> and <a href="http://www.planetdvdnow.com/" title="Arcamax, Inc. - Planet DVD Now" rel="external" class="external-link">DVD Movie</a> titles. It was my responsibility to maintain the profitability of the company, which relied heavily upon my previous Online Marketing experience and my technical prowess to leverage their existing IT infrastructure and Internet Publishing assets.</p>

  <p>I successfully integrated all revenue and marketing channels into a trackable system that utilized a combination of their proprietary systems, 3rd party conversion tools, new custom code that captured and reported on aggregate data. A summary of these channels include:</p>

<!-- <ul>
<li>Retention Marketing System</li>
<li>Search Marketing (Organic &amp; PPC)</li>
<li>Affiliate Program &amp; Comparison Shopping Portals</li>
<li>Online &amp; Offline Media Placement</li>
<li>Virtual Drop Shippers</li>
<li>Incentivised Loyalty Program</li>
</ul>

<p>Completely overhauled the entire pay-per-click search engine (PPCSE) and affiliate marketing systems into a successful prospecting engine within 8 weeks time. Built and integrated conversion tracking code that identified campaign success to the keyword level and post-conversion metrics into the retention marketing system for up to one year past the initial conversion. Benefits of the new systems also reported on:</p> -->

<!-- <ul>
<li>Product Category Performance</li>
<li>Ad Copy Response</li>
<li>Cart Bailout Metrics</li>
<li>Click Fraud Sources</li>
<li>Negative Keyword Terms</li>
<li>Continuous Data Through the PayPal IPN</li>
<li>Relevant Online Partnerships via AdSense &amp; Publisher Referrals</li>
</ul>

<p>Continually maximized PPCSE marketing from an average of 300 terms to over 30,000 terms and phrases with a 275% increase in buyers and overall campaign profitability. Added conceptually driven keyword campaigns and matching ad copy that captured nearly every tangible search a consumer would find offers and products. This was achieved using a combination of creative thinking at the consumer level and mining corporate date into datafeed campaigns that were dynamically driven by SKU metadata. Deployed keyword buys over the following 1st and 2nd tier PPCSEs, note that 3rd tier PPCSEs are rampant with click fraud and are not included Google, Overture (now YSMS!), MSN, Kanoodle, and the Kaboose Kids Search</p>
<p>Revamped the affiliate marketing program from a passive ad-hoc system that was frequently abused by self-referrals to a managed, proactive, lead generation engine for online partnerships. Established myself as a visible program manager that affiliates could interact with. Encouraged growth by usage of good communications and publishing writing bi-monthly newsletters that contained informative articles on how to maximize and use the more advanced technical aspects of the program. Acquired power affiliates and relevant online partnerships that increased the programs direct sales up 500% with value added buyers into the retention marketing system.</p>
<p>Developed a 2-year business strategy that primarily focused on utilizing the company's previously untapped core strengths within their EC system for Internet Publishing and secondarily on the actionable data acquired over the previous 3 months. Plan called for a company-wide documentation process on key roles within Product Acquisition, Inventory Management, Web Development, Customer Service, Sales, and Support. The result was a shared knowledgebase <a href="http://en.wikipedia.org/wiki/Wiki" title="What is a Wiki?" rel="external" class="external-link">Wiki</a> that allowed me to appropriately adjust our internal processes to meet future sales goals. To compliment this and expand capacity, I organized an internship program with <a href="http://www.ecpi.edu/campus/new/" title="ECPI's Newport News Campus Homepage" rel="external" class="external-link">ECPI's  Newport News</a> campus, to train upcoming graduates in the fields of Website Design, Development, and eCommerce.</p>
<p>As a personal reference, I highly recommend a good <a href="http://www.targetem.com/internet-marketing-services/" rel="external" class="external-link">internet marketing virginia SEO</a> company called Target'em.</p> -->

</fieldset>




<fieldset class="resume swissdisk">
<legend>SwissDisk, Inc. - Los Angeles, CA </legend>
<div class="form-item"><em>Vice President</em> - <strong>2004 to Present </strong></div>
<p>In the later part of 2004, I partnered with my brother <a href="http://www.linkedin.com/in/benmcollins" rel="external" title="Ben Collins Resume" class="external-link">Ben Collins</a> to start up a small company in the niche market of the online storage industry. Even though our company was bought out, I still contribute by maintaining a position on the Board of Directors and continue my prior creative work and online marketing efforts. </p>
</fieldset>



<a name="stratum" class="cleanlink"></a>
<fieldset class="resume stratum">
<legend>Stratum Marketing - Norfolk, VA </legend>
<div class="form-item"><em>Technical Director</em> - <strong>1999 to 2004</strong></div>
<!-- <p>As an Account Executive I have applied my planning and strategic thinking to the broadest marketing objectives of various local and national clients to create truly integrated and trackable campaigns that are driven by strong creative concepts. My record shows consistent up sells with the largest return on investments that have given Stratum their richest case studies and established new lines-of-business for future sales.</p> -->
<p>Responsibilities included identifying customer requirements, making build-versus-buy decisions, maximize technology partnerships, and developing products to capitalize on existing and emerging market opportunities. Defined and managed the company's collocation/hosting needs, hardware/software suppliers, online media placement channels, e-commerce strategies &amp; content management systems. Provided documentation/training, and many other hands-on IT support services.</p>
<p>Developed and managed many solutions for large-scale projects throughout the company. Successes were attributed to a utilization of strong organizational skills, standard management processes, and a hands-on understanding of numerous UNIX, Windows and Internet development practices. Maintained the highest customer satisfaction rating and strict adherence to project and financial milestones.</p>
</fieldset>


<fieldset class="resume infinet">
<legend>InfiNet - Norfolk, VA</legend>
<div class="form-item"><em>Product Development &amp; Affiliate Support</em> - <strong>1998 to 1999 </strong></div>
<p>Worked to obtain lead technician by providing strong affiliate support, documentation of skills, and the ability to train new/existing staff. Provided the department with new efficient processes and applications.</p>
<p>Working with the head of Product Development, I was awarded a contract with NetSurfer to provide consulting and development for its Macintosh software distribution method. While partially on-site in Atlanta, Georgia, the product was built, tested, and integrated into the CD Surfer Kit for distribution to InfiNet and all of their affiliate newspapers.</p>
<p>Provided design and print services for the Human Resources Department's latest campaign of collateral pieces for their employment workshops.</p>
</fieldset>


<fieldset class="resume macgraphics">
<legend>MacGRAPHICS - Virginia Beach, VA</legend>
<div class="form-item"><em>Account Manager &amp; Design </em> - <strong>1994 to 1998 </strong></div>
<p>Honed previous design, typography &amp; layout experience in a full-service boutique agency during the cusp of the digital media age. This allowed me to gain invaluable  knowledge and skills in the mechanics of traditional design/layout while using the earliest computer applications.</p>
<p>Worked with exciting local industries and brands such as the logo/collateral design for ABNB Credit Union, package design for Kettler International, and Womble Realty. Streamlined operations and developed efficiencies in workflow for many of these clients including re-writing sales and development specs for Bell Atlantics Yellow Pages ad production.</p>
<p>Created a new line-of-business for Internet Marketing at the onset of the development of other new-media companies. This was done by strengthening an existing client relationship in the Travel-Tourism/Hospitality vertical of the business. I was responsible for hiring and training new staff for this market.</p>
</fieldset>





filename: 2006-01-08-who-is-to-blame-for-this.html
         title: Who Is To Blame For This ?
    categories: ["Colophon"]
     disqus_id: /2006/1/8/who-is-to-blame-for-this
          body: 




<p>The concept for my blog reflects a big theme in my work ethic, working smarter not harder. Let me say that again, <strong>WORK SMARTER</strong>, not harder! The best way to accomplish that is to build tools. Poor programmers complain about their tools, good ones build tools to do the work for them. Since I am a problem solver / tool builder by nature, the term MetaSkills, a play on <a href="http://en.wikipedia.org/wiki/Meta_programming" title="What is Meta Programming?" class="external-link">meta programming</a>, seemed to best describe me in a singular cohesive <a href="http://www.actionmoniker.com/" class="external-link">action moniker</a>. If you want to find out more about me professionally, you can <a href="/colophon/ken-collins-resume">read my resume</a>.</p>

  
<h2>My History</h2>

<p>Long before I became a full time software engineer, my career had started in the world of advertising. That story started in ninth grade when I submitted a report in history class that got an A+ simple for the fact that it was presented well. I did have an advantage beyond my personal World Book Encyclopedias as I was probably the first kid in 1986 to wield a $5,000 laser printer and personal publishing system  from home. I also worked at a local print shop and my Mac Plus consistently outperformed the <a href="http://www.old-computers.com/museum/computer.asp?st=1&amp;c=1052" title="Go to the museum!" rel="external" class="external-link">Xerox 6085 Workstations</a>  I worked on. That's right, at the age of 14 I was being paid as a Desktop Publishing computer operator. Back then, a 10 megabyte hard drive was elite and the fastest way to rotate text was to stand on your head. My have the times changed. To learn more about my job history, <a href="/colophon/ken-collins-resume" title="Ken Collins' Resume">go check out my resume</a>. Sorry, you will not find the print shop nor my paper route on there :)</p>


<h2>How Has This Happened ?</h2>

<p><img src="/files/colophon/macmini_385x234v2.png" alt="The Mac Mini - An IT Swiss Army Knife" width="335" height="204" style="float:right" />That's a great question and I'm glad your reading on. I did say that I was a Mac addict did I not? Maybe you picked up on that. Well I am and here on this website I am taken Macs out of their normal piegonholed category as being used for the creative industry and graphic artists and into the world of serious IT using the power locked behind the Mac OS X operating system. By example even this website, including its databases, DNS, and mail services are all hosted on an average  Mac that  anyone can buy at the local computer store. I am specifically speaking about the Mac Mini.</p>

<p>Macs are what I called canned LINUX/UNIX and they can do so much once you decide to get under the hood and tinker around behind the graphical user interface, where the real power lies. On my blog I want to cover as much about these fun places. Here is a growing list on the topic:</p>

<ul>
  <li><a href="/2006/2/5/mini-network-with-a-big-xserve-style">Mini Network with a Big XServe Style</a></li>
  <li><a href="/2006/2/19/how-to-control-browser-caching-with-apache-2">How To Control Browser Caching with Apache 2</a></li>
  <li><a href="/2006/3/19/getting-on-good-terms-with-the-os-x-shell">Getting On Good Terms With The OS X Shell</a></li>
  <li><a href="/2006/5/29/my-own-soup-to-nuts-recipe-for-ruby-on-rails-on-os-x">My Own Soup to Nuts Recipe for Ruby on RAILS on OS X</a></li>
  <li><a href="/2006/6/30/flying-light-configuring-drupal-and-lighttpd">Flying Light - Configuring Drupal and LightTPD</a></li>
  <li><a href="/2008/3/22/metaskills-net-reborn-on-mephisto">MetaSkills.net Reborn on Mephisto</a></li>
  <li><a href="/2008/4/13/now-on-passenger-mod_rails">Now on Passenger (mod_rails)</a></li>
</ul>

<p>The data diagram below is a bit outdated but was the starting point of my home mac mini cluster.</p>

<div class="iecenter">
  <div class="photobounding" style="width:491px">
    <div class="tl"></div>
    <div class="tr"></div>
    <div class="bl"></div>
    <div class="br"></div>
    <div class="photoborder"></div>
    <div class="phototime">
      <img src="/files/mini-network/simple-mac-mini-network-diagram.jpg" alt="Most Advanced Simple Mac Mini Network Diagram" width="463" height="371" />
    </div>
  </div>
</div>

<p>&nbsp; </p>





filename: 2006-01-11-the-best-font-for-mac-programmers-profont.html
         title: The Best Font for Mac Programmers, ProFont
    categories: ["Apple/OSX", "Home", "TextMate", "Workflow"]
     disqus_id: /2006/1/11/the-best-font-for-mac-programmers-profont
          body: 


<p>After being exposed to using <a href="/blog/heuristics/conventions/textmate-by-programmers-for-efficiency-experts">TextMate</a> for all my normal text editing needs, I soon began to do more things than just simple <a href="http://en.wikipedia.org/wiki/Grep">GREP-based</a> search and replace functions. I actually started to look at code more often. Within a few short months, I had gone away from my established norm of the happenstantial viewing of simple CSS, HTML and PlainText files to a ful-time lookey lou of languages such as Ruby, XML, PHP, SQL or any number of configuration files for Apache, PHP, Postfix, Bind, and so on. It's been an exciting time for me over the past 6 months and it feels like open hunting season on any hard to find UNIX application files that are deep in the brush of  my Mac OS X. Belive me, treasure are rich once you start digging.</p>

<h2>So What's Great About ProFont?</h2>

<div class="photobounding" style="width:335px; float:left; margin-right:20px;">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/heuristics/provsmonaco.gif" alt="ProFont vs. Apple's Monoco" width="307" height="140" />
	</div>
</div>

<p>On the left, you can see ProFont compared to the original version of Apple's Monaco font face. This picture was taken from the ProFont distribution readme file. It really shows the differences in how it treats zeros, apostrophes, lowercase L, upper I, colons, and semi colons. This stuff makes it really important if you are looking at code all the time. Profont even shines in the Terminal window too. Size matters too, ProFont works well at 9pt if your eyes are holding up that well, mine are not, so I have to stick at 10pt.</p>

<h2>Where Do I Get ProFont?</h2>

<p>Right here.   I've packaged it for Mac and Windows. If your a Linux or Atari junky and want ProFont, go check out an <a href="http://www.tobias-jung.de/seekingprofont/" class="external-link" rel="external" title="ProFont for Windows, for Macintosh, for Linux, and even for Atari!">indepentdant maintainer</a> for the font and download those verions from his website. </p>




filename: 2006-01-28-cooking-with-drupal.html
         title: Cooking with Drupal
    categories: ["Home", "Miscellaneous"]
     disqus_id: /2006/1/28/cooking-with-drupal
          body: 


<p><img src="http://www.metaskills.net/files/cooking-with-drupal-small.gif" alt="Cooking With Drupal" width="152" height="180" style="float:left;margin-right:11px;"/>One of my few New Year's resolutions was to blog often in the year 2006, in fact, I promised myself I was going to write at least one post every day. Well it's been two weeks since my last update and the world has missed some pretty good brain dumps from yours truly (sorry about that) but I have been keeping good notes and I do have great news about today!</p>
<p>Over the past few weeks I have been <a href="/meta-theme-for-mephisto/" title="Meta Theme for Mephisto">cooking up a storm</a> in my <a href="/blog/colophon/who-is-to-blame-for-this#digitalkitchen" title="My Home Network Setup">digital kitchen</a> with one of the best content management systems around, <a href="http://www.drupal.org/" rel="external" title="Learn About One of the Best Content Management Systems on the Planet, Drupal." class="external-link">Drupal</a>. This is the same CMS that runs the metaskills.net site and it has a good history for not just being a Blog or Forum software but an entire community  platform, thus Drupal's tag line, Community Plumbing.</p><!--break-->
<h2>How Can You Say Drupal Is The Best CMS ? </h2>
<p>OK, I would like to take back my exclamation about Drupal being the best CMS. A lot of people make absolute statements like this and they are  always never wholly true. Choosing the &quot;best&quot; CMS is a relative concept and only possible when one starts backwards and defines their own end requirements and vision purpose of the system  needed. For instance, if all you wanted was a personal blog, I would highly recommend <a href="http://wordpress.org/" rel="external" class="external-link" title="WordPress is a state-of-the-art semantic personal publishing platform.">WordPress</a> as the right CMS for you. In that same vein, if you are new to the internet and tend to stay in the 3-foot section,  a hosted non open source blogging system like <a href="http://www.typepad.com/" rel="external" class="external-link">TypePad</a>, <a href="http://www.livejournal.com/" rel="external" class="external-link">LiveJournal</a>, or even Google's <a href="http://www.blogger.com/" rel="external" class="external-link">Blogger.com</a> would be a good choice. These are great for beginners that have no interest in the back end setup work or maintenance typically associated with a professional CMS. </p>
<p>On the other hand, if you do real business on the internet, a <a href="http://en.wikipedia.org/wiki/Software_as_a_Service" rel="external" class="external-link">SaaS</a> might not do. That's OK because your still in for a good swim as there are  numerous choices to be made. If you are a small publishing company like <a href="http://www.ilounge.com/" rel="external" class="external-link">iPodLounge</a>, you could use pMachine's <a href="http://www.pmachine.com/ee/" class="external-link" rel="external">Expression Engine</a>. Its tag-based and well documented system is very easy to use, customize, and control permissions to content and features. If you are a software developer and need workflow, project management, CRM, bug and issue tracking <a href="http://www.atlassian.com/" rel="external" class="external-link">Atlassian's</a> JIRA or Confluence could be right for you. Moving on into the open source software realm, options include <a href="http://www.zope.org/" rel="external" class="external-link">Zope</a> or <a href="http://plone.org/">Plone</a> for the Python programmers to <a href="http://www.mamboserver.com/" rel="external" class="external-link">Mambo</a> or even <a href="http://www.drupal.org/">Drupal</a> for the PHP enthusiasts. Many of the features in all of these system blur together and it really does matter on many personal and business factors to agree on the &quot;best&quot; CMS for your needs.</p>
<h2>That Smells Good, What Ya Cooking ?</h2>
<p>Ah yes, that! Well now that I have avoided a flame war by sidestepping the &quot;best&quot; CMS argument let's get back into my favorite CMS at the moment, Drupal. When I first launched metaskills.net I used the current 4.6 version. Since then the Drupal team has been hard at work on version 4.7 (currently beta4) and to help give back to this great open source software movement, I decided to learn how Drupal works on the back end and contribute my blog theme. Doing so meant I had to actually learn a little PHP and JavaScript and the correct <a href="http://drupaldocs.org/" rel="external" class="external-link">Drupal API</a> and publishing hooks, both old and new. I have to say that I am very impressed with the Drupal system. Its power and extensibility is quite unique and its community demonstrates the best practices of what open source software is all about.</p>
<p>Here is the new <a href="/meta-theme-for-mephisto/" title="Meta Theme for Drupal">Meta Theme for Drupal</a>, this is a demonstration site that will serve as a working reference and online documentation for the theme's project on drupal.org. Here is an abstract list of some of the new features.</p>
<ul>
  <li>Total CSS over write of all Drupal's 4.7  features</li>
  <li>The world's best style sheet switcher with DOM2 support and cookies</li>
  <li>Custom image gallery theme with dynamic lightbox.js support</li>
  <li>PNG support for IE 6 and lower</li>
  <li>Multiple code syntax highlighting options  </li>
  <li>Custom and dynamic maintenance page</li>
  <li>Dynamic comment depth integrated with CSS rules  </li>
</ul>
<p>Please feel free to browse this site and comment and ask question. If you see any problems, let me know as I will be actively supporting this them for upcoming Drupal releases. </p>
<p>&nbsp; </p>



filename: 2006-02-05-mini-network-with-a-big-xserve-style.html
         title: Mini Network with a Big XServe Style
    categories: ["Apple/OSX", "Heuristics", "Home"]
     disqus_id: /2006/2/5/mini-network-with-a-big-xserve-style
          body: 


	<p>Or, how to be the biggest network geek you can  in only 1 square foot of space. Starting last year after  reading <a href="http://mundy.org/blog/index.php?p=40" rel="external" class="external-link">Ward Mundy's How-To Bonanza</a>, I knew I needed to use the Mac Mini as the core hardware component for my home network. Mostly because it looks good and small form fits easily on my desk. Good as that might be, the Mac Minis do have drawbacks and, if you're serious about your hosting choices, these do have to be overcome; this is what my post is all about.  </p>
		<p> So like most people that create networks I did not realize that the Mac Mini includes 3 high speed  network interfaces and  that with a little bit of work and the right architecture they can be used  to operate in much the same manner one would  see in a high-end network operations centers. I manage one such NOC and I wanted my home network  to function like most companies who do serious business online. These features typically include:</p>
		<ul>
		  <li>Internal LAN Network Interfaces - (10.0.1.0/24 Addresses) </li>
		  <li>Internal Perimeter Network (DMZ) Behind a NAT or Port Forwarding Firewall </li>
		  <li>Both Internal (LAN) and External (Public) DNS Services </li>
		  <li>IP Over Firewire  Connections - (192.168.1.0/25 Addresses) </li>
		  <li>Hard Drive Redundancy and Backup Using RsyncX - (typically RAID 1 or 5)</li>
    </ul>
		
		<h2>Starting At The End</h2>

    <p>Below is a simple diagram of my final network. I had to lose a few features from the list above or even change their  meaning a bit, but I did end up with a network that utilizes most of them. </p>
		
		
<div class="iecenter">
<div class="photobounding" style="width:491px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/mini-network/simple-mac-mini-network-diagram.jpg" alt="Most Advanced Simple Mac Mini Network Diagram" width="463" height="371" />	</div>
</div>
</div>

    <h3>Public Interfaces</h3>

    <p>In the diagram above, the (green) represents public 100baseT ethernet interfaces while (orange) and (red) represent an internal network. Due to many questions regarding this layout, I want to stress that the WebSvr and generic Mini (mail and DNS) are publicly available on the 100baseT connections through my Linksys switch. The AirPort is for local LAN only, see below for details.</p>

		<h3>Internal Local Area Network ( LAN ) </h3>

		<p>First thing on the list that is the most important feature. A local area network that allows connections to each server without going outside to the public internet and thus taking up valuable bandwidth to those public interfaces. It's also good for security! The AirPort Extreme I had did this quite well by setting it to share a network connection using DHCP and NAT on the 10.0.1.0/24 subnet. The AirPort internet connection is setup to DHCP to my ISP from its WAN port. Each Mac Mini's AirPort network interface is manually set on its own IP address that never changes. This will need to be done so you can assign it an internal DNS name and reverse PTR record.</p>
		
		<h3>Internal DNS Services ( WebSvr Mini )</h3>
		
		<p>Now that we have an internal LAN  we can use this to host our own DNS so that machines on the local network including my powerbooks and other systems will use the AirPort interfaces for services. For instance, if I browse to my website from home, I am not using the public interface and bandwidth, but rather the IP with the AirPort address. The WebSvr Mini was my best choice for hosting DNS and I have BIND 9 configured to only listen for queries on the local 127.0.0.1 IP and its own 10.0.1.x AirPort IP address. BIND is also configured to forward all unknown queries to my ISP. It's very important to set the basestation's internet tab be set to use the WebSvr Mini's 10.0.1.x AirPort IP address for DNS, rather than your ISP. In this way, all clients that are not manually configured to do so will use the WebSvr mini for DNS and hence the AirPort interfaces on each server for services. I hope I have not lost you yet. When using internal DNS the right way, all local traffic such as Apache, Apple Remote Desktop, MySQL, SSH, etc. are all done locally and fast. So do not forget to tell Apache it can listen on that port.</p>
		
		<h3>IP Over Firewire Database Connection ( DbSvr Mini )  </h3>
		
		<p>The DdSvr Mini is using Apple's IP over firewire capabilities to connect to the WebSvr Mini. I have a patch cable connected to the WebSvr Mini with static IP addresses on both ends using the 192.168.1.0/24 subnet. For convenience each of the 192. addresses ends with the same number as their respective 10. AirPort addresses. This is the 3rd network interface that most people are not aware of. It has limitations but used wisely it can be very useful and fast. In the set up above I am able to keep all database traffic entirely off of my internal switch and localized to that one patch cable. Unless of course, I decide to access the DbSvr Mini using its LAN/AirPort address. Either way, this machine is totally off the public network and quite secure.</p>
		
		<h3>Other Services ( Mail and External DNS )</h3>
		<p>That's what the other unlabeled Mini is for. I have it configured to for mail and public DNS. Postfix is happily listening on its public and private addresses while DNS is only listening on the public IP. This server also does not have an external drive (see below) since I am not worried about its performance since the overhead is quite low for those two services. </p>
		
		<h3>Firewall Services </h3>
		<p>In this setup I did loose the ability to have private addresses for my two public Minis. Hard core network engineers would point out that this would be another layer of security by having a single firewall/router filter and translate packets to these two boxes. I agree and it makes for a nice portable network too. But, I am more than happy running the ipfw service built into OS X Server that is running on each Mac Mini. It is a great stateful firewall and it's not really a configuration nightmare to maintain each one. All in all, it's what I call the RONCO network, set it and forget it. Now on to fixing some of the deficiencies for the Mac Mini. </p>
		

		<h2>Improving Hard Drive Performance </h2>
		
		<p><img src="/files/mini-network/mac-mini-speed-boost.gif" alt="non" width="100" height="100" class="aright" />One of the first drawbacks to the mac mini is its poor hard drive speed. This can be a real big hit on performance when it comes to hosting a descent web or database server. Thankfully there are alternatives including  upgrading the internal drive with a faster  form factory laptop drive. However, these can be expensive and if you are like me and have a few Barracuda 7200 RPM 3.5 inch external drives laying around, you could save a lot by purchasing an inexpensive firewire enclosure. I decided on the <a href="http://www.newertech.com/products/products_mini1.php" rel="external" class="external-link">miniStack from newertechnology</a> since it had the best cooling features and good Mac Mini style. More importantly it sells with a driveless option and comes with firewire cables. A deal for only $69.00 for the entire kit. </p>
		<p>I purchased (2) of these, one for each Mini who's performance I was really concerned about, one for the web server and one for the database server. Each of those Macs boot directly from that external drive connected via firewire, the internal drive is used as a back up. Currently I have the DbSvr Mini setup as an RsyncX server and every night each of the 3 servers backs up to its internal hard drive. That's a separate post in itself. </p>
		<h2>Improving AirPort Signal Strength</h2>
		<p>I was really surprised to find out how poor the Mac Mini's AirPort signal strength was  after you stack something on top of it. My extreme basestation was only a few feet away and the interference from the drive enclosures was so bad that I could not connect two of them that were in the middle of my stack. Thankfully, I was no stranger to <a href="http://www.pbfixit.com/Guide/82.11.0.html" rel="external" class="external-link">taking apart my Mac Mini</a>. In fact, I had installed AirPort cards on all of them since it was cheaper for me to do so and I had an idea! So be warned, the following steps will  void your warranty ï¿½ but if you want to get good AirPort strength and this was a must for me, here is some helpful instructions. </p>
		<p>First though, the unordered list below is a parts list with links to Mac-Pro.com. If you are wanting to install an AirPort Extreme card in a Mac Mini, these are the parts you will need. Secondly, my AirPort signal strength &quot;fix&quot; below is by no means a comprehensive step by step for a first timer into the Mac Mini. I highly recommend <a href="http://www.pbfixit.com/Guide/82.0.0.html" rel="external" class="external-link">PBFixIt.com's Mac Mini Take Apart Guide</a> for that. </p>
		<ul>
		  <li><a href="http://www.mac-pro.com/s.nl/sc.2/category.333/it.A/id.1719/.f" rel="external" class="external-link">Mezzanine Board for Mac Mini</a></li>
	    <li><a href="http://www.mac-pro.com/s.nl/sc.2/category.22/it.A/id.1720/.f" rel="external" class="external-link">AirPort Antenna for Mac Mini</a></li>
		  <li><a href="http://www.mac-pro.com/s.nl/sc.2/category.333/it.A/id.1853/.f" rel="external" class="external-link">Screws for Mac Mini Mezzanine Board</a></li>
		</ul>
		<p>OK, now to the fun part, Improving your AirPort signal strength. You will need to get a good clean work area setup and take apart your Mac Mini down to the mezzanine board where your AirPort card is installed. Do not actually take that out, we are just going to reroute the cable. Just unplug the AirPort extreme antenna. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/getting-ready-to-work_large.jpg" rel="lightbox[mininetwork]" title="My best attempt at a clean work area. Remember to unplug the AirPort antenna from the extreme card."><img src="/files/mini-network/getting-ready-to-work_small.jpg" alt="My best attempt at a clean work area. Remember to unplug the AirPort antenna from the extreme card." width="300" height="225" /></a>	</div>
</div>
</div>

<p>The most logical place to run the AirPort antenna externally is through the security hole on the back right side. The only other choice would have us drilling holes in the vents and the hood that funnels air out the back of the Mac Mini. Least invasive is good, so I took a dremel and widened that hole up. I made a circular opening the same diameter as the existing width of the security hole. </p>
		
<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime"><a href="/files/mini-network/expanding-security-hole_large.jpg" rel="lightbox[mininetwork]" title="Use a dremel to open a circular hole in the back. Make sure to use a screw driver to remove any excess plastic."><img src="/files/mini-network/expanding-security-hole_small.jpg" alt="Use a dremel to open a circular hole in the back. Make sure to use a screw driver to remove any excess plastic." width="300" height="225" /></a></div>
</div>
</div>

<p>Now that the hole is wide enough, route the AirPort antenna back through this new opening. Make sure not to cut the antenna cord on the metal shielding. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/threading-the-anteana_large.jpg" rel="lightbox[mininetwork]" title="Route the AirPort antenna back through this new opening. Make sure not to cut the antenna cord on the metal shielding."><img src="/files/mini-network/threading-the-anteana_small.jpg" alt="Route the AirPort antenna back through this new opening. Make sure not to cut the antenna cord on the metal shielding." width="300" height="225" /></a>	</div>
</div>
</div>

<p>After you connect the AirPort antenna back to the AirPort extreme card, make sure that you leave the cable lying next to the slot the drive and fan assembly goes back into. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/external-mini-airport_large.jpg" rel="lightbox[mininetwork]" title="Make sure that you leave the cable lying next to the slot the drive and fan assembly goes back into."><img src="/files/mini-network/external-mini-airport_small.jpg" alt="Make sure that you leave the cable lying next to the slot the drive and fan assembly goes back into." width="300" height="225" /></a>	</div>
</div>
</div>

<p>Here is a picture of the how the antenna cable routes through the small opening that is designed to the left drive and fan assembly slot. This is where Apple intended the AirPort antenna to go. We are just taking a detour. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/airport-wire_large.jpg" rel="lightbox[mininetwork]" title="A picture of the how the antenna cable routes through the small opening that is designed to the left drive and fan assembly slot."><img src="/files/mini-network/airport-wire_small.jpg" alt="A picture of the how the antenna cable routes through the small opening that is designed to the left drive and fan assembly slot." width="300" height="225" /></a>	</div>
</div>
</div>

<p>Now we are ready to put the cover back on the Mini, but since we have the AirPort antenna going out the security slot, we will need to cut the metal anchor off. I sliced it right at the bottom, marked in the larger photo. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/cutting-the-security_large.jpg" rel="lightbox[mininetwork]" title="Cut the metal anchor for the security slot off before putting the cover back on. Cut it flush with the Mini's casing."><img src="/files/mini-network/cutting-the-security_small.jpg" alt="Cut the metal anchor for the security slot off before putting the cover back on. Cut it flush with the Mini's casing." width="300" height="225" /></a>	</div>
</div>
</div>

<p>I have found it extremely useful to take your putty knife and push on the shielding on the back side of the Mini when you are snapping the cover back on. Otherwise you will just bend the clips when you are pushing it together. And just in case your asking, yes, a putty knife is the standard tool for taking apart a Mac Mini. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/putting-the-mini-together_large.jpg" rel="lightbox[mininetwork]" title="Put your putty knife into the back of the Mini to help you nudge the shielding inside the cover when you are snapping it back together."><img src="/files/mini-network/putting-the-mini-together_small.jpg" alt="Put your putty knife into the back of the Mini to help you nudge the shielding inside the cover when you are snapping it back together." width="300" height="225" /></a>	</div>
</div>
</div>

<p>Here is a final picture of the back of the Minis after they are all back together. Here you can see the AirPort antennas sitting comfortably out the back. No signal interference now! </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/final-mac-mini-w-airport_large.jpg" rel="lightbox[mininetwork]" title="Here you can see the AirPort antennas sitting out the back of each Mac Minis."><img src="/files/mini-network/final-mac-mini-w-airport_small.jpg" alt="Here you can see the AirPort antennas sitting out the back of each Mac Minis." width="300" height="225" /></a>	</div>
</div>
</div>

<p>This was the reason I started my network project. I have 3 servers right on my home office desk with all the comforts of a full fledged NOC in less than 1 square foot of space. </p>

<div class="iecenter">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<a href="/files/mini-network/final-mac-mini-stacks_large.jpg" rel="lightbox[mininetwork]" title="Final front view of 3 Mac Mini server right on my home office desk wiht all the comforts of a full fledged NOC in less than 1 square foot of space."><img src="/files/mini-network/final-mac-mini-stacks_small.jpg" alt="Final front view of 3 Mac Mini server right on my home office desk wiht all the comforts of a full fledged NOC in less than 1 square foot of space." width="300" height="225" /></a>	</div>
</div>
</div>
		
<p>That's it! If you have any questions, please let me know. Or perhaps, maybe you have some ideas on what I could work on for version two of the network?</p>




filename: 2006-02-16-a-review-of-digg-com-traffic-and-cdns.html
         title: A Review of Digg.com Traffic and CDNs
    categories: ["Heuristics", "Home", "Miscellaneous"]
     disqus_id: /2006/2/16/a-review-of-digg-com-traffic-and-cdns
          body: 


<p>Thanks to all those that read my recent post about <a href="/blog/heuristics/networking/mini-network-with-a-big-xserve-style/2006/2/5/mini-network-with-a-big-xserve-style">networking 3 Mac Mini's</a> Hopefully it can help you create a network that is as close as possible to the  administrator's second home, the NOC. As an aside form the posts I had planned, I did want to share some of the statistics that the <a href="http://www.digg.com/" rel="external" class="external-link">digg.com</a> exposure generated and some &quot;simple&quot; helpful tips to those interested in surviving high traffic/bandwidth peaks. I'll cover more &quot;technical&quot; ways of setting up your server(s) to handle this too, but that is for <a href="/2006/2/19/how-to-control-browser-caching-with-apache-2">my next post.</a></p><!--break--><br />
		
		<div class="iecenter">
		<img src="/files/digg/digg-homepage.gif" alt="Mini network story on the home page of digg.com" width="541" height="231" />
		</div>
		
		
		<h2>Bandwidth Chart (7 Days) </h2>
		
		<p>The story made it to the front page of digg about one week ago on Monday, February 6th. It was posted to Digg about 36 hours earlier on Saturday evening and within  1 hour of making it to the home page, using approximately 60 diggs to get it there, the bandwidth capacity here at ActionMoniker.com really took a dive. Below is a 7 day chart that goes from Sunday, February 5th to Saturday, February 11th.</p>

    <div class="iecenter">
<div class="photobounding" style="width:412px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/digg/network-traffic.gif" alt="7 Day Bandwidth Chart Showing Digg.com Traffic Usage" width="384" height="263" />
	</div>
</div>
</div>
		
		<p>The first big spike in the chart was the initial onslaught of traffic on Monday afternoon from the digg.com homepage. That small gap you see there before the next big spike is where the WebSvr Mini had to be rebooted. In fact, I even upgraded the RAM to one gigabyte. You can see another spike  towards the end that correlates to the secondary traffic generated from the <a href="http://en.wikipedia.org/wiki/Blogosphere" rel="external" class="external-link">blogosphere</a>, basically when other bloggers and news portals got around to posting the information about my article and then linking back to my site. Neat statistics, but let's take a look at why that WebSvr Mini crapped out.</p>
		
		
		<h3>We All Need Cache</h3>
		
		<p>Apache seemed to do well with the quantity of requests coming at it from Digg. That said, my post did have one HUGE draw back, the 10 large images on the article's page that totaled  124 Kilobytes in size. My assumption is that when the server started taking requests in mass   my 2.6 Megabit connection was not fast enough to serve those images in a timely manner. This caused a
	  cascading effect on Apache by  keeping memory intensive threads open for longer and longer until the server could not take it any more.</p>
		
		<p>This is where a good cache comes in handy. Not  browser or proxy caches, those are for <a href="/2006/2/19/how-to-control-browser-caching-with-apache-2">my next post</a> too, but rather  what are called gateway caches which are more commonly called Content Delivery Networks (CDNs). These are distributed caching servers throughout the internet that typically help deliver content to a client by geotargeting a visitors IP address and then finding a server close to that IP with the requested content. The best example of commercial CDN is <a href="http://www.akamai.com/" rel="external" class="external-link">Akamai</a>, I think Apple bought or invested in these guys about 3 years ago, but I digress. The point is that CDNs can help distribute the load off of your local server by copying your content be it a whole web page or just certain media types and serving them up to your visitor's browser.</p>
		
		<p><img src="/files/digg/map-world-gen-1.gif" alt="The Coral cache network map." width="248" height="107" class="aright" style="margin: 0 0 10px 10px"/>The most popular CDN that is freely used by many digg.com readers is a company called <a href="http://www.coralcdn.org/" rel="external" class="external-link">Coral</a>. Many times a Digg or Slashdot article will take down an unsuspecting server (know as the slashdot effect)   forcing prospective visitors to view your content from a cached version on a sever very far away from your own. Often readers on both Slashdot and Digg try to &quot;coralize&quot; your article by linking to it from a comment thread using the Coral network as a cache. This is easily done by  adding <code>.nyud.net:8090</code> to the end of any hostname in a URL. For instance <code>http://www.metaskills.net/article.php</code> would become <code>http://www.metaskills.net.nyud.net:8090/article.php</code> but this is really only helpful to prospective readers if the coralized link was used as the initial link on Digg or Slashdot.</p>
		  
		  <div id="content-message" class="messages error iecenter" style="margin-top:8px;width:275px;text-align:left;">
      UPDATE: As of February 17th, Coral now uses both ports <strong>:8090</strong> and <strong>:8080</strong>
      </div>
		  
		  <p>In my case it was not and I did not like the idea of users having to read my article on somebody else's server nor relying on them finding a coralized link to my site buried in a comment thread. If that had happened, I would have lost traffic statistics, user comments, RSS subscriptions, lateral page visitation, and many  visitors altogether. I had to get the server running again and cope with my limited bandwidth. Wow, I just said 2.6 megabits was limited :) </p>
		


		<h3>Just Cache Images or Large Media </h3>
		
		<p>When I rebooted the WebSvr Mini, I immediately changed the the <code><img src=""></code> tags of the 10 images in the content area that had the largest file sizes to appear from the Coral network. This was done by changing the image source tags from <code><img src="/images/mac-mini-network.jpg"></code>  to a fully qualified domain source using the coral server which ended up looking something like this <code><img src="http://www.metaskills.net.nyud.net:8090/images/mac-mini-network.jpg"></code> thus ensuring any future visits to my article received those images from  1 of any of the the <a href="http://coralcdn.org/maps/" rel="external" class="external-link">260 Coral network servers</a>. In this way the largest aspect of my page was completely offloaded leaving my local Apache to handle the page source and other media request in a timely fashion. Best of all, this was completely transparent to the end user and no features were lost in their browsing experience. </p>

		<p>I highly suggest that if you know ahead of time that an article of yours will be Slashdoted or Dugg, that you coralize as many of the images or large media files on your web server as possible. Your options on what that media content type is may vary, but choosing the ones with the largest file size first is usually the best idea. It can save your site from going down or to a creeping crawl. </p>


		<h2>Do You Digg It ? </h2>

		<p><img src="/files/digg/digg-hat.gif" alt="Digg.com Hat" width="125" height="133" class="aleft" style="margin-right: 5px;"/>Well I do and to date we have had 34,000 reads to the Mac Mini Network article. With a success like that it was time to sport some gear. I had already changed my default home page from my <a href="http://www.google.com/ig" rel="external" class="external-link">customized Google</a> with Slashdot articles to digg.com and now all I needed was a hat to tell the world. For the past 5 months I have been sporting a /. hat and matching retro LED digital watch from ThinkGeek.com and it was time for a change. I thought for sure that there would be a vendor out there selling &quot;I got Dugg&quot; or &quot;Digg It&quot; or even a logo embroidered hat, but I could not find one at all! I would have to say that this company has sure missed out on some sweet merchandising opportunities. So I will have to stay with my /. hat. </p>


		<p>Above is a comp I put together at CafePress.com. I even mailed it to Digg.com and asked what they thought. They kindly asked that I refrain from using their mark on resale items until their lawyers finished helping them with their copyrights and licensing agreements. Maybe I will go back to /. </p>
		<p>&nbsp;</p>
		




filename: 2006-02-19-how-to-control-browser-caching-with-apache-2.html
         title: How To Control Browser Caching with Apache 2
    categories: ["Heuristics", "Home", "Miscellaneous"]
     disqus_id: /2006/2/19/how-to-control-browser-caching-with-apache-2
          body: 


    <p>If you are like me, an up and coming network geek, you probably thought that browsers  automatically cached a site's assets and media as you went through it and looked at each page. I was very surprised to find out that this was not the case. In fact, every time I went from page to page on my newly created MetaSkills.net blog all of the CSS, PNG, JavaScript and  other media files that were common to those pages were being downloaded at each and every request. WOW! This was bad news for me and, if left untouched, it would have easily caused all of my bandwidth to be taken up when 50+ users came and started clicking around.</p>
    <p>This tutorial documents how I learned about browser caching and how you can force a browser to maintain representations of your site's assets using Apache 2 and its configuration directives. These directives will allow you to have either general or fine grained control over how a browser caches each file/type on your site. If you want to <a href="/2006/2/19/how-to-control-browser-caching-with-apache-2#goodpart">skip ahead to the good part</a> and just apply them, feel free to do so. </p>
    <h2>Useful Tools For This Tutorial </h2>
    <p>Before we go any further, let's cover two really useful tools that will help you figure out what is going on with your website and to see if your web server is controlling browser caching as it should.  </p>
		
    <ul>
      <li><a href="http://en.wikipedia.org/wiki/Tail_(Unix)" rel="external" class="external-link">The Unix &quot;tail&quot; Command </a></li>
      <li><a href="http://livehttpheaders.mozdev.org/" rel="external" class="external-link">The Live HTTP Headers Firefox Extension</a></li>
    </ul>
		
		<a name="tail" class="anchor"></a>
    <h3>About The tail Command </h3>
    <p>Tail is a program on Unix-like systems that is used to display the last few lines of a text file, most commonly used on log files. The command syntax is real simple and for the purposes of this tutorial you will only need to concern yourself with the specific command in the code block shown below; the path can be either an absolute string (from the server root) or relative to the directory you are working in. This command will let you see live additions as they are being written to your Apache 2 log file. To exit from this program, simply press <code>Control-C</code> on your keyboard.</p>
		
<pre class="command">tail -f /the/path/to/your/logfile.log </pre>
		
    <p>If you have ever used the <a href="http://www.apple.com/server/macosx/" rel="external" class="external-link">OS X Server Admin</a> tool, you may have noticed that each service listed in the left hand side has a corresponding &quot;log&quot; tab on the right that allows you to see that latest log entries for that particular service. The log viewing feature even has a nifty search box. What is really happening here is that the Server Admin GUI is using  the same Unix <code>tail</code> command mentioned above to show you the last several dozen lines in that file. I normaly like using the GUI tools that the Mac has to offer, but I am not using the default Apache 1.3 that comes with OS X, rather the <a href="http://docs.info.apple.com/article.html?path=ServerAdmin/10.4/en/c5ws8.html" rel="external" class="external-link">evaluation version of Apache 2</a> located in the /opt/apache2 directory. This means the GUI is not going to allow me to see the running log file of Apache2. Here is where using the underlying Unix tools on OS X comes in  handy.</p>
		
    <p>The tail command can be found on any OS X Server or Client installation; it is there by default. You can use this command from the server itself or you can SSH into the server with your laptop or other personal Mac and execute it from Terminal. Remember, this command is not useful to you if you do not have direct or SSH access to your web server where your log file is being written. If this is the case you will have to download it via your normal means and examine it in your favorite text editor. </p>
		
		<a name="livehttpheaders" class="anchor"></a>
    <h3>About  HTTP Headers &amp; The Firefox Extension</h3>
		
    <p>HTTP headers are transparent to the end user and most people don't even care that they exist at all. Despite this, they are included at the beginning of   every response that comes from your server and they contain important information about that response. The most common  information includes the date, type of server sending the HTTP response, and encoding of the HTTP response. If you have the gumption, go read the 40+ pages on the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14" rel="external" class="external-link">field definitions defined by the RFC 2616</a> for HTTP headers. Otherwise, let's just focus on caching and seeing those HTTP headers which are normally invisible. </p>
    <p>This is where Firefox comes in handy. Many times I will use Firefox  during the development of a website simply because it has many extensions that have been specifically written to ease the technical aspects of making a website. If you don't have Firefox already, you can <a href="http://www.mozilla.com/firefox/" rel="external" class="external-link">download Firefox here</a>. Once you have that installed and running, you can<a href="http://livehttpheaders.mozdev.org/" rel="external" class="external-link"> get the Live HTTP Headers extension</a> from the developers site at mozdev.org. </p>
    <p>Using the Live HTTP Headers extension is really easy. All you have to do is open the window by going to the &quot;Tools&quot; menu in Firefox and clicking on &quot;Live HTTP headers&quot;, this will open a blank window. When you use Firefox to go to a page or file, the HTTP header(s) will appear in that new window. Below is an example:</p><br />
		
<div class="iecenter">
		<img src="/files/browser-caching/live-http-headers.gif" alt="A preview of the Live HTTP headers window in Firefox." width="468" height="398" />
</div>

    <p>If you are more comfortable using the Unix command line, there is one more useful tool that I would recommend called <a href="http://furl.darwinports.com/" rel="external" class="external-link">furl</a>.  It does the same thing as the Live HTTP Headers Firefox extension but only from the command line interface (CLI). It does not come on Mac OS X Server or Client by default but can be installed using the <a href="http://darwinports.com/" rel="external" class="external-link">Darwin Ports</a> system. I highly suggest using this vs. the Firefox extension since it is a leaner utility, but I'll leave it up to you whether you are more comfortable with a GUI or the command line. </p>
		
		
    <h2>Does My Site Control Browser Caching ? </h2>
		
    <h3>Examining Your Apache Log Files (using tail) </h3>
		
    <p>Let's start with the easy way of finding out. Simply open your Terminal program in the utilities folder and tail the log file for your host by typing the command <a href="/2006/2/19/how-to-control-browser-caching-with-apache-2#tail">described above</a>. While leaving the terminal window open, navigate to your site with your browser. You should see additions to your log file appear live in your terminal window and it would look something like this picture below.</p><br />
		
		<div class="iecenter"><img src="/files/browser-caching/tail-command-in-terminal.gif" alt="The Mac OS X terminal window using the tail command on my Apache 2 log file." width="547" height="226" /></div>
		
    <p>As you browse around while looking at this window, you should NOT see yourself logging requests for CSS, Images, GIFFs, or JPEGs over and over again. If you are the only person on your website at that time, this should be fairly apparent. </p>
		
    <p>But, if you are not the only person on your site, it may get kind of noisy looking at all the log file entries whizzing by in the terminal window. In this case, you may find it useful to &quot;pipe&quot; an extra command to the tail program so that all you see is your requests and not the requests of others. To do this, simply make a note of your IP address and replace the <code>10.0.1.4</code> IP address in the command below with your own. </p>
    <pre class="command">tail -f /the/path/to/your/logfile.log | grep 10.0.1.4</pre>

    <p>This combined command will now use the <a href="http://en.wikipedia.org/wiki/GREP" rel="external" class="external-link">GREP</a> command in conjunction with the  tail program to search and display log entries with the matching pattern, in this case lines that contain your IP address. Remember to use <code>Control-C</code> to exit from the tail program when needed.</p>
    <h3>Examining Your HTTP Headers </h3>
    <p>The other way of finding out if your site is taking advantage of browser caching is to examine the HTTP headers on any given server response, be it a whole page or a single file. You can do this using the <a href="/blog/heuristics/sysadmin/how-to-control-browser-caching-with-apache-2#livehttpheaders">Live HTTP Headers Firefox extension</a> mentioned above or by using the Unix <a href="http://furl.darwinports.com/" rel="external" class="external-link">furl</a> program if it is installed on your system. A common HTTP header response will look something like this.</p>
		
<macro:code lang="plaintext">
HTTP/1.1 200 OK
Date: Sun, 19 Feb 2006 16:42:05 GMT
Server: Apache/2.0.55 (Unix) DAV/2 PHP/5.1.1
Last-Modified: Sun, 08 Jan 2006 16:17:25 GMT
ETag: "73049-defc-37c52f40"
Accept-Ranges: bytes
Content-Length: 57084
Cache-Control: max-age=7200
Expires: Sun, 19 Feb 2006 18:42:05 GMT
Connection: close
Content-Type: image/png
</macro:code>


    <p>What we are looking for in the header are the &quot;Cache-Control&quot; and &quot;Expires&quot; fields. These fields control how long the browser will cache this media or page asset from your server. Having a low value like &quot;1&quot; in &quot;Cache-Control&quot; can be just as bad as no value at all.</p>
    <p>If you have those fields present, you've got a head start on the situation. If not, you may need to make sure Apache 2 is loading the <a href="http://httpd.apache.org/docs/2.0/mod/mod_expires.html" rel="external" class="external-link">mod_expires</a> and <a href="http://httpd.apache.org/docs/2.0/mod/mod_headers.html" rel="external" class="external-link">mod_headers</a> modules. Most installations and builds of Apache 2 include these modules since they are pretty essential. If you are using the Apache 2 in OS X Server's opt directory, this is the case and you only need to make sure that they are turned on by opening the http.conf file and making sure the following two lines do not have an # sign in front of them. </p>

<macro:code lang="plaintext">
LoadModule expires_module modules/mod_expires.so
LoadModule headers_module modules/mod_headers.so
</macro:code>
		
		
    <p>When these modules are loaded and working, we can then start to use the correct Apache 2 directives to control how browsers cache everything from pages to images across the whole site or in a specific directory. </p>
		
		
    <a name="goodpart" class="anchor"></a>
		<h2>Using Apache 2 To Control Browser Caching </h2>
    
		<p>Now that we are here, I can assume that you have both the <a href="http://httpd.apache.org/docs/2.0/mod/mod_expires.html" rel="external" class="external-link">mod_expires</a> and <a href="http://httpd.apache.org/docs/2.0/mod/mod_headers.html" rel="external" class="external-link">mod_headers</a> modules  compiled and loaded into your Apache 2 installation. I can also assume that you have examined a few headers from your server's responses and  determined that the &quot;Cache-Control&quot; and &quot;Expires&quot; fields are either not set or they are configured at such a low value to be ineffective. Lastly, you may have bypassed some header examinations and just determined that browser caching is  not happening  by tailing your Apache 2 log file and monitoring redundant requests. Either way, let's get to fixing Apache 2 to control browser caching that is right for you and your particular site.</p>
    <p>Here is a code snippet of an Apache 2 directive that we will be using. This directive can be modified to suite your tastes  or it can just be used &quot;as is&quot; for most users. The directives here can  be placed into the &lt;Directory&gt; directive of your virtual host in http.conf or it can be placed loosely in a .htaccess file in the root of your website.</p>

<macro:code lang="plaintext">
<IfModule mod_expires.c>
  ExpiresActive On
  ExpiresDefault "access plus 1 seconds"
  ExpiresByType text/html "access plus 1 seconds"
  ExpiresByType image/gif "access plus 120 minutes"
  ExpiresByType image/jpeg "access plus 120 minutes"
  ExpiresByType image/png "access plus 120 minutes"
  ExpiresByType text/css "access plus 60 minutes"
  ExpiresByType text/javascript "access plus 60 minutes"
  ExpiresByType application/x-javascript "access plus 60 minutes"
  ExpiresByType text/xml "access plus 60 minutes"
</IfModule>
</macro:code>

      
    <p>Let's examine what is happening here in brief. If you are interested <a href="http://httpd.apache.org/docs/2.0/mod/mod_expires.html" rel="external" class="external-link">full documentation of the expires directive</a> can be found on Apache's website along with different syntax formats than the ones used here. I like this format since it is inheritably legible. This directive will do the following:</p>
    <ul>
      <li>Set the default expiration of content in the browser cache to 1 second past the time of accessing that content. This is good for setting a catchall or default if you fail to explicitly define a content type in the following directives.</li>
      <li>Set the expiration of text/html pages to 1 second. My content management system Drupal does this already in its .htaccess file, but I include it here if you wish to change it. I think this is a good setting since technically most html pages are small and I like to err on the side of caution and always want my page content to be fresh. For instance, I may make changes to my global template and want it to be visible immediately.</li>
      <li>Set the expiration of standard images like GIFF, JPEG, and PNG to 2 hours.</li>
      <li>Set the expiration of CSS and JavaScript to 1 hour.</li>
      <li>Set the expiration of XML files such as RSS feeds to 1 hour. </li>
    </ul>
    <h2>References </h2>
		<p>If you are interested in knowing ALL about caching including proxy caching and <a href="/2006/2/16/a-review-of-digg-com-traffic-and-cdns">CDNs which I covered in my last post</a>, please read Mark Nottingham's article &quot;Caching Tutorial for Web Authors and Webmasters&quot;. Also included below are links to Apache's website manuals for each of the modules discussed here. </p>
		<ul>
		  <li><a href="http://www.mnot.net/cache_docs/" rel="external" class="external-link">Caching Tutorial for Web Authors and Webmasters</a></li>
	    <li><a href="http://httpd.apache.org/docs/2.0/mod/mod_expires.html" rel="external" class="external-link">Apache Module mod_expires</a></li>
		  <li><a href="http://httpd.apache.org/docs/2.0/mod/mod_headers.html" rel="external" class="external-link">Apache Module mod_headers</a></li>
		</ul>
		<p>&nbsp;</p>



filename: 2006-02-24-shell-script-to-delete-all-invisible-_-resource-files.html
         title: Shell Script To Delete All Invisible ._ Resource Files
    categories: ["Apple/OSX", "Home", "Workflow"]
     disqus_id: /2006/2/24/shell-script-to-delete-all-invisible-_-resource-files
          body: 


    <p><img src="/files/delete-res-files/network_drive.gif" alt="Network Drive" width="102" height="102" class="aleft" style="margin-top:5px;" />If you have ever accessed your website using a network protocol such as the Apple Filing Protocol (AFP), Samba (SMB), Web-based Distributed Authoring and Versioning (WebDAV), or Network File System (NFS) using your  Mac â€“ I am sure you have run into this problem before â€“ dreaded invisible resource fork files. These are the files that begin with a <code>._</code> and they are normally not seen from within the finder. My understanding is that these files are not even created  on your local Mac hard drive since the <a href="http://en.wikipedia.org/wiki/HFS+" rel="external" class="external-link">HFS+ file system</a> is smart enough to keep your data and resource forks together in one single file. But even if you are accessing your website from one Mac HFS+ volume to another Mac HFS+ volume, these files will still be created by programs like DreamWeaver and TextMate because the various protocols to access that remote share and/or the file systems themselves will need to split them to cope. So ultimately when ever you use these other types of file systems or network protocols, you will eventually be creating lost of invisible resource fork files. </p>
    
    
    <h2>Hey! ._ Files Are Not Really Bad</h2>
    
    <p>No they are not. By nature your Mac should deal with these just fine be it on you local drive or on a network volume. That said, I think it is important to point out what these invisible resource fork and other invisible files actually do. The most common one on any Mac is the <code>.DS_Store</code> file. This stores preferences on window settings. If you open a window, and choose icon view and then move them around, the <code>.DS_Store</code> file stores remembers all those settings. When you open that folder again, you see it the way it was left, thanks to that <code>.DS_Store</code> file. I have  never had a problem with these files on a remote volume. They can live :) </p>
    
    <p>The files that are prefixed with <code>._</code> are resource fork files that have a one to one match with another file that you can see. For example, let's say you have a file called <code>index.php</code> on your web server and you have made some changes to it with your editor such as <a href="http://macromates.com/" rel="external" class="external-link">TextMate</a>. Once you save that file, TextMate will create another file called <code>._index.php</code> on your web server. Why? Well Textmate, just like the Finder, likes to save your preferences. The most common is what line number your cursor was on. Great feature, I hate scrolling back to that  line I just edited. However convenient this is, I have had <code>._</code> files cause technical and visual problems on my web server. Most of the time these problems happen when a PHP application like <a href="http://drupal.org/" rel="external" class="external-link">Drupal</a> or <a href="http://www.pmachine.com/">Expression Engine</a> needs to scan directories for files to include or enable in its application. The reason these files can be detrimental to your web application can be numerous and if you are reading this article, you probably don't care, so let's just get rid of them. </p>
    
    
    <h2>The Killer Resource Script</h2>
    
    <p>This shell script consists of three commands. The first is the UNIX <code>find</code> command. It is told to look for all files in a directory that have a name which starts with ._ and then print them to your window. The second part of the command is called <code>xargs</code> and basically this takes each line form the first command and applies the  command immediately following it. In this case, remove, as indicated by the <code>rm</code> at the end. The <code>-t</code> after <code>xargs</code> is optional, it is useful if you are running this from your terminal since it echos the command to you before it is executed. The final shell script looks like this.</p>
		
<pre class="command">
#! /bin/bash
find /Volumes/Your_NetworkVolume -name '._*' -print | xargs -t rm
</pre>

    <p>To customize this script you will need to change &quot;<code>Your_NetworkVolume</code>&quot; where it appears above to the name of your web server share as it appears on your desktop. </p>
    
    <p>I find it useful to put this script in my AppleScript menu. If your apple script menu is not on menu bar at the top of your screen, you can turn it on using the &quot;AppleScript Utility&quot; program located in your (/Applications/AppleScript) directory. Just check the box labeled &quot;Show Script Menu in menu bar&quot; and unless you want a really long  list of extra pre installed example scripts by Apple, I suggest keeping &quot;Show Library scripts&quot; unchecked.</p>
    
    <p>Then using TextMate, create a file named something like this &quot;DELETE ._ Files-on-MySvr.sh&quot; and save it in your home (~/Library/Scripts) folder. While the file is still open in TextMate we need to make it executable by going to the menu (Automation Â» Run Command Â» Unix Shell Â» Make Script Executable). Once that is done you can close the script and you should see it appear in your scripts menu like this. </p>

<div class="iecenter">
<div class="photobounding" style="width:450px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/delete-res-files/applescript-menu.jpg" alt="AppleScript Menu" width="422" height="267" />
	</div>
</div>
</div>

    <p>This way, you can get in the habit of running this command when you are done working on the web server. Of course, you could setup this script on the web server itself and then execute it via the crontab every so often. It's really up to you.</p>
    
    <p>One last thing, in some cases you may have to delete invisible files on your web server that have spaces or special characters that might cause the script above to fail. Now why you would have files  on a web server that are non web friendsly is completely against my understanding, but if that is the case then you will have to use this modified version. It includes what I call a shielded version of the -print and xargs commands so they can understand how to escape or deal with the spaces and special characters. </p>

<pre class="command">
#! /bin/bash
find /Volumes/Your_NetworkVolume -name '._*' -print0 | xargs -t0 rm
</pre>

    <p>&nbsp;</p>
    <p>&nbsp;</p>



filename: 2006-03-02-if-microsoft-designed-the-ipod-packaging.html
         title: If Microsoft Designed The iPod Packaging
    categories: ["Home", "Lifestyle"]
     disqus_id: /2006/3/2/if-microsoft-designed-the-ipod-packaging
          body: 


<p>iPods are part of our digital lifestyles and I have owned one ever since they first came out! Actually, I had mine one day before they came out since I was able to convince my local Apple store to release my prepaid item before the market date. Since then, I never looked back to the CD as a precious piece of material associated with music. Right after getting home with my new iPod, I promptly encoded all 300+ of my CDs onto my <a href="http://en.wikipedia.org/wiki/Power_Mac_G4" rel="external" class="external-link">Quicksilver G4</a>, looted Amazon for images, and <a href="http://en.wikipedia.org/wiki/ID3_tag" rel="external" class="external-link">tagged</a> every album with image art. After that, all my CDs turned into gifts for  my friends and as I have upgraded from computer to computer, that 20 gigabytes of music just follows me around every where I go.</p><!--break-->

<p>Since I <a href="/colophon/ken-collins-resume">used to do package design</a>, I  found this little parity of Microsoft's attempt to correctly design the iPod packaging hilarious. Every time I watch it I think of all those years I've laughed at large agencies and their inability to think as cleanly as Apple has prooved both technology and the design of it's presentation can work. Enjoy, and <a href="http://youtube.com/watch?v=aeXAcwriid0&amp;search=microsoft ipod" rel="external" class="external-link">watch this video</a> please note, that I am not the author. </p>

<div class="iecenter">
  <div class="photobounding" style="width:478px">
    <div class="tl"></div>
    <div class="tr"></div>
    <div class="bl"></div>
    <div class="br"></div>
    <div class="photoborder"></div>
    <div class="phototime"><a href="http://youtube.com/watch?v=aeXAcwriid0&amp;search=microsoft ipod" rel="external"><img src="/files/ms-ipod-redesign.jpg" alt="If Microsoft designed the iPod packaging." width="450" height="347" /></a> </div>
  </div>
</div>

<p>&nbsp;</p>
<p>&nbsp;</p>



filename: 2006-03-05-learn-to-program-in-ruby-and-basic-sql.html
         title: Learn To Program in Ruby and Basic SQL
    categories: ["Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2006/3/5/learn-to-program-in-ruby-and-basic-sql
          body: 


<p><img src="/files/learn_ruby-sql/ruby-sql_books2.gif" alt="Learn To Program Ruby and SQL" width="204" height="182" class="aleft" />I've been learning to or &quot;trying to learn&quot; <a href="http://www.rubyonrails.org/" rel="external" class="external-link">Ruby on Rails</a> for a few months now and things have always kept me from finishing the book that I purchased from those great publishers at the <a href="http://www.pragmaticprogrammer.com/" rel="external" class="external-link">pragmatic bookshelf.</a> My problem has been that sometimes other work has gotten in the way, but mostly it was because I did not have the core understanding of the basics for building web applications. Especially in the areas of object oriented programming and database languages. For me this was a big problem, I'm typically a fundamentalist when it comes to learning and applying knowledge. Knowing the details helps me understand the big picture and more importantly the confidence to know what I am doing is correct. So rather than learning super high level code, I decided to revisit the 3-foot section of the pool again by reading these two books.</p>


<h2><em>Teach Yourself SQL in 10 Minutes</em> by Ben Forta </h2>

<p>Just so you know, you are not going to  learn SQL in 10 minutes! This book is chopped up into &quot;10 minute&quot; exercises that take you into the language step by step. If you are new to databases, this book is great because it teaches you the core SQL syntax that most <a href="http://en.wikipedia.org/wiki/Dbms" rel="external" class="external-link">database management systems</a> use to extract and input data into the database itself. It even covers idioms that are unique for each database language including SQL Server, PostgreSQL, MySQL, and Oracle. </p>

<p>By the time I picked up <a href="http://www.amazon.com/gp/product/0672325675/sr=8-1/qid=1141569613/ref=sr_1_1/103-7179153-7483038?_encoding=UTF8" rel="external" class="external-link"><em>Teach Yourself SQL in 10 Minutes</em></a>, I had already learned to tread water in a huge Microsoft SQL Server database that I work in every day. So hacking stored procedures and building some basic queries were in my capabilities, but after reading Ben's book, I was able to do a lot more. It really pays off to know the basics and I'll let you in on a little secret. If you really want to work with databases and plan on sticking with it, I suggest using   <a href="http://www.dbsuite.com/mosg5/?action=product&actionid=sql4xmanagerj" rel="external" class="external-link">SQL 4X Manager J 3</a> by InterServices New Media. It will allow you to be database agnostic and its features are so rich that it will continue to be a valuable tool long after you have mastered SQL. This application is written in pure JAVA and it uses ODBC connections to support every database I have come across. I simple love its console support, the ability to edit and run stored procedures, create views, and generate entity relationship models. Trust me, it's worth the price!</p>

<div class="iecenter noa">
<a href="http://www.dbsuite.com/mosg5/?action=product&actionid=sql4xmanagerj" rel="external"><img src="/files/learn_ruby-sql/th_sql4xjmaininterface.gif" alt="Main Interface for SQL 4X Manager J 3" width="528" height="308" /></a>
</div>


<h2><em>Learn to Program</em> by Chris Pine</h2>

<p>If you are new to programming, this is a <a href="http://www.pragmaticprogrammer.com/titles/fr_ltp/" rel="external" class="external-link">great book</a> to pick up first. It is a modest 150 pages long and baby steps you into the concepts shared by most languages, using my favorite language, Ruby. That's right, I buy into that hype around this language because to me Ruby is like Apple Computer, its different! Here is an quote from its creator, Yukihiro Matsumoto, in the de facto Ruby resource guide,  the <a href="http://www.pragmaticprogrammer.com/titles/ruby/index.html" rel="external" class="external-link"><em>Pragmatic Programmers' Guide to Programming Ruby</em></a>.</p>

<blockquote><div>I believe that the purpose of life is, at least in part, to be happy. Based on this belief, Ruby is designed to make programming not only easy but also fun. It allows you to concentrate on the creative side of programming, with less stress.</div></blockquote>

<p>So if you believe that JAVA is better thank Ruby or maybe PHP or any other language, please do not start to flame me. I think each language has its place. You can have yours and I'll have mine. I for one have always valued the underdog more. That said, <em><a href="http://www.pragmaticprogrammer.com/titles/fr_ltp/" rel="external" class="external-link">Learn to Program</a></em> by Chris Pine is the place to start.</p>

<p>Like most other programming books, this one is rich in examples and test scripts. The thing that I thought most unique about it was that it forced you to utilize the concepts you learned by asking you to write a program that did X, Y, and Z. It did this without giving you the answers which really forces you out of the academia of learning into real practice. So if you <a href="http://www.pragmaticprogrammer.com/titles/fr_ltp/" rel="external" class="external-link">pick up this book</a>, or if decide to use <a href="http://pine.fm/LearnToProgram/?Chapter=00" rel="external" class="external-link">the free tutorials</a> on Chris' website, check back here often and I'll keep posting updates on what code I came up with. Perhaps others can share how the faced the challenges since I could not find once single resource on the web that did this. Here are a few to start this off.</p>

<h3>A Few Things To Try (bottles of beer program)</h3>
<macro:code lang="ruby">
bottles = 99

while bottles.to_i != 0
  puts bottles.to_s + ' bottles of beer on the wall. ' + 
    bottles.to_s + ' bottles of beer!'
  bottles = bottles.to_i-1
  puts 'You take one down and pass it around... you have ' + 
    bottles.to_s + ' bottles of beer on the wall.'
  puts ''
end
</macro:code>

<h3>A Few Things To Try (roman numeral method)</h3>
<macro:code lang="ruby">
def romanize integer
  mdiv = integer/1000
  m = 'M'*mdiv
  d = 'D'*(integer%1000/500)
  c = 'C'*(integer%500/100)
  l = 'L'*(integer%100/50)
  x = 'X'*(integer%50/10)
  v = 'V'*(integer%10/5)
  i = 'I'*(integer%5/1)
  m+d+c+l+x+v+i
end

puts romanize(420)
puts romanize(9)
puts romanize(1)
puts romanize(278)
puts romanize(2156)
</macro:code>

<h3>A Few Things To Try (how old are you, spank)</h3>
<macro:code lang="ruby">
puts 'What year were you born in? (number please)'
year = gets.chomp.to_i
puts 'What month were you born on? (number please)'
month = gets.chomp.to_i
puts 'What day were you born on? (number please)'
day = gets.chomp.to_i

bday        = Time.mktime(year.to_i, month.to_i, day.to_i)
time        = Time.new
diftime     = time - bday
diftoyears  = (diftime/60/60/24/365).to_i/1

puts 
diftoyears.times do
  puts 'SPANK!'
end
</macro:code>
	

<p>&nbsp;</p>
<p>&nbsp;</p>



filename: 2006-03-19-getting-on-good-terms-with-the-os-x-shell.html
         title: Getting On Good Terms With The OS X Shell
    categories: ["Heuristics", "Home", "Workflow"]
     disqus_id: /2006/3/19/getting-on-good-terms-with-the-os-x-shell
          body: 


    <p><img src="/files/goodterms/iTerm.png" alt="iTerm Logo" width="135" height="116" class="aleft" />
    I will be the first to admit that I am really just learning how to tap into the power of my shell environment and to be honest, I've spent way to many hours  reading man pages and figuring out how to do some really neat things that help my automate my workflow and system administration. Mostly these are just basic tasks like my <a href="/2005/12/19/how-to-setup-a-simple-mysql-backup-script">Simple MySQL Backup</a> and <a href="/2006/2/24/shell-script-to-delete-all-invisible-_-resource-files">Deleting Invisible Resource Files</a> scripts. But in all seriousness, when you get right down to using a UNIX-based operating system, you cannot escape using the shell environment. This is a good thing, its your friend, and getting your feet wet sooner than later is a good idea. </p>
		
    <h2>Getting A Better Terminal Application</h2>
		
    <p>Go <a href="http://iterm.sourceforge.net/index.shtml" class="external-link" rel="external">download iTerm</a> from the sourceforge project page and install it. That default Terminal.app that comes with the Mac has got to go, it is dreadful looking and the features are really slack. Fortunately iTerm is a native Cocoa app that supports both the PowerPC and the new Intel Macs. The best feature of iTerm is that it supports tabbed windows, because you can never have to many terminal windows open. Here are some preferences I recommend after installing iTerm.</p>
    <ul>
      <li>Tab Position Top</li>
      <li>Selection copies text to clipboard &amp; Focus follows mouse  </li>
      <li>The &quot;Foreground&quot; and ANSI Colors pictured below, most are defaults.</li>
      <li>A dark background image with little detail so as not to interfere with your foreground text. </li>
      <li>In there &quot;Terminal&quot; tab of the profiles, set the &quot;Type&quot; to &quot;xterm-color&quot;. </li>
    </ul>
    <div class="iecenter noa">
<img src="/files/goodterms/iterm_prefs-all.gif" alt="iTerm Profile Preferences" width="517" height="392" /></div>
<br />


		<h2>Customizing Your Bash Profile </h2>
    <p>After you have a nice terminal program, its time to tweak your environment a bit. Here is a great set of customization commands that will change the way your shell interface is displayed when using the bash terminal, this is the standard shell environment on newer versions of OS X. Using these environment enhancements you will get a solid visual on the following information which is also colored coded to appear well on a dark background </p>
    <ul>
      <li>The current user you are logged in as (green) for you (red) for root/others. </li>
      <li>The current machine name and working directory. </li>
      <li>A new entry line which is not obscured by the items up above.</li>
    </ul>

<macro:code type="plaintext">
# User colors (root colors in /etc/bashrc)
export TERM="xterm-color"
C1="\[\033[1;32m\]"
C2="\[\033[1;30m\]"
C3="\[\033[0m\]"
C4="\[\033[0;36m\]"
export PS1="${C2}(${C1}\u${C2}@${C4}\h${C2}) - (${C4}\A${C2}) - (${C4}\w${C2})\n${C2}-${C1}=>>${C3}"
</macro:code>

<code type="sh">
# Root colors (user colors in ~/.bash_profile)
export TERM="xterm-color"
C1="\[\033[0;31m\]"
C2="\[\033[1;30m\]"
C3="\[\033[0m\]"
C4="\[\033[0;36m\]"
export PS1="${C2}(${C1}\u${C2}@${C4}\h${C2}) - (${C4}\A${C2}) - (${C4}\w${C2})\n${C2}-${C1}=>>${C3}"
</code>

<p>Here  is how to install these, they go into two separate places. The first customization commands go into your user home directory in a file called <code>.bash_profile</code> and if you have never modified or used this file, you will have to make a new one. The period that precedes the name is technically not allowed by most text editors since it makes the file invisible. I suggested using <a href="/blog/heuristics/conventions/textmate-by-programmers-for-efficiency-experts">TextMate</a> to create or modify this and the file below. Remember, the first file <code>.bash_profile</code> needs to go into your home directory. The more you use your terminal, the more you will start to modify this file. It too is your friend.</p>

<p>The second set of customization commands go into the root <code>bashrc</code> file. Again, using <a href="/blog/heuristics/conventions/textmate-by-programmers-for-efficiency-experts">TextMate</a>, you can find this file in the /etc directory. If you are new to using TextMate to get to files in invisible directories, do this. When you have the &quot;Open...&quot; dialog window in view in TextMate, hold down <code>Command-Shift+G</code>. This will open a sub dialog window called &quot;Go to the folder:&quot; with a text field to type the directory structure into. Simply enter <code>/etc</code> and hit the &quot;Go&quot; button. This will take you right to the /etc directory and in there you should see the <code>bashrc</code> file. Open it add the lines from the second code sample box above and save it. From this point onward your terminal window in iTerm should look something like this.</p>

<br />
<div class="iecenter">
<img src="/files/goodterms/my-iterm.gif" alt="My iTerm Window" width="523" height="415" />
</div>

<p>I never setup a server without putting these customization settings in place. It just makes me feel more at home on the command line. In some later articles, I'll start to cover some really sweet shell scripts for more workflow automation. Let me know if you like this or if you have any problems setting them up on your system. </p>



filename: 2006-05-19-pragmatic-studio-alumni-member.html
         title: Pragmatic Studio Alumni Member
    categories: ["Home", "Ruby/Rails"]
     disqus_id: /2006/5/19/pragmatic-studio-alumni-member
          body: 


<br />
<img src="/files/alumni_stamp.png" alt="The Pragmatic Studio Alumni Member" style="float:left" />

<p>Well, I just got back this past weekend from the <a href="http://pragmaticstudio.com/index.html" rel="external" class="external-link">Pragmatic Studio</a> in <a href="http://www.flickr.com/photos/tags/railsstudioboston/" rel="external" class="external-link">Boston</a> and it was well worth the time and <a href="http://www.cnn.com/2006/WEATHER/05/17/new.england.flooding.ap/" rel="external" class="external-link">effort</a>. If you have not yet used the RoR framework for web applications, stay tuned to my next post. By next week I will lay out an extensive tutorial on how to install the framework with all the proper goodies on your Mac. So do not wimp out and go for that <a href="http://locomotive.sourceforge.net/" rel="external" class="external-link">easy package</a> install and dare to impress your friends as we build our own software installs with Darwin Ports.</p>

<p>Remember, if you are new to RoR, I highly advise that you take the time to browse over to the <a href="http://pragmaticprogrammer.com/bookshelf/index.html" rel="external" class="external-link">Pragmatic Bookshelf</a> and buy yourself some PDF books. I suggest starting with Chris Pine's <em>How To Program</em> and then moving on to the 2nd edition of <em>Agile Web Development with RAILs</em> mixed with brief dives into the Ruby language with the famous Pickaxe book.</p>





filename: 2006-05-29-my-own-soup-to-nuts-recipe-for-ruby-on-rails-on-os-x.html
         title: My Own Soup to Nuts Recipe for Ruby on Rails on OS X
    categories: ["Apple/OSX", "Database", "Home", "Ruby/Rails"]
     disqus_id: /2006/5/29/my-own-soup-to-nuts-recipe-for-ruby-on-rails-on-os-x
          body: 


    <p><a href="http://www.catb.org/jargon/html/T/TMTOWTDI.html" rel="external" class="external-link">Tim Toady</a> tells us that (There Is More Than One Way To Do It) and I am sure this is not the first and not likely the last blog post you will ever see that tells you the best way to install RAILS on OS X. Some people would just rather than go the <a href="http://locomotive.raaum.org/" rel="external" class="external-link">simple path</a> but I implore you, do it this way. Gaining the experience of compiling your own software will help you down the road when it comes time for doing more advanced things, especially deploying your RAILS app. When you are done, you will have a rock solid deployment environment for RAILS that will include:</p>
    <ul>
      <li>Ruby  and RAILS </li>
      <li>MySQL Community Edition</li>
      <li>FastCGI &amp; LightPPD</li>
    </ul>
    <h2>Step 1 - Install Apple Developer Tools    </h2>
		
    <p>The Apple Developer Tools are needed to install Darwin Ports which opens up the door for a bunch of other goodies we will need.</p>
    
    <ul>
      <li>Go to <a href="http://connect.apple.com" rel="external" class="external-link">Apple's Developer Connection</a> site.</li>
      <li>Click on &quot;Join Now&quot;, create an account and log into the site.</li>
      <li>Go to the &quot;Downloads&quot; section.</li>
      <li>In the right box, click on &quot;Developer Tools&quot;</li>
      <li>Scroll  to the &quot;Xcode Tools 2.3&quot; section and download the large disk image.</li>
    </ul>
    
    <p>This is obviously going to take awhile, if you want to skip ahead and start on some of the following steps, by all means do so. Once you are done downloading the Xcode Tools and have the disk image mounted, install the package named &quot;XcodeTools.mpkg&quot;. You do not have to worry about the others, especially the WebObjects package :)</p>
    
		<p>Once you are finished with the install of the Developer Tools, you will have a new folder at the root of your hard drive called &quot;Developer&quot;, pictured below on an OS X Server install. For the most part you can largely ignore this new folder.</p>
	  
		<div class="iecenter noa">
		<img src="/files/ror-on-osx/machd_with-developer-tools.gif" alt="XCode Developer Tools Folder" width="444" height="305" />
		</div>
		
		
    <h2>Step 2 - Install MySQL &amp; Setup Your First DB    </h2>
    <p>The Ruby on Rails framework comes by default with the MySQL adapters for ActiveRecord to talk to MySQL servers. I highly recommend you start development with MySQL, its a good database and if you have not read the <a href="http://developer.apple.com/business/macmarket/mysql.html" rel="external" class="external-link">recent news regarding MySQL AB and Apple working more closely</a> then I will tell you now that it seems like good time to revisit MySQL as your primary database choice. If you believe the press, MySQL AB seems more committed than ever to deploy its development tools to the Mac platform. Many would say that these are not really needed when you use RoR's database migrations and a nice white board.</p>
    <p>I have previously used their <a href="http://www.mysql.com/products/tools/administrator/" rel="external" class="external-link">Administrator</a> and <a href="http://www.mysql.com/products/tools/query-browser/" rel="external" class="external-link">Query Browser</a> only to find them full of bugs and crashing often. I'm now happy to say that most of these bugs have disappeared and I can now use these applications with the current versions of MySQL Community Edition without much ado. I was very happy to hear that MySQL AB has a new tool in the line up (currently in beta) called <a href="http://dev.mysql.com/downloads/workbench/1.0.html" rel="external" class="external-link">Workbench</a>. This is their first Entity Relationship Modeling application that brings in many of the features available for editing tables from their Administrator application with the GUI development of ER diagramming. ER tools have been very sparse on the Mac and I am very happy to see this one coming. Either way, do your self a favor and download those three tools, at the least, we will need the Administrator tool to setup some database accounts on your new MySQL installation. You may also find Query Browser helpful if you find yourself debugging ActiveRecord methods. Here is our install and setup process.</p>
    <ul>
      <li>Go to the <a href="http://dev.mysql.com/downloads/mysql/5.0.html" rel="external" class="external-link">MySQL 5 Community Edition download page</a>. </li>
      <li>Scroll down to the section title &quot;Mac OS X downloads&quot; and pick the &quot;Max&quot; package that best matches your system.</li>
      <li>Once downloaded, install the MySQL package, the StartupItem package, and the PreferencesPane. The PreferencePane is just a simple switch to turn MySQL on and off.</li>
      <li>Download and install the <a href="http://www.mysql.com/products/tools/administrator/" rel="external" class="external-link">MySQL Administrator</a>.</li>
      <li>Download and install the <a href="http://www.mysql.com/products/tools/query-browser/" rel="external" class="external-link">Query Browser</a>. (optional) </li>
    </ul>
    <p>That's it, MySQL is installed and ready once you restart your system. If you are still downloading the Xcode Tools, you will have to wait to do the following steps which will secure your MySQL installation.</p>
    <p>So after a fresh restart from installing MySQL, let's secure your installation by assigning some passwords. To do this launch the MySQL Administrator and log into your MySQL server using the server hostname of <code>localhost</code> and the username of <code>root</code>. You do not need a password, it is blank for root@localhost by default, this is what we are going to fix. It is not a big security bug as long as you are the only one on your machine, it is just a good idea to secure this account. </p>
    
    <div class="iecenter noa"> <img src="/files/ror-on-osx/mysql-administrator-login.gif" alt="MySQL Administrator Login Screen" width="342" height="243" /></div>
    
    <p>Click on &quot;Accounts&quot; at the top and delete the account that has no name. You optionally may want to set a password for the root at localhost. From this point on you can optionally create an account specific to any databases you may be using for developing. When creating a user, you have to create a host (typically localhost) at the same time by using that + host icon to the right of the new user icon in the bottom right. Click on &quot;Catalogs&quot; to create a database and then come back to &quot;Accounts&quot;, expand the arrow beside the user you want to have access to this new database, select the host for that user, click on &quot;Schema Privileges&quot;, click on the name of the newly created database schema and then assign the privileges from the available list to the assigned list. Typically I grant all privileges in development environments. </p>
    <p>In the next step, installing DarwinPorts, we are going to cover some $PATH additions that will let our system know where it can find MySQL.</p>
    <div class="iecenter noa"><img src="/files/ror-on-osx/mysql-administrator-accounts.gif" alt="MySQL Administrator Accounts Screen" width="549" height="449" /><br />
    </div>
    <h2>Step 3 - Install DarwinPorts &amp; All Needed Packages    </h2>
    <p><img src="/files/ror-on-osx/darwin-ports.png" alt="Darwin Ports Logo" width="128" height="128" class="aleft" /><a href="http://www.darwinports.com/" rel="external" class="external-link">DarwinPorts</a> is your key to a TON of open source software for your Mac. This can include PHP, Ruby, Apache, and Subversion to smaller utilities like, wget, furl, and pine... the list goes on to over 2,000 ports currently available. It is generally accepted that Mac OS X and Darwin Ports is a good thing, but <a href="http://objectiveministries.org/creation/propaganda.html" rel="external" class="external-link">some disagree</a>. Meanwhile, using DP for all of your open source software can help you keep installed packages in one easy to understand place, by default in the <code>/opt</code> directory at the root of your drive. This can save you lots of headaches from the dreaded <a href="http://en.wikipedia.org/wiki/Dependency_hell" rel="external" class="external-link">dependency hell</a> that has plagued most of us whom have not used a good package management system. That is not to say that dependencies will never happen, but when the do, knowing where DP places things can help you resolve them quickly. Let's get to installing our new package management system.</p>
    <ul>
      <li><a href="http://www.darwinports.com/" rel="external" class="external-link">Download DarwinPorts installer</a> from their site.</li>
      <li>Install the package.</li>
    </ul>
    <p>That's about it, DarwinPorts is installed and ready to use. I do however like to clean things up a little bit. If you have followed my previous article <a href="/2006/3/19/getting-on-good-terms-with-the-os-x-shell">Getting on good terms with the OS X shell</a> then you already know how to customize your <code>.bash_profile</code>, so lets fire up TextMate and do just that right now. Although DP does install a <code>.profile</code> file that will customized your <code>$PATH</code> environments, I think it's a good idea that you put this back in your control. If your new to this path stuff, they are basically just a list of directories that lets your computer know where software is installed. Keeping it that simple lets just put these lines anywhere in your <code>.bash_profile</code>. </p>
		
<pre>
# My PATH Environment Variables
export PATH="/opt/local/bin:/opt/local/sbin:/usr/local/mysql/bin:$PATH"
export MANPATH="/opt/local/share/man:$MANPATH"
export INFOPATH="/opt/local/share/info:$INFOPATH"
</pre>

    <p>You can see by the example we are simply adding other path options before your systems default, denoted by the <code>$PATH</code>. Using colons is how you separate the list and this is how we have added the MySQL installation into your system's path environment and if you ever need more, make sure to separate them too by colons and typically try to keep your default <code>$PATH</code> at the end. One last note, that <code>/opt/local/sbin</code> is in the code box above so that LightTTPD will be available to RAILS after we get it installed, more info below.</p>
    
    <p>Now let's start using DarwinPorts, if you want to take a small course on the generals about how to use DP, I suggest taking a look at <a href="http://wiki.opendarwin.org/index.php/DarwinPorts:Getting_Started" rel="external" class="external-link">Joe Auty's Getting Started with DarwinPorts</a>, otherwise, just follow along. Remember that building and installing software from scratch is a CPU intensive task for your computer. It is not unusual for an install to take anywhere from 15 to 30 minutes and maybe longer, so be patient.</p>
    <p>Fire up a terminal app and use this command, it will bring our fresh DP install up to date. If you had your terminal open before you added your path variables, remember to close it and open a new one so that the changes will take affect. All remaining installs will be issued in the Terminal window. </p>
		
    <pre class="command">sudo port -d selfupdate</pre>
		
    <p>Now let's install the latest release of Ruby and its dependencies. This will take awhile!</p>
		
    <pre class="command">sudo port install ruby</pre>
		
    <p>Now install the Ruby Gems package management system.</p>
		
    <pre class="command">sudo port install rb-rubygems</pre>
		
    <p>Now the FastCGI Development Kit and the Ruby interface to FastCGI. These will be needed when deploying your application into a production mode (or development when using <code>./script/server</code>) using LightTPD also known as Lighty.</p>
    
<pre class="command">
sudo port install fcgi
sudo port install rb-fcgi
</pre>

		<p>Here we will now go ahead and install Lighttpd and its dependencies. The LightTPD executable is located in <code>/opt/local/sbin</code> and this is why we placed it in our path environment. For future reference the default config file for LightTPD is in <code>/opt/local/etc/lighttpd</code>. You may want to make friends with that file when you start thinking about deployment. The RAILS team makes it easy when you use <code>./script/server</code> by loading in a RAILs specific LightTPD config file, so you do not have to think about this in the default development mode </p>

<pre class="command">
sudo port install pcre
sudo port install lighttpd
</pre>
    
    
    <h2>Step 4 - Final Installs 
      <br />
      (RAILs and MySQL Bindings) 
    Using Ruby Gems</h2>

    <p><img src="/files/ror-on-osx/rails.png" alt="Ruby on RAILS" width="87" height="112" class="aleft" style="margin-right:10px;" />Now to the fun part we have installed Ruby and Ruby Gems using Darwin Ports in our previous step. Now we get to install RAILS with a two part command, the first one liner will install RAILS with all the dependencies using Ruby Gems. The second command, again using Ruby Gems, we will install the latest MySQL bindings. This should speed things up a bit, you <a href="http://weblog.rubyonrails.com/articles/2005/10/30/get-10-15-more-performance-with-mysql-rails" rel="external" class="external-link">can read more about this here</a> along with the performance gains it offers. Please note that when you run this second command, you will likely get a prompt for which platform you would like to install on. I selected option 3 which was mysql 2.7 (ruby).</p>
		
<pre class="command">
sudo gem install rails --include-dependencies
sudo gem install mysql -- --with-mysql-dir=/usr/local/mysql
</pre>
		
    <p>Just like DarwinPorts, Ruby Gems is a package management system. If you get some time or if you find yourself in a pinch, I find that the <a href="http://docs.rubygems.org/read/book/2" rel="external" class="external-link">command reference here</a> offers a lot of insight and help into how to use Ruby Gems.</p>
    <p>&nbsp;</p>




filename: 2006-06-06-back-in-black.html
         title: Back in Black
    categories: ["Apple/OSX", "Home", "Lifestyle"]
     disqus_id: /2006/6/6/back-in-black
          body: 


<p>I have not been a black Mac owner since I got rid of my <a href="http://en.wikipedia.org/wiki/Powerbook#PowerBook_G3" class="external-link" rel="external">Lombard</a> (aka the Bronze Keyboard) way back in 2001. Before that, I was the proud owner of a <a href="http://en.wikipedia.org/wiki/PowerBook_3400" class="external-link" rel="external">3400c</a> which was also black and one of the first PowerPC laptops offered from Apple. That PowerBook cost me close to $4,000 if memory serves and I swear some of the debt is still hanging around today! So after being with Apple for so long I have very glad that good Mac hardware has gotten cheaper over the past 4 years and to see the return of a the darker colored books. Its about time too and the price is just right. </p>
    
	<div class="iecenter">
		<img src="/files/macbook/macbook-front.gif" alt="Black MacBook Front" width="500" height="294" />	</div>
	
    <p>So this past Sunday I drove from Portsmouth all the way to the <a href="http://www.apple.com/retail/shortpump/week/20060604.html" class="external-link" rel="external">Apple Store at Short Pump in Richmond</a> and purchased myself a brand new MacBook, the black one of course. The 12&quot; G4 I have been working on lately was showing its age. Start ups were really slow, database queries on local MySQL development kept grinding to a halt and I'm pretty sure that power management unit was next to go. </p>
    <p>Now that it is two days later and I have spent the past two days reinstalling RAILS using my own <a href="/2006/5/29/my-own-soup-to-nuts-recipe-for-ruby-on-rails-on-os-x">soup to nuts</a> recipe and putting back every piece of software on this new machine, I thought I would share a few of my experiences to those considering the upgrade to an Intel Mac and perhaps their own MacBook. </p>
    <h2>Migration</h2>
    <p>Do not use the migration assistant. I repeat, DO NOT USE THE MIGRATION ASSISTANT. I can not tell you why but doing such will kill the speed of your new Mac. When I did this and even after I waited for the spotlight index to rebuild itself, the computer was still way slower than it should have been. I don't blame Apple for this, it would probably be impossible for the to weed out every prefs and configuration file that might conflict and I have always been a huge advocate of doing it the manual way for any drastic hardware change, but I was curious. If anyone has any insight on why the Migration Assistant would botch so bad, I would love to hear it.</p>
    <h2>More RAM</h2>
    <p>Simply but, do it! There is no way to run your new Mac on only 512MB. It should be enough but, shortly after the system boots, it slows down real fast because the first few apps that need Rosetta will likely kill all the remaining RAM you have left. I highly suggest maxing the MacBook to 2 Gigabytes by ordering from <a href="http://www.thechipmerchant.com/go.asp?cc=MACBOOKPROMEM&amp;agent=" class="external-link" rel="external">TheChipMerchant.com</a> which sell these for only $96 a stick and they have a lifetime warranty.</p>
    <p>The MacBook's memory slots are <a href="http://www.ifixit.com/Guide/86.3.2.html" class="external-link" rel="external">easily accessible</a>, but pulling those leavers scared the hell out of me. I swear I thought they were going to break.</p>
    <h2>The Screen</h2>
    <p>I cannot say anything bad about it. I love it! The size of the MacBook screen is perfect for me. I need a small computer for portability and this 13&quot; wide screen is the perfect blend between compact and working real estate. This screen has to be the brightest I've seen and in no way does the glossy cover bother me at all. </p>
    <p>&nbsp; </p>



filename: 2006-06-13-quake-style-terminal-window-on-os-x.html
         title: Quake Style Terminal Window on OS X
    categories: ["Apple/OSX", "Heuristics", "Home", "Workflow"]
     disqus_id: /2006/6/13/quake-style-terminal-window-on-os-x
          body: 


<br />

 <div class="iecenter">
   <img src="/files/visor/visor_screenshot.jpg" alt="Visor Screenshot" width="550" height="413" />
 </div>

 <p>Well this is far beyond cool but highly functional, a Quake like terminal implementation of Terminal.app that is a HotKey away from within any application. A friend turned me on to this after it showed up on the <a class="external-link" rel="external" href="http://arstechnica.com/journals/apple.ars/2006/6/12/4291">Monday morning Apple links</a> post from arstechnica.com. Although I have never thought of this idea, it seems to have been a popular request for quite some time and after a <a class="external-link" rel="external" href="http://episteme.arstechnica.com/eve/forums/a/tpc/f/8300945231/m/332004739731">public request</a>, the author of <a class="external-link" rel="external" href="http://quicksilver.blacktree.com/">QuickSilver</a> stepped up to the challenge and coded this little goodie using the application enhancer method called <a class="external-link" rel="external" href="http://www.culater.net/software/SIMBL/SIMBL.php">SIMBL</a> which was created by Mike Solomon, the creator of the PithHelmet plugin for Safari. </p>
 <p>So if you are itching to try this out here is what you do.</p>
 <ul>
   <li><a class="external-link" rel="external" href="http://www.culater.net/dl/files/SIMBL-0.8.1.tbz">Download and Install SIMBL</a> </li>
   <li><a class="external-link" rel="external" href="http://download.blacktree.com/Visor.zip">Download Visor</a> and place it in the <code>/Library/Application Support/SIMBL/Plugins</code> folder.</li>
   <li>Logout and back into your account (maybe restart) </li>
   <li>Launch Terminal.app (close it if you want, also see my AppleScript below)  </li>
   <li>Set your Visor HotKey preferences in the new menu. </li>
 </ul>
 <p>Now, when you launch any other program and hit your HotKey (mine is Command ~) a terminal application will slide down from the top of your screen just like in Quake. The only down side is that if you are used to your iTerm display, you will have to set the preferences of Terminal.app to mimic that. I set mine with a black background, ProFont 10px, and 80% visibility.</p>
 <p>Lastly, since you do have to have the Terminal application running for this to work and I was too lazy to open this al the time, I simple created a small AppleScript which can be compiled into an application and placed into your Login Item in the System Preferences. Here is a screenshot of the code. Notice that it tells window 2 to close. This is because once you have SIMBL and Visor installed, an invisible window opens for Terminal that you cannot see. So the window that you can see (window 2) is closed by AppleScript.</p>

 <div class="iecenter">
   <br />
   <img src="/files/visor/termina_applescript.gif" alt="Visor AppleScript" width="370" height="363" /> 
</div>

 <p>&nbsp;</p>




filename: 2006-06-30-flying-light-configuring-drupal-and-lighttpd.html
         title: Flying Light - Configuring Drupal and LightTPD
    categories: ["Home", "Miscellaneous"]
     disqus_id: /2006/6/30/flying-light-configuring-drupal-and-lighttpd
          body: 


 <div class="iecenter"><img src="/files/lighttpd/light_logo.png" alt="LightTPD Logo" width="249" height="239" /></div>

<p>So the WebSvr mini here at my <a href="/colophon/#digitalkitchen">home-based NOC</a> (named ActionMoniker.com) is now running LightTPD as the web server. The benefits are that I can now run  my PHP-based Drupal  blog in FastCGI mode while also allowing virtual hosting under the same server/IP for my RAILS projects. The end result has turned out quite well and I am actually loving the speed improvements and the <a href="http://lighttpd.net/documentation/" class="external-link" rel="external">simple configuration</a> for LightTPD, which has a more natural feeling for me when it comes to configuring a web server. </p>

<p>Below is a code snippet of my current configuration file for this Drupal host.  Please be aware, that this is not a full LightTPD configuration file which would likely have further restrictions on how your web server operates and secures itself. That said, this snippet incorporates the following configurations which are mostly necessaries for any Drupal blog using the Drupal supplied .htaccess file for Apache.</p>

<ul>
<li>A vhost default so that both the www and the root domain point to the same directory.</li>
<li>URL access rules that deny access  to common Drupal install and app files.</li>
<li>URL rewrite rules for my <a href="http://haveamint.com/" class="external-link" rel="external">mint statistics,</a> multi site setup in a <code>/meta-theme-for-drupal</code> directory which, and the standard drupal rewrites for clean ULRs and a few system functions. It is important that these rewrites be in the correct order with the root drupal install being last.</li>
<li>URL expires directives that help browser caching for all page assets that are core Drupal and found in the Meta Theme. </li>
<li>A compress cache directory, server error log, and access log using the web server root variable set at the tops of the vhost config. I like that LightTPD can set variables.      </li>
<li>Finally a LightTPD declaration for spawning FastCGI process for PHP.</li>
</ul>

<macro:code lang="c">
simple-vhost.server-root      = "/Library/WebServer/hosts/"
simple-vhost.default-host     = "default"

$HTTP["host"] =~ "^(metaskills.net)|(www.metaskills.net)$" {
  simple-vhost.default-host     = "metaskills.net"
  url.access-deny = ( 
    ".engine", ".inc", ".install", ".module", ".sh", ".sql", ".pgsql", 
    ".theme", ".tpl.php", ".xtmpl", ".code-style.pl", ".Repository", ".Root"
    )
 url.rewrite-once = (
   # hard-coded rewrites so the drupal catch-alls do not get them.
   "^/mint/$" => "/mint/index.php",
   "^/mint/\?(.*)" => "/mint/index.php?$1",
   # drupal rules for (meta-theme-for-durpal) multi-site, these MUST BE FIRST.
   "^/meta-theme-for-drupal/system/test/(.*)$"  => "/meta-theme-for-drupal/index.php?q=system/test/$1",
   "^/meta-theme-for-drupal/search/node/(.*)$"  => "/meta-theme-for-drupal/index.php?q=search/node/$1",
   "^/meta-theme-for-drupal/([^.?]*)\?(.*)$"    => "/meta-theme-for-drupal/index.php?q=$1&$2",
   "^/meta-theme-for-drupal/([^.?]*)$"          => "/meta-theme-for-drupal/index.php?q=$1",
   "^/meta-theme-for-drupal$"                   => "/meta-theme-for-drupal/index.php",
   # drupal rules for default site behavior.
   "^/system/test/(.*)$"        => "/index.php?q=system/test/$1",
   "^/search/node/(.*)$"        => "/index.php?q=search/node/$1",
   "^/([^.?]*)\?(.*)$"          => "/index.php?q=$1&$2",
   "^/([^.?]*)$"                => "/index.php?q=$1"
   )
  expire.url = ( 
    "/favicon.ico"              => "access 3 days", 
    "/files/"                   => "access 3 days", 
    "/misc/"                    => "access 3 days",
    "/themes/meta/css/"         => "access 3 days",
    "/themes/meta/images/"      => "access 3 days",
    "/themes/meta/js/"          => "access 3 days",
    "/themes/meta/meta-black/"  => "access 3 days",
    "/themes/meta/meta-grey/"   => "access 3 days",
    "/themes/meta/meta-paper/"  => "access 3 days",
    "/themes/meta/meta-pink/"   => "access 3 days" 
    )
  compress.cache-dir            = webserver-root + "tmp/cache_metaskills/"
  server.errorlog               = webserver-root + "logs/metaskills.error.log"
  accesslog.filename            = webserver-root + "logs/metaskills.access.log"
  fastcgi.server                = ( ".php" =>
                                    ( "localhost" =>
                                      ( 
                                        "socket" => "/tmp/php-fastcgi.socket",
                                        "bin-path" => "/opt/local/bin/php-fcgi",
                                        "max-procs" => 4,
                                        "bin-environment" => ( 
                                          "PHP_FCGI_CHILDREN" => "16",
                                          "PHP_FCGI_MAX_REQUESTS" => "10000"
                                        ),
                                        "bin-copy-environment" => (
                                          "PATH", "SHELL", "USER"
                                        ),
                                        "broken-scriptfilename" => "enable"
                                      )
                                    )
                                  )
}
</macro:code>

<p>Obviously this configuration is dependant on php-fcgi being installed and If you followed along in my past <a href="/2006/5/29/my-own-soup-to-nuts-recipe-for-ruby-on-rails-on-os-x">Soup to Nuts Recipe for Ruby on RAILS on OS X</a>, here is a few crib notes I kept on how to recompile a few things so that you can have your whole installation of LightTPD, Ruby, PHP, and MySQL  all running from the Darwin Ports /opt directory.</p>

<h2>Reinstall LightTPD with SSL</h2>

<p>If you do not plan on using SSL with Lighty, this step is optional.</p>

<pre class="command">
sudo port uninstall lighttpd
sudo port install lighttpd +ssl
</pre>

<h2>MySQL 5 Installation in Darwin Ports </h2>

<p>This part is definitely not for the week. If you are total noobie, stick with the <a href="http://dev.mysql.com/downloads/" class="external-link" rel="external">compiled packages</a> offered by MySQL AB because doing this installation may break some of the tools you might be familiar with. Most can be fixed, but you will definitely loose your fancy start/stop button in the System Preferences.</p>

<p>I installed MySQL 5 in this manner so that I could have PHP from Darwin Ports totally hooked into the MySQL installation by DP as well. I do not suggest you do this if you are new to this sort of stuff, again, these are just some quick notes I made. OK...</p>

<p>First, add <code>/opt/local/lib/mysql5/bin</code> to the $PATH environment variable in your <code>.bash_profile</code>. When you do this you are linking to the REAL path for the MySQL binaries and not the Darwin Ports suffix5 sym links that it creates in<code>/opt/local/bin</code></p>

<p>Now issue these command. This will install mysql5 with Darwin Ports and the server startup scripts. The second command will load that startup script into your <code>launchd</code> list. and the third will install the default MySQL tables for permissions, etc. </p>

<pre class="command">
sudo port install mysql5 +server
sudo launchctl load -w /Library/LaunchDaemons/org.darwinports.mysql5.plist
sudo -u mysql /opt/local/lib/mysql5/bin/mysql_install_db
</pre>

<p>So that you do not have to do the following steps, restart you computer which should let MySQL use the startup script you enabled in the step above. In this way you can bypass these first two commands below. The other two commands are some notes of mine on the usage of the wrapper LaunchDaemon installed by Darwin Ports for MySQL. For easy reading, check out the support pages for <a href="http://dev.mysql.com/doc/refman/5.0/en/unix-post-installation.html" class="external-link" rel="external">UNIX Post-Installation Procedures</a> offered on the MySQL Reference Manual. Remember, I am pretty sure that you do not have to do these steps if you just restart your computer. </p>

<pre class="command">
sudo -u mysql /opt/local/lib/mysql5/bin/mysqld_safe &
sudo /opt/local/lib/mysql5/bin/mysqladmin shutdown

sudo -u mysql /opt/local/etc/LaunchDaemons/org.darwinports.mysql5/mysql5.wrapper start
sudo -u mysql /opt/local/etc/LaunchDaemons/org.darwinports.mysql5/mysql5.wrapper stop
</pre>

<p>Here we are going to create the <code>my.cnf</code> file in one of the places this installation of MySQL likes to find it from the example files installed by MySQL. In this example I used the medium example file, but if you are expecting more traffic and have more RAM, use the my-huge.cnf file instead. Next we are creating a sym link to the my.cnf in the standard place the normal MySQL AB binaries install them on OS X, in the <code>etc</code> directory. In this way you can still use <a href="http://www.mysql.com/products/tools/administrator/" class="external-link" rel="external">MySQL Administrator</a> buy be aware that I had to use 127.0.0.1 instead of localhost. Not sure why. </p>

<pre class="command">
sudo -u mysql cp /opt/local/share/mysql5/mysql/my-medium.cnf /opt/local/var/db/mysql5/my.cnf
sudo ln -s /opt/local/var/db/mysql5/my.cnf /etc/my.cnf
</pre>

<p>Now to fix the MySQL gem that was installed the first time around. This install type uses the <code>mysql-config</code> as described in <a href="http://tmtm.org/en/mysql/ruby/" class="external-link" rel="external">the fine manual</a>. </p>

<pre class="command">
sudo gem uninstall mysql
sudo gem install mysql -- --with-mysql-config=/opt/local/lib/mysql5/bin/mysql_config
</pre>

<h2>Installing PHP5 using Darwin Ports MySQL </h2>

<p>Now you are ready to install PHP5 with its FastCGI support and Darwin Ports dependencies on the MySQL previously installed. The second command copies the php.ini installed by DP into the place the Darwin Ports PHP likes to find it. </p>

<pre class="command">
sudo port install php5 +fastcgi +mysql5
sudo cp /opt/local/etc/php.ini-recommended /opt/local/etc/php.ini
</pre>

<p>Now add this line of code to the php.ini file somewhere at the end of the section called "Paths and Directories" that is about mid way down. See also this <a href="http://trac.lighttpd.net/trac/wiki/TutorialLighttpdAndPHP" class="external-link" rel="external">web page</a> for more info on this.</p>

<macro:code lang="php">
cgi.fix_pathinfo = 1
</macro:code>





filename: 2006-10-02-custom-rake-task-to-unload-fixtures.html
         title: Custom Rake Task To Unload Fixtures
    categories: ["Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2006/10/2/custom-rake-task-to-unload-fixtures
          body: 


<p>I made a revised version of a rake task that I have used quite often, for unloading existing DB tables into fixture data and thought I would share. This rake task is the in correct name space and adds a "rake db:fixtures:unload" command to your rails project when you put this in "lib/tasks/foo.rake". It can take an optional TABLES variable or if none is present the whole array of DB tables are converted. I find this rake task helpful when dealing with LARGE databases.</p> 

<macro:code lang="ruby">
namespace :db do
  namespace :fixtures do
    desc 'Create YAML test fixtures from data in specifed tables. Set table names by TABLES=foos,bars,etc'
    task :unload => :environment do
      sql  = "SELECT * FROM %s"
      tables = ["schema_info"]
      ActiveRecord::Base.establish_connection
      (ENV['TABLES'] ? ENV['TABLES'].split(/,/) : ActiveRecord::Base.connection.tables).each do |table_name|
        i = "000"
        File.open("#{RAILS_ROOT}/test/fixtures/#{table_name}.yml", 'w') do |file|
          data = ActiveRecord::Base.connection.select_all(sql % table_name)
          file.write data.inject({}) { |hash, record|
            hash["#{table_name}_#{i.succ!}"] = record
            hash
          }.to_yaml
        end
      end
    end
  end
end
</macro:code>



filename: 2006-10-31-happy-halloween-from-textmate.html
         title: Happy Halloween from TextMate
    categories: ["Home", "TextMate"]
     disqus_id: /2006/10/31/happy-halloween-from-textmate
          body: 


<br />
<div class="iecenter">
<img src="/files/spooky_textmate.gif" alt="Happy Halloween from TextMate" />
</div>

<p>Upon downloaded the Cutting-Edge version (1.5.4 r1311) of TextMate yesterday, I was happy to find a halloween surprise. How cool can one program be - thanks Allan! Especially to some of your latest work on <a href="http://macromates.com/blog/archives/2006/10/28/new-dialog-system-for-commands/" rel="external-link" class="external-link">extending the dialog</a> features for bundle developers.</p>





filename: 2006-12-21-homemarks-my-first-ruby-on-rails-pet-project.html
         title: HomeMarks, My First Ruby On Rails Pet Project
    categories: ["Home"]
     disqus_id: /2006/12/21/homemarks-my-first-ruby-on-rails-pet-project
          body: 


<br />
<div class="iecenter">
<img src="/files/homemarks.png" alt="HomeMarks, Simple Project-Based Bookmarks" />
</div>

<div id="content-message" class="messages error" style="width:380px; margin: 10px auto;">
 UPDATE: HomeMarks is now avialable as a <a href="http://www.homemarks.com/#about" class="external-link" rel="external-link">free download.</a>
</div>

<p>I've heard that the best web applications are ones that usually start as a simple tool that meets the needs of its creator, in this case, myself. I have always been close to Web Developers that code their own HTML start pages with links to the projects they are working on. So when the time came for me to really get serious with my programing career using <a href="http://www.rubyonrails.org/" rel="external-link" class="external-link">RAILS</a>, this was the first app that I thought about building. From the site's copy...</p>

<p>HomeMarks is a unique application allowing everyone from novice to elite the ability to create their own bookmark start page using easy drag and drop methods for sorting Columns, Boxes and Bookmarks. Our custom bookmarklet tool allows you to add links to your HomeMarks start page while surfing and/or researching online. If you're a bookmark junkie with literally hundreds of saved links to your favorite Internet haunts, HomeMarks is not for you. However, if youâ€™re looking for a clean, simple homepage to organize your most recent or relevant links in an environment tailored to your needs and interests, <a href="http://www.homemarks.com/" rel="external-link" class="external-link">give HomeMarks a try</a>. After all, HomeMarks is where the heart is.</p>

<p>So it is not like <a href="http://www.techcrunch.com/2006/01/25/yes-this-weeks-ajax-homepage/" rel="external-link" class="external-link">the world needs another AJAX homepage</a>, there are plenty out there. My problem is that they seem to go to far and build to much into them, Netvibes is a great "poor" example. I do not want XML Feeds, Images, News Headlines, or anything else in my start page. I just want links and only about 100 or so at maximum. For me bookmarks are very transitory objects. They need to be direct links to the things that I am working on, or referencing at that exact time. Once they are not, they get throw away and I can almost certainly find them in the 1st page of a Google result if I really needed to. So this is what <a href="http://www.homemarks.com/" rel="external-link" class="external-link">HomeMarks</a> is for me, simple software, using <a href="http://gettingreal.37signals.com/ch02_Build_Less.php" rel="external-link" class="external-link">build less principals</a>. If you choose to use it, I hope you enjoy using it. Note, only for Firefox or Safari/WebKit.





filename: 2006-12-29-web-service-woes.html
         title: Web Service Woes
    categories: ["Home", "Ruby/Rails"]
     disqus_id: /2006/12/29/web-service-woes
          body: 


<p>Only now do I really get this image from <a href="http://www.loudthinking.com/arc/000585.html" rel="external-link" class="external-link">DHH's blog</a>. I am really beginning to despise SOAP for some reason, but I guess I will "get it" as I learn more about it -- as it seems to be the only way to do business with the big players out there. For a glimpse of some of my hell, check out this <a href="http://www.brendonwilson.com/blog/2006/04/02/ruby-soap4r-wsdl-hell/" rel="external-link" class="external-link">Ruby + SOAP4R + WSDL Hell</a> article.</p>

<p>The bad news aside, I was really happy to find someuseful tools today from Todd Ditchendorf <a href="">Scandalous Software</a> site. The list is pretty extensive so go check it out. Not on the list that I was happy to see were:</p>

<p>Check XML and XHTML documents for Well-Formedness and Validity while editing them in TextMate with support for DTD, W3C XML Schema, RELAX NG, Schematron and XInclude.</p>

<div class="iecenter">
<a href="http://www.ditchnet.org/texmlmate/" rel="external-link" class="external-link" style="padding-right:0; text-decoration:none; border:0; background:none;">
<img src="/files/soaphell/texmlmate.gif" alt="TextMate XML Editor" />
</a>
</div>

<p>SOAP Client is a free Cocoa-based developer tool for Mac OS X Tiger that allows you access and debug WSDL & SOAP-based Web Services from the comfort of your desktop.</p>

<div class="iecenter">
<a href="http://www.ditchnet.org/soapclient/" rel="external-link" class="external-link" style="padding-right:0; text-decoration:none; border:0; background:none;">
<img src="/files/soaphell/soap_client.gif" alt="Free Cocoa SOAP Client" />
</a>
</div>





filename: 2007-01-31-rake-task-to-read-and-write-the-activerecord-schema-version-table.html
         title: Rake task to read and write the ActiveRecord schema version table.
    categories: ["Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2007/1/31/rake-task-to-read-and-write-the-activerecord-schema-version-table
          body: 


<p>After attending Rails Edge in Reston, Virginia I decided to move some common tasks from my <code>~/.irbrc</code> file and put them into Rake. I thought I would share a task that reads and writes the ActiveRecord schema table. Sometimes in migrations this is either good to know or manually change. Simply copy this in a foo.task file in your project/lib/tasks directory and use <code>rake -T</code> to see the description and usage. I have placed these tasks in the db:version namespace.</p> 

<macro:code lang="ruby">
namespace :db do
  namespace :version do 

    desc "Read the current version of the database."
    task :read => :environment do
      puts "The #{RAILS_ENV}' database version is: #{ActiveRecord::Migrator.current_version}"
    end
    
    desc "Manually set the schema version to a specific target version with VERSION=x"
    task :write => :environment do
      if ENV['VERSION']
        if ActiveRecord::Base.connection.update("UPDATE #{ActiveRecord::Migrator.schema_info_table_name} SET version = #{ENV['VERSION'].to_i}")
          puts "SUCCESS: The '#{RAILS_ENV}' database version is now: #{ActiveRecord::Migrator.current_version}"
        else
          puts "FAILED: The '#{RAILS_ENV}' database version is still: #{ActiveRecord::Migrator.current_version}"
        end
      else
        puts 'You must specify a VERSION=n argument to this command. Use rake db:version:read to get the current version.'
      end
    end
    
  end  
end
</macro:code>



filename: 2008-03-19-photo-fancy-border-code-snippet-examples.html
         title: Photo Fancy Borders
    categories: ["MetaTheme"]
     disqus_id: /2008/3/19/photo-fancy-border-code-snippet-examples
          body: 


<p>If you want a fancy border that mimics a photo with a white border and shadowed edges, use this code snippet around your image tag. Since this snipped is styled using PNG images with CSS, the shadows are not compatible with version 6 or below of Windows Internet Explorer. In this circumstance the meta theme will substitute a gif file instead and hence get rid of the shadow effect.</p>

<macro:code lang="html">
<div class="photobounding">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/yourpicture.jpg" alt="" width="" height="" />
	</div>
</div>
</macro:code>

<p>When using the snippet, please follow the rules below:</p>

<ul>
	<li>Width of image can not exceed 523 pixels</li>
	<li>Width of image is less than 523, must use inline style on bounding +28 pixels.</li>
	<li>Width of image can not be less than 143 pixels</li>
	<li>Width has to be specified in the image tag</li>
	<li>Height of image can not be less than 220 pixels</li>
</ul>

<h2>Max Allowed Width - 523px</h2>

<p>Here is an image styled using the photo fancy border snippet. In this example the width of the image has been specified to the max number of 523 pixels. The height has also been specified, but this is optional. When using the MetaTool width preferences above, this image will stay centered in the content area. Again, the image will stay centered in the page.</p> 

<div class="photobounding">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/metatheme/meta-home.jpg" alt="Meta Home" width="523" height="268" />
	</div>
</div>

<macro:code lang="html">
<div class="photobounding">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/meta-home.jpg" alt="Meta Home" width="523" height="268" />
	</div>
</div>
</macro:code>

<h2>Less Than Maximum Width - 300px</h2>

<p>Here is an image that is only 300 pixels wide. In this case we have to use a little bit of inline CSS to control the width of the bounding box. The width of the bounding box has to be 28 pixels larger than the image.</p> 

<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/metatheme/puppylove.jpg" alt="Puppy Love" width="300" />
	</div>
</div>

<macro:code lang="html">
<div class="photobounding" style="width:328px">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/puppylove.jpg" alt="Puppy Love" width="300" />
	</div>
</div>
</macro:code>

<h2>Less Than Maximum Width - 300px (aligned left)</h2>

<p>Here is the exact same image as above, but this time its been floated left and put right before a paragraph tag. The inline CSS now also includes the float command and a margin-right command to keep the paragraph text from running into the image. If you want to, you can float the image right but the margin command should be changed to 'margin-left' to match.</p>

<div class="photobounding" style="width:328px; float:left; margin-right:20px;">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/metatheme/puppylove.jpg" alt="Puppy Love" width="300" />
	</div>
</div>

<p>Suspendisse id velit vitae ligula volutpat condimentum. Aliquam erat volutpat. Sed quis velit. Nulla facilisi. Nulla libero. Vivamus pharetra posuere sapien. Nam consectetuer. Sed aliquam, nunc eget euismod ullamcorper, lectus nunc ullamcorper orci, fermentum bibendum enim nibh eget ipsum. Donec porttitor ligula eu dolor. Maecenas vitae nulla consequat libero cursus venenatis. Nam magna enim, accumsan eu, blandit sed, blandit a, eros.</p>

<p>Quisque facilisis erat a dui. Nam malesuada ornare dolor. Cras gravida, diam sit amet rhoncus ornare, erat elit consectetuer erat, id egestas pede nibh eget odio. Proin tincidunt, velit vel porta elementum, magna diam molestie sapien, non aliquet massa pede eu diam. Aliquam iaculis. Fusce et ipsum et nulla tristique facilisis. Donec eget sem sit amet ligula viverra gravida. Etiam vehicula urna vel turpis.</p>

<macro:code lang="html">
<div class="photobounding" style="width:328px; float:left; margin-right:20px;">
	<div class="tl"></div>
	<div class="tr"></div>
	<div class="bl"></div>
	<div class="br"></div>
	<div class="photoborder"></div>
	<div class="phototime">
		<img src="/files/puppylove.jpg" alt="Puppy Love" width="300" />
	</div>
</div>
</macro:code>





filename: 2008-03-19-png-support-for-ie6.html
         title: PNG Support for IE6
    categories: ["MetaTheme"]
     disqus_id: /2008/3/19/png-support-for-ie6
          body: 


<p>Obviously the Meta theme uses a lot of PNG images for styling its structural presentation. Many of these had to be striped for IE 6 since that browser can not use PNG files natively in content nor CSS elements such as background declarations. Fortunately however, the Meta theme does incorporate a <a href="http://homepage.ntlworld.com/bobosola" title="PNG Support for IE by Bob Osola" class="external-link" rel="external">JavaScript routine</a> that enables PNG support for Internet Explorer in all the content areas. Meanwhile IE 7 does support PNG images. In this case it will ignore the IE 6 JavaScript fix.</p>

	<div style="margin: 10px auto; width:504px; text-align:center">
		<div style="margin: 0 5px;">
			<img src="/files/metatheme/meta_drax.png" width="261" height="399" alt="PNG Support Example Image - Drax The Destroyer" />
		</div>
	</div>

<p>If you are using Internet Explorer 6, the image's shadow below it should feather out smoothly to the paper background of the page. Normally IE 6 and lower will show a PNG with a light blue background. If you are using Firefox, Safari and the like, great, PNGs are supported natively.</p>





filename: 2008-03-20-css-conventions.html
         title: CSS Conventions
    categories: ["MetaTheme"]
     disqus_id: /2008/3/20/css-conventions
          body: 


<p>Within a paragraph &lt;p&gt; tag you can use &lt;code&gt; tags to denote a command. When you do this, the text within the code tags will show up highlighted in a monospace font. For example... you must type in <code>sudo port install ruby</code> when installing ruby via MacPorts.</p>

<p>If you use the CSS class <code>.external-link</code> on an &lt;a&gt; tag, then that link will do two things. First it will show a small icon to the right that denotes the link will be opened in a new window. Second, when the page loads the MetaContent javascript class will add a <code>target="blank"</code> to the link so that it opens in a new window. The reason for this is that target attribute is not XHTML compliant.</p>

<p>If you use &lt;pre&gt; tags outside of a paragraph then the it will appear in a code sample box like the first example below showing some shell environment variables. However if you give the tag a command class like &lt;pre class=&quot;command&quot;&gt; then the enclosing text will be presented in a similar box that shows that this command is a shell command by displaying a corresponding graphic.</p>

<pre>
  # My PATH Environment Variables
  export PATH="/opt/local/bin:/opt/local/sbin:/usr/local/mysql/bin:$PATH"
  export MANPATH="/opt/local/share/man:$MANPATH"
  export INFOPATH="/opt/local/share/info:$INFOPATH"
</pre>

<pre class="command">sudo port install ruby</pre>


<p>The Meta theme incorporates CSS for Mephisto's implementation of the <a href="http://rubyforge.org/projects/coderay/" class="external-link">CodeRay</a> library. To have mephisto use CodeRay to syntax highlight your code, wrap the code with &lt;macro:code lang=&quot;ruby&quot;&gt;code&lt;/macro:code&gt;. The code will look like the example below.</p>

<macro:code lang="ruby">
  # Ruby 1.9 introduces BasicObject.
  # Use Builder's BlankSlate until then.
  unless defined? BasicObject
    require 'blankslate'
    BasicObject = BlankSlate
  end
</macro:code>

<p>If you want to use a &lt;blockquote&gt; tag, please put a &lt;div&gt; immediately inside of it to get the best formatting.</p>

<blockquote><div>I believe that the purpose of life is, at least in part, to be happy. Based on this belief, Ruby is designed to make programming not only easy but also fun. It allows you to concentrate on the creative side of programming, with less stress.</div></blockquote>





filename: 2008-03-20-general-information.html
         title: General Information
    categories: ["MetaTheme"]
     disqus_id: /2008/3/20/general-information
          body: 


<p><img src="/files/metatheme/meta_drax2.png" alt="Drax" style="float:left;margin-right:4px;" />The Meta theme was originally written for <a href="http://drupal.org/" class="external-link">Drupal</a> in late 2005 and converted to <a href="http://mephistoblog.com/" class="external-link">Mephisto</a> in March 2008 for version 0.8, the Drax Edition. The theme incorporates quite a few publishing conventions which are listed below and in the section pages listed to the right. I must say that the Meta theme is not a web 2.0 accomplishment. The CSS and presentation is very '05. That said the theme is a technical accomplishment in that it uses zero tables for layout, on the down side, it does use a lot of PNG background images in the CSS to accomplish the soft edges and translucent effects. Be warned, if you choose to use the Meta theme, make sure your Apache expires settings are set right!</p>

<p>I would love feedback and will happily accept revisions and/or feature requests. The source for the theme can be found on <a href="http://github.com/metaskills/metatheme/tree/master" class="external-link">my Github page</a>.</p>

<ul style="margin: 10px 0 0 40px;">
  <li><strong>UPDATE:</strong> 03/21/2008 Added reddit link to blogosphere partial.</li>
  <li><strong>UPDATE:</strong> 03/26/2008 Adding an attached image div on articles/pages.</li>
  <li><strong>UPDATE:</strong> 06/02/2008 Update right content to show recent posts.</li>
  <li><strong>UPDATE:</strong> 09/26/2008 Added CSS for paged articles. See below.</li>
</ul>



<h2>The MetaTools</h2>

<p>The MetaTools at the top of the page are just some simple user preference switches. They can choose to customize the width, font size and presentation color of your site. When a user option is selected a cookie is set that controls which stylesheets are on/off right before the body section of the page is loaded. The default values for these are set in the meta.js file at the top of the page. Feel free to customize these with the options listed.</p>


<h2>Lightbox JS</h2>

<p>The theme includes the <a href="http://www.huddletogether.com/projects/lightbox2/" class="external-link">lightbox</a> image display javascript. For usage please visit the author's website at <a href="http://www.huddletogether.com/projects/lightbox2/" class="external-link">huddletogether.com</a>. For an example, see my old <a href="/2006/2/5/mini-network-with-a-big-xserve-style">Mac Mini NOC</a> article.</p>


<h2>Paged Articles</h2>

<p>Art Web has a great article titled <a href="http://www.artweb-design.de/projects/mephisto-plugin-paged-article-lists" class="external-link">Mephisto Plugin: Paged Article Lists</a> that walks you through installing the needed plugins. Use the liquid snippet below in the <code>_list.liquid</code> template to get pagination links as seen on my home page.</p><br/>

<macro:code lang="ruby">
  {{ articles | will_paginate: path_info }}
</macro:code>



filename: 2008-03-22-metaskills-net-reborn-on-mephisto.html
         title: MetaSkills.net Reborn on Mephisto
    categories: ["Heuristics", "Home"]
     disqus_id: /2008/3/22/metaskills-net-reborn-on-mephisto
          body: 


<p><img src="/files/metatheme/meta_drax2.png" alt="Drax" style="float:left;margin-right:4px;" />Well after a year of neglect, the MetaSkills.net blog has been <a href="/meta-theme-for-mephisto">reborn on Mephisto</a>. Previously I was using Drupal and it finally got to a point where I was so deep into ruby that I did not even have the gumption to open up a PHP session to publish anything. The sad part is that I told myself that this PHP disdain would help me get off my butt and move to Mephisto. You know, eat my own dog food â€“ obviously procrastination won out â€“ but not forever. For the past week I worked hard to get the Meta theme for Drupal converted to Mephisto. You can use this theme yourself if you want, the source is available on <a href="http://github.com/metaskills/metatheme/tree/master" class="external-link">my github</a> and I am making updates often. Heck... feel free to fork the project and make some changes or let me know if you want me to incorporate them into mine.</p> 

<p>Here are a few things that I liked about rewriting the Meta theme for Mephisto. First, unlike Drupal, the administration of your Mephisto blog is not inline, but all tucked away in a private admin section. When you make a theme in Drupal, you are burdened to to the task of coding all the admin CSS for the inline admin features. The Meta theme had over 500 lines of CSS just for the Drupal administration. That is all gone and I love keeping theme code focused on doing nothing but presenting the "user" experience.</p>

<p>Also, when I first wrote the Meta theme I was just a JavaScript beginner. Nowadays I am pretty good at it and have moved away from the simple script like functions that pass arguments around into a full OO style that spawns from smart classes and a persistent state. The Meta theme is now 100% on Prototype and all the interactive features are tightly knit into the MetaTools, MetaSearch, and MetaContent classes. Take a look at the meta.js source if you want. Lastly, if you are on an old Drupal blog looking to get over to Mephisto, maybe this migration script will help.</p>


<h2>Migration from Drupal to Mephisto</h2>

<p>This script is what I used in the rails console to populate data from my old Drupal 4.7 blog to Mephisto. This code is untested on the schema of higher versions of Drupal.</p>

<macro:code lang="ruby">
# My Drupal 4.7 to Mephisto Script
# ----------------------------------------------------------------
# Things I did before
#   * Delete all rows from drupal node table where type != 'blog'
#   * Remove the type column from the drupal node table
# 
# Things I did afterward
#   * Found all comments in the Mephisto contents table that were 
#     from me and added user_id 1 to them.
# 
# Uncomment these if you are debugging the script and want to 
# start off on a clean mephisto install
# ----------------------------------------------------------------
# Article.find(:all).each(&:destroy)
# CachedPage.delete_all
# AssignedSection.delete_all
# Tagging.delete_all
# Tag.delete_all

@mysite = "http://www.metaskills.net/"
@home = Section.find_by_name('Home')

class DrupalArticle < ActiveRecord::Base
  establish_connection :drupal
  set_table_name  :node
  set_primary_key :nid
  has_many :comments, :class_name => 'DrupalComment', :foreign_key => 'nid'
  has_one :version, :class_name => 'DrupalArticleVerson', :foreign_key => 'nid'
  def created_at ; Time.at(self[:created]) ; end
end
class DrupalArticleVerson < ActiveRecord::Base
  establish_connection :drupal
  set_table_name  :node_revisions
  set_primary_key :vid
end
class DrupalComment < ActiveRecord::Base
  establish_connection :drupal
  set_table_name  :comments
  set_primary_key :cid
  belongs_to :article, :class_name => 'DrupalArticle', :foreign_key => 'nid'
end

DrupalArticle.find(:all).each do |da|
  # Creating the article
  na = Article.new
  na.site_id      = 1
  na.created_at   = da.created_at
  na.published_at = da.created_at
  na.updated_at   = Time.now
  na.title        = da.title
  na.body         = da.version.body
  na.excerpt      = da.version.teaser
  na.updater_id   = 1
  na.user_id      = 1
  na.save!
  na.sections << @home
  # Creating comments for this article
  da.comments.each do |dac|
    nac = na.comments.build
    nac.site_id       = 1
    nac.created_at    = Time.at(dac.timestamp)
    nac.published_at  = Time.at(dac.timestamp)
    nac.updated_at    = Time.at(dac.timestamp)
    nac.author        = dac.name
    nac.author_url    = dac.homepage
    nac.author_email  = dac.mail
    nac.author_ip     = dac.hostname
    nac.user_agent    = "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/523.12.2 (KHTML, like Gecko) Version/3.0.4 Safari/523.12.2"
    nac.referrer      = @mysite
    nac.approved      = true
    nac.title         = dac.subject
    nac.body          = dac.comment
    nac.save!
  end
end
</macro:code>



filename: 2008-03-26-don-t-be-a-plinko-programmer.html
         title: Don't Be A Plinko Programmer
    categories: ["Home", "Lifestyle", "Miscellaneous", "Ruby/Rails"]
     disqus_id: /2008/3/26/don-t-be-a-plinko-programmer
          body: 


<p>
  One of the things that I have really grown persnickety about is the placement of code. For example, I am a huge advocate that controllers in a rails project should read like a mini Domain Specific Language (DSL) and that as much logic as possible be delegated to the models. In my opinion the best way to do that in a Rails project is to learn the proper usage of ActiveRecord Association Extensions. You can check out the Rails API <a href="http://api.rubyonrails.com/classes/ActiveRecord/Associations/ClassMethods.html" class="external-link">on this page</a> and scroll down to the section called "Association Extensions" if you read the official docs. In short:
</p><br />

<blockquote>
  <div>
    The proxy objects that control the access to associations can be extended through anonymous modules. 
    This is especially beneficial for adding new finders, creators, and other factory-type methods that are only used as part of this association.
  </div>
</blockquote>

<p>
  Now this brings me to the topic of my article, what is a Plinko Programmer. If you have no class and don't even know what Plinko is, <a href="http://en.wikipedia.org/wiki/Plinko" class="external-link">Wikipedia has a great write up</a> on it. A Plinko Programmer is someone that writes code which smells in a few ways. For instance they use excessive arguments in their methods and unnecessarily pass objects around as arguments. They like to bake their own <a href="http://www.ruby-doc.org/core/classes/Enumerable.html" class="external-link">Enumerable</a> methods vs using the ones readily available. They even like to create large class level methods, or even worse controller actions, that really should be factory methods in 2 or more classes. The analogy is akin to much of the Java code I have rewritten in Rails. Plinko code is long and full of if/else conditions, it's just like the game. You drop an object in the top and just watch it "by chance" work it's way thru the method/function. It is a nasty way to write code and if for anything else it is illegible and hard to test.
</p>


<h2>What Is The Right Way?</h2>

<p>
  Here is a short example of how to use Association Extensions. This is a simple example, but when you get used to really using association extensions you will begin to see just how much of your code really belongs there. Let's assume you have a simple invoice and items class.
</p>

<macro:code lang="ruby">
class Invoice < ActiveRecord::Base
  has_many :items, :class_name => 'InvoiceItem', :foreign_key => 'invoice_id'
end
class InvoiceItem < ActiveRecord::Base
  belongs_to :invoice
  def total
    # Some complex stuff
  end
end
</macro:code>

<p>
  Now let's say that you want to have a clean little method for getting the total of the Invoice object. Resist the temptation to simple add an instance method to the Invoice class. Although it is logical to have <code>@invoice.total</code> it is better to add it too the association extension. Why? Well think about it, what are you doing? The answer is that you are working with a "collection" of InvoiceItems. It turns out that this is the first part of what the association extension is for, an easy way to work with a collection that has the benefits of knowing how to proxy to methods that can reflect back down to the original caller. It's hard to explain but I'll just leave you with my persnickety code example. Your general rule should be if you are working with the collection in part or in total, then the association extension is the place for it. Keep in mind that so far I have only talked about has_may association extensions, you can do these for one-to-on belongs_to and has_one associations as well.
</p>

<macro:code lang="ruby">
class Invoice < ActiveRecord::Base
  has_many :items, :class_name => 'InvoiceItem', :foreign_key => 'invoice_id' do
    def total
      proxy_target.map(&:total).sum
    end
  end
end
class InvoiceItem < ActiveRecord::Base
  belongs_to :invoice
  def total
    # Some complex stuff
  end
end
# Would yeild code like:
@invoice.items.total
</macro:code>

<p>P.S. Here lately I've been creating an app/concerns directory where I put modules that encompass mixed in behavior in so many ways for top level models. Typically these modules/concerns shared instance and class methods with two or more primary classes. They have become an excellent home for association extensions since many large applications will define the same association from different models in the object. To keep the code from duplicating in those different models it is better to do something like this</p>

<macro:code lang="ruby">
# This file "invoice_item_concerns.rb" would reside in app/concerns
module InvoiceItemConcerns
  module AssociationExtensions
    def total
      proxy_target.map(&:total).sum
    end
  end
end

class Invoice < ActiveRecord::Base
  has_many :items, :class_name => 'InvoiceItem', :foreign_key => 'invoice_id', :extend => InvoiceItemConcerns::AssociationExtensions
end

class PackingSlip < ActiveRecord::Base
  has_many :shipments, :class_name => 'InvoiceItem', :foreign_key => 'packing_slip_id', :extend => InvoiceItemConcerns::AssociationExtensions
end

class InvoiceItem < ActiveRecord::Base
  belongs_to :invoice
  def total
    # Some complex stuff
  end
end

# Would yeild code like:
@invoice.items.total
@packing_slip.shipments.total
</macro:code>





filename: 2008-04-03-macbook-with-4gb-of-memory.html
         title: MacBook With 4GB Of Memory
    categories: ["Apple/OSX", "Home"]
     disqus_id: /2008/4/3/macbook-with-4gb-of-memory
          body: 


<p>My MacBook is about a year old now and I've read in <a href="http://forums.macrumors.com/showthread.php?t=364707" class="external-link">quite a few places</a> that they could be upgraded to around 3.3GB of memory for this specific model. Unlike the latest MacBook which can "as advertised" accommodate 4GB of memory, the theory was that the Santa Rosa chipset can address all 4GB. It could very well be that technically my MacBook is only using ~3.3GB of that memory but the performance has been significant for a very <a href="http://www.crucial.com/store/partspecs.aspx?imodule=CT25664AC667" class="external-link">cheap stick of RAM</a>. I highly recommend Crucial.<p>

<p>I think this upgrade will have to hold me for some time. In general it has really helped my uptime. Odd as that is I think working with only 2GB of memory caused a lot of IO swap and memory corruption. Especially when stopping and starting so many different mongrels for local Rails development. As of this writing I have not found an issue that I have had to reboot for... uptime 10 days and going strong.</p>

<p>To keep my uptime going strong, I just purchased an app called <a href="http://www.activata.co.uk/ifreemem/" class="external-link">iFreeMem</a> today after reading about it on <a href="http://www.tuaw.com/" class="external-link">TUAW</a>. Because I use PhotoShop ever now and then it really helped having this utility free up some memory that it would not release. So far it is working great!</p>



filename: 2008-04-03-how-to-stop-delivery-of-an-email-within-an-actionmailer-method.html
         title: How To Stop Delivery Of An Email Within An ActionMailer Method
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/4/3/how-to-stop-delivery-of-an-email-within-an-actionmailer-method
          body: 


<p>OK, so you want to keep your code placement REALLY organized. You have <a href="/2008/3/26/don-t-be-a-plinko-programmer">read about my persnicketyness</a> and now you want to practice the best in concern placement and keep those controllers of yours really slim. Like me, you may want to try and keep controller feature additions to very specific one liners of code. Organizing your controller code to do just that with ActiveRecord models or even your own custom classes is a pretty easy task, but how do you keep things simple when dealing with controller actions that have to send email AND you want that single email link of code to be responsible for everything in it's own encapsulated way.</p>

<p>The answer is to push the logic back to the model again. Your controllers should not be concerned with the logic that deals with your own business rules for sending email. The problem with ActionMailer is that most people just use the dynamic <code>MyMailerClass.deliver_</code> methods that utilize <code>method_missing</code> to instantiate a mailer classs, and send an email in one fell swoop. I like this usage too, but the challenge is how to tell an instance of a the ActionMailer::Base class that it needs to stop delivery within a method definition that is all set to deliver? The answer is Ruby singleton method magic.</p> 

<macro:code lang="ruby">
module ActionMailer
  class Base
    
    # A simple way to short circuit the delivery of an email from within
    # deliver_* methods defined in ActionMailer::Base subclases.
    def do_not_deliver!
      def self.deliver! ; false ; end
    end
    
  end
end
</macro:code>

<p>I suggest placing this code into your <code>lib/core_ext/action_mailer.rb</code> file. It will allow you to write mailer methods that can short circuit themselves to stop delivery. For instance:

<macro:code lang="ruby">
class MyMailerClass < ActionMailer::Base
  def user_notification(user)
    # ... 
    do_not_deliver! if user.email.blank?
  end
end
# In your controller code.
MyMailerClass.deliver_user_notification(@user)
</macro:code>

<p>Now you do not have to worry about placing delivery concerns in the controller and even worse duplicate that code when you have to use the same mailer method in multiple places. This works by letting the instance of the ActionMailer::Base class define it's own deliver! method which trumps the delier! method called by that object normally defined in ActionMailer::Base.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://www.ruby-doc.org/docs/UsersGuide/rg/singletonmethods.html" class="external-link">About Singleton Methods</a></li>
<li><a href="http://redhanded.hobix.com/inspect/methodsThatSelfDestruct.html" class="external-link">Methods That Self-Destruct</a></li>
</ul>





filename: 2008-04-06-autotest-infinite-loop-on-failure-error.html
         title: Autotest Infinite Loop On Failure & Error
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/4/6/autotest-infinite-loop-on-failure-error
          body: 


<p>I just had an issue pop up today that seemed to be an issue for a few others. It seemed that all of a sudden that my autotest was stuck in an infinite loop after a failure or error. At first I thought it was related to some additions to my <code>~/.autotest</code> file but after commenting out the whole lot of additions there, I realized it was something else. Here was my fix. Basically I think these errors are always related to a file that has changed during your test run. Now we just have to find out what that files are. Here are the steps I took to find out.</p>

<h2>Step 1: Gather Changed FIle Info</h2>

<p>To find out what files are changing. To do this add the -v option when you start autotest. This will cause it to run in verbose mode. Now after you have failed a test and YOU KNOW YOU DID NOT SAVE ANYTHING watch what happens below your listing of test, assertions, failures, and errors. There will be an array dumped that will contain the files change that have caused autotest to start another test cycle. In my case here is what I saw.</p>

<pre class="command">
1) Failure:
test_truth(BookmarkTest)
[test/unit/bookmark_test.rb:6
test/unit/bookmark_test.rb:5]:
<false> is not true.

1 tests, 1 assertions, 1 failures, 0 errors
[["config/uuid.state", Sun Apr 06 13:58:55 -0400 2008]]
Dunno! config/uuid.state
</pre>

<p>Ah ha... there it goes. I was using a UUID state file and it appears that file being written into the <code>config</code> directory is the culprit. By default autotest does not ignore that directory.</p>

<h2>Step 2: Fix The Problem</h2>

<p>We have two options here. You can either add an autotest exception in you <code>~/.autotest</code> file or you can bail out. My option is to bail out because I should not be adding a file at run time to the config directory. It would seem a better place would be the <code>tmp</code> directory. However if you think that adding an exception to your <code>~/.autotest</code> file would be more appropriate, here is the syntax</p>

<macro:code lang="ruby">
Autotest.add_hook :initialize do |autotest|
  ['.svn','.hg','.git'].each { |exception| autotest.add_exception(exception) }
end
</macro:code>

<h2>Step 3











filename: 2008-04-06-autotest-playlist-for-red-green-feedback.html
         title: Autotest Playlist For Red/Green Feedback
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/4/6/autotest-playlist-for-red-green-feedback
          body: 


<p>Here is how to get a playlist of sounds that will be hooked to both your autotest :red and :green callbacks. Basically this gives you a folder of sounds that are played one after another, in a loop, as your tests pass or fail. See this move below for a quick example.</p>

<div class="iecenter mt10"><object width="425" height="350"> <param name="movie" value="http://www.youtube.com/v/HV_drKDclFA"> </param> <embed src="http://www.youtube.com/v/HV_drKDclFA" type="application/x-shockwave-flash" width="425" height="350"> </embed> </object></div>

<h2>Step 1: Install QTPlay from MacPorts</h2>

<pre class="command">
sudo port install qtplay
</pre>

<h2>Step 2: Download My Autotest Playlist Files</h2>

<pre class="command">
cd ~
curl -O http://www.metaskills.net/files/autotest_playlist.tar
tar -xf autotest_playlist.tar
mv autotest_playlist .autotest_playlist && rm autotest_playlist.tar
</pre>

<h2>Step 3: Modify Your .autotest File</h2>

<p>User your favorite editor to open your <code>~/.autotest</code> file. And add this code below to it. Now you should be setup to have your own playlist of sounds that play using the <code>qtplay</code> binary installed above. If you want to play around with the sounds, then <code>open ~/.autotest_playlist/sounds</code> and start swapping out sounds. By the way, I made the :initialize and :quit sounds using the new Alex voice in Leopard. I hijacked some text to speech and then ran an audio tool called WavePad to speed change, flange, and chorus the voice a little bit.</p>

<macro:code lang="ruby">
require '~/.autotest_playlist/playlist'
</macro:code>

<h2>Credits:</h2>

<p>The idea for this came from <a href="http://www.fozworks.com/2007/7/28/autotest-sound-effects/" class="external-link">FoxWorks</a>. Shouts out "Thank You".</p>










filename: 2008-04-13-now-on-passenger-mod_rails.html
         title: Now on Passenger (mod_rails)
    categories: ["Apple/OSX", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/4/13/now-on-passenger-mod_rails
          body: 


<div class="iecenter"><img src="/assets/2008/4/13/passenger_install.png" width="515" height="308" /></div>

<p>Well this is working out well so far. I'm really liking the <a href="http://modrails.com/index.html" class="external-link">Passenger (mod_rails for Apache)</a> extension. Right now I have this Mephisto site running it and it seems to be doing really well. Also, most people do not do this, but I run a full development stack Apache/MongrelCluster to mimic production boxes the best way I can. Now I am running mod_rails on all my development hosts.</p>

<h2>Some Things I Like</h2>

<ul class="mt10">
  <li>I do not have to fuss with OS X launchd startup scripts for my mongrels, just Apache.</li>
  <li>Typically in a high volume site that runs mongrel behind an Apache proxy balancer, will get a large timeout and proxy error even if the mongrels are immediately available. Passenger has a <a href="http://modrails.com/documentation/Users%20guide.html#_redeploying_restarting_the_ruby_on_rails_application" class="external-link">nice way to restart</a> the app, just touch the tmp/restart.txt file.</li>
</ul>

<h2>Some Things I'm Waiting For</h2>

<ul class="mt10" >
  <li>The RailsEnv can not be set per virtual host. You have to set RAILS_ENV = 'development' in each app if you want to run mixed virtual hosts with different environments.</li>
  <li>Normally I would pass environment variables to the console when issuing mongrel cluster starts. I would really love to see Passenger support <a href="http://httpd.apache.org/docs/2.2/env.html" class="external-link">apache environment variables.</li>
</ul>





filename: 2008-04-22-how-to-use-passenger-mod_rails-with-rails-edge-2-1.html
         title: How to use Passenger (mod_rails) with rails edge 2.1
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/4/22/how-to-use-passenger-mod_rails-with-rails-edge-2-1
          body: 


<p>If you are like me and have <a href="/2008/4/13/now-on-passenger-mod_rails">been using passenger</a>, then you may have run into an issue when working with rails edge. I mean the REAL rails edge on Git, not that fancy rake task which I think is still pointing to a subversion snapshot. Let me take an aside on how to freeze rails edge to a project that you are managing in Git. This method is akin to using svn:externals. As a cop out, here are 3 links that you should read to learn how.</p>

<div class="update bold iecenter mt20 mb20">UPDATE: This issue has <a href="http://github.com/FooBarWidget/passenger/commit/53301de464b323d364723854d3a8d293ab8327d6" class="external-link">now been resolved</a> in the official release.</div> 

<ul>
<li><a href="http://railsontherun.com/2008/4/16/freezing-rails-with-git" class="external-link">http://railsontherun.com/2008/4/16/freezing-rails-with-git</a>
<li><a href="http://woss.name/2008/04/09/using-git-submodules-to-track-vendorrails/" class="external-link">http://woss.name/2008/04/09/using-git-submodules-to-track-vendorrails/</a>
<li><a href="http://git.or.cz/gitwiki/GitSubmoduleTutorial" class="external-link">http://git.or.cz/gitwiki/GitSubmoduleTutorial</a>
</ul>

<p>OK... now that you know how to freeze the real rails edge to your git project, and if you have been using passenger, you may now have seen this error below. The basic problem is that passenger bypasses the work that the rails boot.rb does and in doing so, it only accounts for setting RAILS_ROOT during the ApplicationSpawner process and not the FrameworkSpawner process. In the latest rails, ActionPack is now relying on RAILS_ROOT to be set by calling Rails.root (shortcut method to that constant) when loading. So <a href="http://github.com/metaskills/passenger/commit/69afcd75425a89c9d17d1fc40c0a7571d6bd547c " class="external-link">my fix was to add the RAILS_ROOT to the FrameworkSpawner class</a>.</p>

<pre>
Framework that failed to load: Vendor directory: /Users/foo/project/vendor/rails 
Error message: Anonymous modules have no name to be referenced by 
Exception class: ArgumentError 
</pre>

<h2>Resources</h2>

<ul>
<li><a href="http://code.google.com/p/phusion-passenger/issues/detail?id=29&can=1&q=edge&colspec=ID%20Type%20Status%20Priority%20Milestone%20Stars%20Summary" class="external-link">Here is the Passenger Ticket</a></li>
<li><a href="http://github.com/FooBarWidget/passenger/commit/53301de464b323d364723854d3a8d293ab8327d6" class="external-link">The official Passenger change set that fixed this issue.</a></li>
<ul>





filename: 2008-04-25-using-rubyamp-textmate-bundle-with-opt-ruby.html
         title: Using RubyAMP TextMate Bundle With /opt Ruby
    categories: ["Apple/OSX", "Heuristics", "Home", "Ruby/Rails", "TextMate"]
     disqus_id: /2008/4/25/using-rubyamp-textmate-bundle-with-opt-ruby
          body: 


<p>I've been a TextMate user for a long time now and I'm still finding new things to do with it. Here recently I wanted to use the <a href="http://code.leadmediapartners.com/tools/rubyamp" class="external-link">RubyAMP TextMate Bundle</a> and was a little miffed to find that it was pointing to my OS X system ruby. The error message looked something like this when it went looking for my ruby/gems.</p>

<pre>
No such file to load -- appscript (LoadError) from 
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/rubygems/custom_require.rb:27:in `gem_original_requireâ€™
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/rubygems/custom_require.rb:27:in `requireâ€™
...
</pre>

<p>My problem is that I use ruby installed from MacPorts (yes I have Leopard). I do this because I put a lot of crap and extra dependencies into my opt direcotry and I do not trust Apple to NOT blow away the crazy dependencey hell I would have ended up creating in the standard bin directories if I chose not to use MacPorts. I would have thought that my <code>TM_RUBY</code> environment variable being set correctly to <code>/opt/local/bin/ruby</code> in my TextMate preferences would have given RubyAMP enough info to find my correct gem environment. Obviously not... and it took me quite a bit of digging around to learn what else I needed to do. For starters, here is more than you ever wanted to know about <a href="http://macromates.com/textmate/manual/shell_commands#search_path" class="external-link">how TextMate gets the $PATH information</a>. You can skip reading that and do these simple steps.</p>

<ul class="mt10">
<li>Open /Developer/Applications/Utilities/Property List Editor.app</li>
<li>Click on "New Root", now expand that node in the list view below.</li>
<li>Click on "New Child", name it PATH</li>
<li>The child row for PATH should be a String type</li>
<li>Enter your PATH info here, should mimic your .bash_profile, without $PATH</li>
<li>Save this file to your Desktop as environment.plist</li>
</ul>

<p>Now do this in the console, we need to move that file to an invisible <code>.MacOSX</code> folder in your home directory. In all likelyhood this folder does not exists, nor does the environment.plist file inside of it, if so, please do your own work to make sure that you do not overwrite existing information. Now:</p>

<pre class="command">
mkdir ~/.MacOSX
mv ~/Desktop/environment.plist ~/.MacOSX
</pre>

<p>With the file in place, you now have to log out and back in. To be on the safe side, just reboot. Now your OSX apps, including TextMate and it's bundles will have the correct PATH information to get to your binaries. See below for an example of what my environment.plist file looks like. Note too that my full PATH info in that file is this string <code>/opt/local/bin:/opt/local/sbin:/opt/local/lib/mysql5/bin:/opt/local/apache2/bin</code>. Notice that path info after the apache2 path? This is where you should add the default path info for a Mac. Unlike the .bash_profile, you can not specify <code>$PATH</code> and have it expanded from within a plist file. So to be on the safe side, when I added this, I put the standard mac path info at the end of my own additions. That standard path info is <code>/usr/local/bin:/bin:/sbin:/usr/bin:/usr/sbin</code></p>



<div class="iecenter">
  <img src="http://www.metaskills.net/assets/2008/4/25/envplist.png" width="496" height="302" />
</div>







filename: 2008-05-12-my-projects.html
         title: My Projects
    categories: ["Projects"]
     disqus_id: /2008/5/12/my-projects
          body: 


<h2>Rails SQL Server 2000, 2005 &amp; 2008 Adapter</h2>

<p>
  The SQL Server adapter for rails is back for ActiveRecord 2.2 and up! We are currently passing all tests and hope to continue to do so moving forward. Includes tons of new features including unicode column support, pessimistic locking, date/time column casting, DDL transactions and way more.
</p>

<ul class="ml60 mr60">
  <li><a href="http://github.com/rails-sqlserver/2000-2005-adapter/tree/master" class="external-link">Rails SQL Server 2000, 2005 &amp; 2005 Adapter</a></li>
</ul>


<h2>NamedScope Plugin</h2>

<p>
  This one is for all those left behind on rails 2.0.4 or even gasp... rails 1.2.6. This is an incredibly well tested 
  backport of NamedScope. It even comes with those fancy .first, .last, and .all methods that can be used on classes 
  and associations. This can be incredible useful if you are looking to upgrade your app in a way that is forward  
  compatible.
</p>

<ul class="ml60 mr60">
  <li><a href="http://github.com/metaskills/named_scope/tree/master" class="external-link">NamedScope Plugin on Github</a></li>
</ul>


<h2>GroupedScope Plugin</h2>

<p>
  GroupedScope aims to make two things easier in your ActiveRecord models. First, provide a easy way to group objects, second, to allow the group to share associated object via existing has_many relationships. See installation and usage for more details.
</p>

<ul class="ml60 mr60">
  <li><a href="http://github.com/metaskills/grouped_scope/tree/master" class="external-link">GroupedScope Plugin on Github</a></li>
  <li><a href="http://www.metaskills.net/2008/9/28/jack-has_many-things">Jack has_many :things</a>, an article introducing GroupedScope.</li>
</ul>



<h2>Capistrano: Remote Shared Cache Strategy</h2>

<p>
  This class greatly speeds up deploy times to multiple hosts by only updating your latest source code to a 
  shared location accessible to all other servers. For instance, if you have 5 app servers in your cluster then 
  the code update only happens with the primary or first server while all others use the shared cache to copy 
  from. The remote shared cache can be updated by either a direct SCM export or a local export copy to target host.
  Notables on this project include:
</p>

<ul class="ml60 mr60">
  <li>An add_rollback method that takes a block of code that can be added to the task_call_frames stack of existing transactions. Allows transactions to be added within transactions.</li>
  <li>A primary_app_server method that finds the primary or first app server.</li>
  <li><a href="http://github.com/metaskills/remote_shared_cache/tree/master" class="external-link">http://github.com/metaskills/remote_shared_cache/tree/master</a></li>
</ul>



<h2>HomeMarks: Simple Bookmark Start Page</h2>

<p>
  HomeMarks was my first rails project when I was both learning to program in both Ruby and JavaScript. It allows you to 
  create a simple bookmark start page that organizes links into colored boxes sorted in columns. A common practice by all 
  web developers I knew, this time you do not have to code your own HTML.
</p>

<p>
  HomeMarks is undergoing a COMPLETE rewrite for the upcoming Rails 2.1 release. Hopefully it will be done by then but here 
  are a few features to look out for. Usage of the cookie store session Complete tests with foxy fixtures, the shoulda testing 
  plugin and mocha. Unobtrusive JavaScript, not one bit of <a href="http://en.wikipedia.org/wiki/Tag_soup" class="external-link">tag soup</a>.
  Developed on SQLite. Restful resources and authentication. And lastly a crazy new approach to lightweight controllers that 
  do no RJS, or anything associated with view code (all view dynamics are 100% client-side JavaScript). Keep an eye out on 
  my blog for articles as the rewrite progresses. You can track the rewrite on 
  <a href="http://github.com/metaskills/homemarks/tree/master" class="external-link">the github page</a>.
</p>


<h2>MetaTheme: Mephisto Theme</h2>

<p>
  The Meta theme was originally written for Drupal in late 2005 and converted to Mephisto in March 2008 for version 0.8, the 
  Drax Edition. The theme incorporates quite a few publishing conventions which are listed below:
</p>

<ul class="ml60 mr60">
  <li><a href="/meta-theme-for-mephisto" title="MetaTheme for Mephisto">General Information</a></li>
  <li><a href="/meta-theme-for-mephisto/css-conventions" title="CSS Conventions">CSS Conventions</a></li>
  <li><a href="/meta-theme-for-mephisto/photo-fancy-border-code-snippet-examples" title="Photo Fancy Borders">Photo Fancy Borders</a></li>
  <li><a href="/meta-theme-for-mephisto/png-support-for-ie6" title="PNG Support for IE6">PNG Support for IE6</a></li>
</ul>







filename: 2008-05-24-the-ajax-head-br-design-pattern.html
         title: The "AJAX Head" Design Pattern
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/5/24/the-ajax-head-br-design-pattern
          body: 


<div id="flash_indif" class="flash_message mt20 mb0">
  Chris Williams did a really great write up on this pattern with great details on when/how to use it. Please considering <a href="http://voodootikigod.com/ajax-head-design-pattern" class="exteranl-link">reading it</a> afterward.
</div>

<p>
  This is the first of a few articles covering the total rewrite of the <a href="http://homemarks.com/" class="external-link">HomeMarks.com</a> code base as I upgrade it to Rails 2.1. The "AJAX Head" pattern is the moniker I have assigned to methodology that has come about during said rewrite and the design decisions I choose early on. The rules were simple.
</p>

<ul class="mt20">
  <li>Total Unobtrusive JavaScript (<a href="http://en.wikipedia.org/wiki/Tag_soup" class="external-link">No Tag Soup</a>)</li>
  <li>No RJS Controller Responses</li>
</ul>

<p>
  Rails makes it very easy to generate JavaScript with Ruby. The generator methods are extensive and cover both the Prototype and Scriptaculous libraries. The first version of HomeMarks used the generators exclusively to augment both the views and controller responses. In fact, I used a technique that is covered in the latest <a href="http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes" class="external-link"><em>Advanced Rails Recipes</em></a> (way before it came out) under the "Replace In-View Raw JavaScript" chapter. Basically I created helper methods that generated JavaScript shared by both the views and controllers. It was a great technique but things <a href="http://github.com/metaskills/homemarks/tree/d33dab1405537db2d2dab86d79db415d9e7f56e5/app/helpers/application_helper.rb" class="external-link">got messy quick</a>. So life was good back then, I had a lot of Ruby code and a very dynamic site, but something did not seem right...
</p>

<h2>What Is The AJAX Head Pattern?</h2>

<p>
  It is an experiment into a vision to see what happens when you make the decision to totally go unobtrusive. Not just in your views but the controllers too! Imagine it this way &mdash; your controllers are <strong>slim APIs</strong>. They should do nothing but render a page on a GET request and when it comes to a POST/PUT/DELETE they should do nothing more than just say YES or NO (with errors).
</p>

<p>
  Now lets think about that. What does that mean for an application that uses exclusive AJAX calls for dynamic page updates? It means that your visual client (the browser) will need to know ALOT less from the controller about what to do. It's great, the browser knows what is on the page, from the GET request, and what it needs to do with it. The client only needs to tell the remote resource store what it did. In this pattern the controller is relegated to nothing more than acting on model data and letting the client know if it succeeded or failed. So in short.
</p>

<blockquote>
  <div>
    The AJAX head design pattern forces the view and controller to work in isolation with the most minimal coupling possible. Kind of like a web service.
  </div>
</blockquote>


<h2>Tools and Code Needed</h2>

<ul class="mt20">
  <li>A application that does just about everything with AJAX.</li>
  <li>Fluency with ActionController::Base#head method and HTTP status codes.</li>
  <li>Site-wide exception rescues for ActiveRecord::RecordInvalid.</li>
  <li>Global client-side AJAX request and response handlers.</li>
  <li>Global client-side error handlers.</li>
</ul>

<p>
  This may seem like a daunting list, but its pretty simple when you break it down. Let's do each one at at time with some of the current code from HomeMarks. The HomeMarks app is my first check on the list. When I did this app just about EVERYTHING was done via an AJAX call to update the page. Now on to the others.
</p>


<h2>2) Head And Status Codes</h2>

<p>
  The <a href="http://api.rubyonrails.com/classes/ActionController/Base.html#M000454" class="external-link">ActionController::Base#head</a> method and <a href="http://dev.rubyonrails.org/browser/trunk/actionpack/lib/action_controller/status_codes.rb" class="external-link">HTTP status codes</a> are the second item on the list. The head method is very useful when you just want to respond with HTTP headers and no body content. This is typical behavior when an app responds to external web services requests. This is important to note, I chose to rely on head responses as a way to meet my design decision of not using any RJS responses from the controller.
</p>
  
  
<p>
  The basic usage of the head method is simple, you just pass a symbol to the head method that is the lowercase underscore equivalent to an HTTP status code. For instance, if you wanted to respond with success, choose a status code from the 200 range, the easiest being 'OK', which would look like <code>head(:ok)</code>. If you wanted to respond to bad authentication, you might use the 401 code like so, <code>head(:unauthorized)</code>. Here is an example from HomeMarks restful user signup action.
</p>

<macro:code lang="ruby">
class UsersController < ApplicationController
  # ...
  def create
    User.create!(params[:user])
    head :ok
  end
  # ...
end
</macro:code>

<p>
  There is actually a number of things going on in those 2 lines of code above. If the user is created, the AJAX request will get a simple 'OK' message via the head method. Obviously the client will need to know what to do on its own. But if errors happen what to do? This brings us to...
</p>


<h2>3) Invalid Object Handling</h2>

<p>
  When Rails 2 came out, it gave us a very useful tool for our controllers, the <a href="http://api.rubyonrails.com/classes/ActionController/Rescue/ClassMethods.html" class="external-link">ActionController#rescue_from</a> method. It allows you to delegate exception handling to a method either per controller or site wide for a specific exception class. So enter the <a href="http://github.com/metaskills/homemarks/tree/master/lib/render_invalid_record.rb" class="external-link">RenderInvalidRecord</a> module, show below.
</p>

<macro:code lang="ruby">
module RenderInvalidRecord
  
  def self.included(base)
    base.rescue_from(ActiveRecord::RecordInvalid, :with => :render_invalid_record)
  end
  
  protected
  
  def render_invalid_record(exception)
    record = exception.record
    respond_to do |format|
      format.html { render :action => (record.new_record? ? 'new' : 'edit') }
      format.js   { render :json => record.errors.full_messages, :status => :unprocessable_entity, :content_type => 'application/json' }
      format.xml  { render :xml => record.errors.full_messages,  :status => :unprocessable_entity }
      format.json { render :json => record.errors.full_messages, :status => :unprocessable_entity }
    end
  end
  
end
</macro:code>

<p>
  Once included in your application.rb file, every ActiveRecord::RecordInvalid exception will be handled by the render_invalid_record method. I use this pattern often and it is the primary reason I always use the <strong>bang methods</strong> that end with an exclamation point, such as <code>create!</code> or <code>save!</code>. This module above was inspired by <a href="http://github.com/josh/" class="external-link">Joshua Peek's</a> own module of the same name but has been edited here to fit my needs. Both the "xml" and "html" response formats are not used by HomeMarks but are included here to show how this module can work for any request type.
</p>

<p>
  Now, how this fits into the AJAX Head pattern. The design decision of not having RJS responses means one of two things needs to come from the response. First, if the response is a success, meaning in the 200 range, then it is assumed that the client only needs to know that all is 'OK'. Second, if the request has errors, then the response needs to communicate them. I choose JSON for the format of these errors since all AJAX request objects from Prototype automatically include a <code>application/json</code> accept header. So that is why I changed both the "js" and the "json" response type in the RenderInvalidRecord module to both serialize the objects full error messages into a JSON array with an HTTP status code of 422 "Unprocessable Entity" which seemed to make the most sense to me. This pretty much wraps up the server side part of the pattern. Now onto the client side. Everything from here on is personal taste on how your client will react to an "good" or "bad" response object.
</p>


<h2>4) Client-Side AJAX Handlers</h2>

<p>
  I can not stress enough how much you have to bake your own functions to handle the client side reaction to both good and bad AJAX responses. The client's ability to know what to do with errors will be tightly coupled to AJAX handlers and the design choices of your site. In the examples below I have broken up methods in the same JavaScript classes to show you the parts for a specific behavior in a more concise manner. Also please note that I am using Prototype module and class organization heavily in HomeMarks. This allows me to build a Base JavaScript module and classes that mimic Rails models which inherit/mixin Base methods. I also use the Scriptaculous Builder class for creating DOM fragments too. Now back to business.
</p>

<p>
  <a href="http://metaskills.net/files/homemarksv2/signup.html" rel="lyteframe" title="HomeMarks v2 Signup" rev="width: 617px; height: 477px; scrolling: no;"><img src="http://metaskills.net/files/homemarksv2/preview_signup2.png" width="246" height="251" class="floatr"></a>The first part of the AJAX head pattern was to use unobtrusive JavaScript. Because of this design choice, there are no <code>remote_form_for</code> methods in the HomeMarks view code. All forms are simple <code>form_for</code> methods. Below is a sample of the HomeMarksSite JavaScript class that creates AJAX handlers for all site forms. The below example is slimmed down to only show the initialization of this behavior for the signup form. But no matter which form is given this behavior the process is the same.
</p>

<ul>
  <li>The form's submit event is handled by <code>startAjaxForm()</code>. It does the following:</li>
    <ul>
      <li>Stops the normal submit behavior.</li>
      <li>Adds a loading spinner in the #form_loading span.</li>
      <li>Creates a new AJAX.Request using the forms own action. It also binds a function to delegate the logic of completing the form when the request is finished. More on that later in #2 below.</li>
      <li>Finally it disables the form.</li>
    </ul>
  <li>Once a response comes back from the server, the <code>delegateCompleteAjaxForm()</code> function will be called with both the form object and the AJAX request object. The logic of this function includes:</li>
  <ul>
    <li>Figuring out the "mood" of the request using getRequestMood() function which is part of my base module.</li>
    <li>Sends the form and mood to the <code>completeAjaxForm()</code> function. This function will replace the loading spinner with an image that reflects a good or bad response.</li>
    <li>If the mood is good, meaning the response status code was within a 200 range, then the function will delegate to a function specific for that forms success using a simple case statement.</li>
    <li>If this mood is bad, meaning the response status code not within a 200 range, the form will be enabled and the response JSON errors will be displayed. Currently I am using a modal class for this. Again more on that later. You may also note that my base module has a function called <code>messagesToList()</code> that process the response into a DOM &lt;ul&gt; list.</li>
  </ul>
</ul>

<macro:code lang="javascript">
var HomeMarksBase = {
  getRequestMood: function(request) {
    return (request.status >= 200 && request.status < 300) ? 'good' : 'bad';
  },
  messagesToList: function(request) {
    var messages = request.responseJSON;
    var messageList = UL();
    messages.each(function(message){ 
      messageList.appendChild( LI(message.escapeHTML()) );
    });
    return messageList;
  }
};
var HomeMarksSite = Class.create(HomeMarksBase,{ 
  initialize: function() {
    this.signupForm = $('signup_form');
    this.initEvents();
  },
  startAjaxForm: function(event) {
    event.stop();
    var form = event.findElement('form');
    var options = Object.extend({imgSrc:'loading_invert.gif'}, arguments[1] || {});
    var loadArea = form.down('#form_loading');
    var imgTag = IMG({src:('/images/'+options.imgSrc)});
    $(loadArea).update(imgTag);
    new Ajax.Request(form.action,{
      onComplete: function(request){ this.delegateCompleteAjaxForm(form,request) }.bind(this),
      parameters: form.serialize(true)
    });
    form.disable();
  },
  delegateCompleteAjaxForm: function(form,request) {
    var mood = this.getRequestMood(request);
    this.completeAjaxForm(form,{mood:mood});
    if (mood == 'good') { 
      switch (form) { 
        case this.supportForm : this.completeSupportForm(request); break;
      }
    }
    else { 
      form.enable();
      if (!request.responseText.blank()) {
        var flashHTML = DIV([H2('Errors On Form!'),this.messagesToList(request)]);
        this.flashModal('bad',flashHTML);
      };
    };
  },
  completeAjaxForm: function(form) {
    var options = Object.extend({mood:'good'}, arguments[1] || {});
    var loadArea = form.down('#form_loading');
    var completeId = 'complete_ajax_form_' + form.id;
    var imgSrc = '/images/'+options.mood+'.png';
    var moodHtml = SPAN({id:completeId,className:'m0 p0'}, [IMG({src:imgSrc})]);
    $(loadArea).update(moodHtml);
    setTimeout(function() { $(completeId).fade(); },3000);
  },
  completeSignupForm: function(request) {
    var message = "Thank your for signing up for your own HomeMarks page. An email has been sent to " +
      "your address along with a link to activate your account. If you have not done so already, please " +
      "take a moment to read the HomeMarks documentation.";
    var flashHTML = DIV([H2('Signup Complete:'),P(message)]);
    this.flash('good',flashHTML);
  },
  initEvents: function() {
    if (this.signupForm) { this.signupForm.observe('submit', this.startAjaxForm.bindAsEventListener(this)); };
  }
});
</macro:code>


<h2>5) Client-Side Error Handling</h2>

<p>
  Currently I have 3 client-side options that I can use to present errors back to the user from the JSON array in AJAX response. The first I started out with was using the <code>alert()</code> function. That got boring real quick, but I left my implementation below which is part of the base class, called <code>messagesToAlert()</code>.
</p>

<p>
  The second slightly more interesting way was to create a flash message that used the same XHTML/CSS already present in my layout file. This was real easy to implement. Basically using the ERB fragment below in my layout, I guaranteed that I had 3 unique DOM elements for each of my flash message styles, good/bad/indif. Now all I had to do was to create an accessor in my HomeMarksSite class. I choose <code>this.flashes</code>. I then created a <code>clearFlashes()</code> function and then a <code>flash()</code> function that would take the mood and the HTML to embed, viola â€“ I can now call <code>this.flash.('good',someHTML)</code> and I get the same type of flash one would have seen if I set it in the controller and rendered. Note, this is what I used on the the signup form success above.
</p>

<macro:code lang="ruby">
<% [:good,:bad,:indif].each do |key| %>
  <div id="flash_<%= key %>" class="flash_message" style="display:<%= flash[key].blank? ? 'none' : 'block' %>;">
	  <span><%= flash[key] %></span>
	</div>
<% end %>
</macro:code>
<br />

<macro:code lang="javascript">
var HomeMarksBase = {
  messagesToAlert: function(request) {
    var messages = request.responseJSON;
    var alertText = messages.join(".\n");
    if (alertText.endsWith('.')) { alert(alertText); } else { alert(alertText+'.'); };
  },
  messagesToList: function(request) {
    var messages = request.responseJSON;
    var messageList = UL();
    messages.each(function(message){ 
      messageList.appendChild( LI(message.escapeHTML()) );
    });
    return messageList;
  }
};
var HomeMarksSite = Class.create(HomeMarksBase,{ 
  initialize: function() {
    this.flashes = $$('div.flash_message');
  },
  clearFlashes: function() {
    this.flashes.invoke('hide');
    this.flashes.invoke('update','');
  },
  flash: function(mood,html) {
    this.clearFlashes();
    var moodFlash = this.flashes.find(function(e){ if (e.id == 'flash_'+mood) {return true}; });
    moodFlash.update(html);
    moodFlash.show();
    $('site_wrapper').scrollTo();
  }
});
</macro:code>

<p>
  <a href="http://metaskills.net/files/homemarksv2/login.html" rel="lyteframe" title="HomeMarks v2 Login" rev="width: 617px; height: 477px; scrolling: no;"><img src="http://metaskills.net/files/homemarksv2/preview_login2.png" width="246" height="251" class="floatr"></a>Lastly, and probably the coolest, is the HomeMarksModal JavaScript class I created. This is my new default way of errors to a user. It can be seen in all my video examples on this page. To the right is another example of the login form that uses the same handlers described above. The HomeMarksModal JavaScript class is a bit large to paste inline in this article, but if you want to see the latest version, you can always get it <a href="http://github.com/metaskills/homemarks/tree/master/public/javascripts/homemarks/modal.js" class="external-link">from the master branch of the homemarks_core project</a> on Github.com. When you bind an instance of this object to the window/document, it will automatically crate the modal HTML using Builder. If you want to use it, make sure to get the CSS and images the project too. Below is a function that I put in my site class that allows me to call <code>this.flashModal('good',someHTML))</code>.
</p>

<macro:code lang="javascript">
var HomeMarksSite = Class.create(HomeMarksBase,{ 
  flashModal: function(mood,html) {
    var moodColor = this.flashMoodColors.get(mood);
    HmModal.show(html,{color:moodColor});
  }
});
</macro:code>


<h2>Wrapping It Up</h2>

<p>
  This article turned out a lot longer than I had wanted. The AJAX head pattern is pretty simple and it is really fun to see a two line user signup action yield such interactive results. Something also feels good about not putting view code in the controller, yes you can look at inline RJS as view code. Sure it requires that you do a lot more JS work, but there are benefits.
</p>

<p>
  Image you have team of programmers, one person can stay in model/controller land while the other stays on the view/javascript. The model/controller person would write their own tests (PLEASE TAKE A LOOK AT MINE), while the view/javascript person might even take the initiative to use selenium to test the JavaScript. At the time of this writing, I have not done any selenium tests since the plugin for rails is not compatible for 2.0. That last benefit I could think of for this design pattern is that you could easily update view code without restarting your rails app. Just update the JavaScripts and your good to go.
</p>

<p>
  In closing, please let me know what you think. Perhaps you have a better name for the design pattern? Perhaps someone else has a name for it already?
</p>



<h2>Resources</h2>

<ul class="mt20">
  <li>Original <a href="http://github.com/metaskills/homemarks/tree/d33dab1405537db2d2dab86d79db415d9e7f56e5/app/helpers/application_helper.rb" class="external-link">application_helper.rb</a> from HomeMarks v1. An overboard example of shared view/controller tagsoup/rjs.</li>
  <li>The latest <a href="http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes" class="external-link"><em>Advanced Rails Recipes</em></a> book. See the chapter on "Replace In-View Raw JavaScript". I discourage this technique used in mass.</li>
  <li>Rails API for the <a href="http://api.rubyonrails.com/classes/ActionController/Base.html#M000454" class="external-link">ActionController::Base#head</a> method.</li>
  <li>Rails API for the <a href="http://dev.rubyonrails.org/browser/trunk/actionpack/lib/action_controller/status_codes.rb" class="external-link">HTTP status codes</a>.</li>
  <li>Rails API for the <a href="http://api.rubyonrails.com/classes/ActionController/Rescue/ClassMethods.html" class="external-link">ActionController#rescue_from</a> method.</li>
  <li>The latest <a href="http://github.com/metaskills/homemarks/tree/master/lib/render_invalid_record.rb" class="external-link">RenderInvalidRecord</a> module from the HomeMarks core.</li>
  <li>The latest  <a href="http://github.com/metaskills/homemarks/tree/master/public/javascripts/homemarks/modal.js" class="external-link">HomeMarksModal</a> JavaScript class from the HomeMarks core.</li>
</ul>








filename: 2008-05-30-coulda-shoulda-woulda.html
         title: Coulda Shoulda Woulda
    categories: ["Heuristics", "Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2008/5/30/coulda-shoulda-woulda
          body: 


<p>
  It has been about 6 months now since I started using the <a href="http://www.thoughtbot.com/projects/shoulda" class="external-link">Shoulda</a> testing plugin as my BDD/TDD tool of choice. Unlike a lot of other people, I did not flock to the RSpec bandwaggon. Personally I think RSpec is horribly bloated a sledgehammer for a simple issue, the need to have test code organized with nested setups and context blocks.
</p>

<p>
  If you are new to Shoulda, I highly urge you to take a look at the <a href="http://www.thoughtbot.com/projects/shoulda" class="external-link">Thoughbot project page</a> for it. If you have the time take a look at some of their other projects, like Paperclip. These guys are really smart. If you really want to see how shoulda can sing, check out <a href="http://mwrc2008.confreaks.com/12saleh.html" class="external-link">Tammer Saleh's presentation of it at the MountainWest RubyConf 2008</a>. In that presentation he covers how you can extend Shoulda and write your own macros that generate additional tests. This is what my blog post is about.
</p>


<h2>Sample Shoulda Macro For Functional Require Login</h2>

<p>
  Here is a simple module that you might find for any restful authentication system. This would be included in your main <code>test_helper.rb</code> file where it would add the normal login_as(user) method. The good part I want to point out is the <code>should_require_login(*actions)</code> macro method that shows off a neat example of how you could use Shoulda in your functional tests at the class level.
</p>

<macro:code lang="ruby">
module AuthSystem
  module TestHelper
    
    def self.included(receiver)
      receiver.extend ClassMethods
      receiver.send :include, InstanceMethods
    end
    
    module ClassMethods
      
      def should_require_login(*actions)
        actions.each do |action|
          should "Require login for '#{action}' action" do
            get(action)
            assert_redirected_to(login_url)
          end
        end
      end
      
    end
    
    module InstanceMethods
      
      def login_as(user)
        if u = users(user)
          @request.session[:user_id] = u.id
        end
      end
      
    end
    
  end
end
</macro:code>

<p>
  Here is how it would look in the controller functional test. These are all contrived examples, but I think it illustrates how Shoulda can be used and in general how you can make your own macros that test at a higher level.
</p>

<macro:code lang="ruby">
class UsersControllerTest < ActionController::TestCase
  
  should_require_login :edit, :update, :etc
  
end
</macro:code>






filename: 2008-06-18-restful-ajax-with-forgery-protection.html
         title: RESTful AJAX with Forgery Protection
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/6/18/restful-ajax-with-forgery-protection
          body: 


<p>
  Writing the new <a href="http://www.homemarks.com/" class="external-link">HomeMarks</a> has been a great exercise. I've learned that the <a href="/2008/5/24/the-ajax-head-br-design-pattern"><em>AJAX Head <strike>Design Pattern</strike> Implementation</em></a> is more akin to developing a service-oriented application (SOA) since I have moved all client-side coupling from the controllers, like RJS, and only respond with HEAD or JSON data. Today I learned about <a href="http://halcyon.rubyforge.org/" class="external-link">Halcyon</a> which is self described as a JSON web application framework built on Rack. If you take a look at their example, it looks a lot like HomeMarks v2, pretty cool!
</p>

<h3>Getting To The Point</h3>

<p>
  Last week I finally got around to doing the controller CRUD for the user's column objects. The core <code>homemarks/app.js</code> JavaScript class contains the one (and only one) AJAX dispatcher/handler for the entire application. One problem that I ran into was how to continue to use forgery protection in rails to protect from CSRF attacks while relying solely on ad-hoc JavaScript requests to a RESTful back-end. I could have turned off <a href="http://api.rubyonrails.com/classes/ActionController/RequestForgeryProtection/ClassMethods.html#M000300" class="external-link"><code>protect_from_forgery</code></a> but that did not feel right. I wanted RESTful AJAX with forgery protection.
</p>

<h3>My Solution</h3>

<p>
  Since the HomeMarks v2 app has one AJAX dispatcher/handler for the entire app, all I had to do was to get the authenticity token into each and every request. It took a bit of digging in the rails source to find the methods I wanted but here both the ERB snippet I am using in my layout and the helper method found in my <code>application_helper.rb</code> file.
</p>

<macro:code lang="html">
<script type="text/javascript">
  <%= auth_params_js_var %>
</script>
</macro:code>

<macro:code lang="ruby">
def auth_params_js_var
  unless RAILS_ENV == 'test'
    %|var authParams = $H({#{request_forgery_protection_token}:#{form_authenticity_token.inspect}});|
  end
end
</macro:code>

<p>
  What does this do? It creates a JS variable called <code>authParams</code> at the window level (right term?) that all other functions can use. That variable returns a JavaScript hash that will have a single key/value pair for the rails authenticity token, see below. Basically at this point all you have to do is merge this hash with your <code>parameters</code> option for your AJAX object. You can reference the HomeMarks app.js file in the resources section if you want to see how I did this on my app, code snippet below too.
</p>

<macro:code lang="javascript">
  doAjaxRequest: function(elmnt,finishMethod) {
    // ...
    var method = elmnt.method || 'post';
    new Ajax.Request(elmnt.action,{
      onComplete: function(request){
        this.completeAjaxRequest(request);
        if (finishMethod) { finishMethod.call(this,request) };
      }.bind(this),
      parameters: parameters.merge(authParams),
      method: method
    });
  }
</macro:code>



<h2>Resources</h2>

<ul class="mt20">
  <li>The Latest HomeMarks <a href="http://github.com/metaskills/homemarks/tree/master/public/javascripts/homemarks/app.js" class="external-link">app.js</a> Class. See doAjaxRequest() function.</li>
</ul>






filename: 2008-07-06-stop-exception-notifications-with-the-zombieshotgun.html
         title: Stop Exception Notifications With The ZombieShotgun
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/7/6/stop-exception-notifications-with-the-zombieshotgun
          body: 


<div class="photobounding floatl mr20" style="width:348px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2008/7/6/zombie_shotgun.jpg" alt="Resident Evil Zombie Shotgun" width="320" height="213" />
  </div>
</div>

<p>
  I am all about knowing how to survive a zombie invasion â€“ as much as I am a firm believer of using the right tool for a given job. It can not be argued that killing zombies with a shotgun to the head is as natural a fit as peanut butter to chocolate. They simply just go together. 
</p>

<p>
  Now real zombies may not be a daily nuisance, but 
  <a href="http://en.wikipedia.org/wiki/Zombie_computer" class="external-link">computer zombies</a> 
  are a daily pain in the butt to network administrators as well as software engineers alike. If you have 
  ever deployed a rails application into production that used some sort of exception notification, 
  then you may at some time seen some zombie attacks throw a bunch of exceptions. My solution a few 
  years back was to build my own ZombieShotgun module, see below.
</p>

<p>
  The idea is simple, include the module and add this line to the very top of your filter chain 
  <code>before_filter :shoot_zombies</code>. Just like in real life, if rails detects a zombie attack, 
  it will issue a 404 not found error in the beautiful rails syntax <code>head :not_found</code>.
  I love it when code models the real world! Please note that there are a ton of better ways to 
  accomplish user agent filtering, most notably, in your web server config... but that does not mean 
  this is not a fun module to use.
</p>


<macro:code lang="ruby">
module ZombieShotgun
  
  ZOMBIE_AGENTS       = ['Microsoft Office Protocol Discovery','Microsoft Data Access Internet Publishing Provider Protocol Discovery','FrontPage']
  ZOMBIE_ATTACK_DIRS  = ['_vti_bin','MSOffice','verify-VCNstrict','notified-VCNstrict']
  
  protected
  
  def shoot_zombies
    head :not_found if zombie_attack?
  end
  
  def zombie_attack?
    zombie_attack_on_directory? || zombie_agent_attack?
  end
  
  def zombie_attack_on_directory?
    attack = request.path.from(1)
    attack_dir = attack.index('/').nil? ? attack : attack.to(attack.index('/')-1)    
    ZOMBIE_ATTACK_DIRS.include?(attack_dir)
  end
  
  def zombie_agent_attack?
    ua = request.env['HTTP_USER_AGENT']
    !ua.blank? && ZOMBIE_AGENTS.any? { |za| za =~ /#{ua}/ }
  end
  
  
end
</macro:code>



filename: 2008-08-18-in-hell-oo-for-homemarks.html
         title: Hell'OO HomeMarks
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/8/18/in-hell-oo-for-homemarks
          body: 


<p>
  Well HomeMarks v2.0 is done and ready for the public. You can download it from my 
  <a href="http://github.com/metaskills/homemarks/tree/master" class="external-link">Github project</a> page. It has a real simple <code>rake app:bootstrap</code> 
  task that I came up with over the weekend will have you running a local copy in only a few seconds, give it a try. Sometime 
  over the next few days, I'll move over the live site to this code base too. If you have not yet kept up on the implementation 
  mantra I set down for the HomeMarks v2 project, you might want to <a href="/2008/5/24/the-ajax-head-br-design-pattern">read an older post</a> 
  as well as this excerpt from the project README.
</p>

<blockquote>
  <div>
    HomeMarks was built using the Ruby on Rails framework with a heavy emphasis on object 
    oriented JavaScript to make AJAX requests to a RESTful back-end. Unlike most Rails 
    applications it does not use any inline JavaScript helpers nor does it rely on RJS 
    (Remote JavaScript) for dynamic page updates. Instead it is nearly 100% unobtrusive 
    JavaScript which uses simple HEAD or JSON responses to communicate to the objects on 
    the page. This has yielded very slim controller code which is decoupled from the 
    views and easily testable in isolation at a functional level.
  </div>
</blockquote>

<p>
  So what do I think of this implementation and writing all this object oriented JavaScript? Well â€“ its been real hard, I've been in 
  JS Hell-OO for the better part of a few weeks as I came closer to finishing the project. Coming from a self inflicted addiction
  to unit/functional testing in rails, it is very hard to get into the habit of opening the browser to test view code. A big part of 
  me hates writing all this JS without one bit of unit testing. I've heard that Prototype v2 will have unit testing, that would be awesome! 
</p>

<div class="photobounding floatl mr20" style="width:412px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2008/8/18/oojs.gif" alt="Hell'oo for HomeMarks" width="384" height="237" />
  </div>
</div>

<p>
  So, bitching aside, I am very happy that my JS-fu is stronger. The end result besides all those buckets of water up the hill is that 
  I can now really appreciate the ruby object model and how prototype strives to make JS class construction follow its example. Kudos 
  really goes to Sam Stephenson for bridging the two object models. As I learned more about how prototype's classes work, I actually 
  learned quite a bit about ruby too. Using that knowledge I gave a talk at the 
  <a href="http://757rb.org/" class="external-link">Hampton Roads Ruby Users Group (757rb)</a> on the topic. You can download the PDF 
  version of the slides <a href="http://groups.google.com/group/757rb/files"> from the files section of the Google group</a> page. 
  Look for the file titled <em>OO JavaScript Class Construction</em>
</p>




filename: 2008-09-14-going-horizontal-on-the-multicade.html
         title: Going Horizontal On The Multicade
    categories: ["Home", "Lifestyle"]
     disqus_id: /2008/9/14/going-horizontal-on-the-multicade
          body: 


<p>

<div class="photobounding floatl mr20" style="width:304px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2008/9/14/multicade.jpg" alt="New multicade front view." width="276" height="333" />
  </div>
</div>

  A few months ago I "invested" in a upright Galaga multicade. This is no costly refurb/restoration unit, but rather a customized new build 
  from a great company called <a href="http://www.arcadeshop.com/" class="external-link">Arcadeshop Amusement</a>. This place does two great 
  things. First they will manufacturer/build you a new cabinet of your liking with all the parts professionally installed. This includes 
  the display, <a href="http://en.wikipedia.org/wiki/Jamma" class="external-link">JAMMA</a> harness, coin door assembly, control panel, and 
  all artwork. I chose a classic Galaga/Ms.Pacman/Midway cabinet with a 19" CRT display. My only deviation from the Galaga theme was a 
  multicade control panel that had a 4-way joystick and two buttons for the left or right handed.
</p>

<p>
  The second thing about this great company is that sell one of the coolest <a href="http://www.arcadeshop.com/multi-pcb/multi-pcb.htm" class="external-link">Multicade JAMMA PCBs</a> I have seen. This board is programmable with a standard serial cable to run game ROM's in their 
  approved list and that included such greats that I wanted like Galaga, Donkey Kong, Ms.Pacman, and Phoenix. For the record... I am not going 
  after <a href="http://en.wikipedia.org/wiki/Billy_Mitchell_(gamer)" class="external-link">Billy Mitchell's</a> record. I just wanted a nice 
  low-tech diversion :)
</p>

<p>
  So these games held me over for a time, but I really wanted to be a bit more flexible with the option to play some horizontal games. 
  To that end, I invited my friend and fellow 757.rb'er Geoff Parsons over to help me rotate my CRT. Before we got to that jun part, I had to 
  manufacture my own horizontal cross members to hold the display. Thankfully a trip to LOWES steel part section and a new hack saw yielded a 
  very decent support system, see here. The icing on the cake after we remounted the CRT was to replace the 4-way joystick with a new 
  <a href="http://www.happcontrols.com/joysticks/super_joy.htm" class="external-link">4/8-way super stick from HAPP Controls</a>, a new 
  <a href="http://www.lizardlickamusements.com/pages/boards.shtml" class="external-link">19-in-one JAMMA PCB</a> from Lizard Lick, and a 
  new monitor bezel for the horizontal display. Now with this PCB, I am enjoying games like Super Mario Bros, Gradius, and Defender.
</p>

<div class="photobounding floatr ml20" style="width:412px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2008/9/14/multicade_horiz.jpg" alt="New horizontal mounts for the multicade." width="385" height="298" />
  </div>
</div>

<p>
  For those that may ask, why did I not go with some sort of MAME system. Sometimes options are good... but too many are distracting. 
  I really like the idea of having as much as my multicade mimic the old arcade cabinet as possible, and hacking on another computer to 
  do that was not in the cards. I love just slapping in a JAMMA board and having the set of games I like. Low-tech fun!
</p>



filename: 2008-09-19-using-autotest-for-rails-plugin-development.html
         title: Using Autotest For Rails Plugin Development
    categories: ["Heuristics", "Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2008/9/19/using-autotest-for-rails-plugin-development
          body: 


<p>
  I love <a href="http://www.zenspider.com/ZSS/Products/ZenTest/" class="external-link">autotest</a>. I have event posted before how to 
  extend the idea of <a href="/2008/4/6/autotest-playlist-for-red-green-feedback">autotest sounds to a red/green playlist</a> but now that 
  I am taking more time to extract some of my work to plugins, I really wanted autotest to come with me. The problem is that the default 
  autotest mappings do not play with rails conventions, the biggest being that test files for a lib match the name of the lib with 
  <code>_test.rb</code> at the END of the filename.
</p>

<p>
  Today I posted a new project to my Github account, called 
  <a href="http://github.com/metaskills/autotest_railsplugin/tree/master" class="external-link">Autotest::Railsplugin</a>. This project 
  should be a great start for fleshing out all the typical mappings, ignore, libs, etc. that autotest needs to know about when developing 
  a rails plugin. I invite you to download it and give it a try and provide feedback on missing details.
</p>


<h2>To Install</h2>

<ul>
  <li><a href="http://github.com/metaskills/autotest_railsplugin/tree/master" class="external-link">Download</a></li>
  <li>Rename the directory to "autotest"</li>
  <li>Place inside of your pluginâ€™s root directory.</li>
  <li>From your plugin root, you can now use autotest.</li>
</ul>

<pre class="command">
$ autotest
  loading autotest/railsplugin
</pre>

<p>
  By default, autotest will scan your present working directory for an autotest folder that has a discover.rb in it. So it should find and 
  display the <code>loading autotest/railsplugin</code> which means it found the plugin class just fine. If this is not the case make sure 
  you have the directory named correctly. If you have a conflicting autotest directory for some reason you can always force the plugin class, 
  again assuming you have it in the right, place using:
</p>

<pre class="command">
$ autotest -railsplugin
</pre>


<h2>Resources</h2>

<ul>
  <li><a href="http://github.com/metaskills/autotest_railsplugin/tree/master" class="external-link">The New Autotest::Railsplugin on Github</a></li>
  <li><a href="http://www.zenspider.com/ZSS/Products/ZenTest/">The Official ZenTest/AutoTest Site</a></li>
  <li><a href="/2008/4/6/autotest-playlist-for-red-green-feedback">Autotest Playlist For Red/Green Feedback</a></li>
  <li><a href="http://www.fozworks.com/2007/7/28/autotest-sound-effects/" class="external-link">Autotest Sound Idea from Jeremy Seitz @ FozWorks</a></li>
</ul>




filename: 2008-09-28-jack-has_many-things.html
         title: Jack has_many :things
    categories: ["Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/9/28/jack-has_many-things
          body: 


<div class="photobounding floatl mr20" style="width:348px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2008/9/28/jack.jpg" alt="Jack Has Many Things" width="320" height="214" />
  </div>
</div>

<p>
  I am Jack's sofa, stereo and wardrobe... I make Jack's life complete. I reside in a ActiveRecord table called "things" and Jack is the only one that has the key. This is Jack's life, and it's ending one minute at a time.
</p>
  
<p>
  As rails developers, we have done this simple relationship over and over again. I'm sure the has_many association is by far the most common in app/db design. It gives a single resource quick and easy access to others, but as your application grows, and depression sets in, we have to open up.
</p>




<h2>It's cheaper than a movie, and there's free coffee.</h2>

<div class="photobounding floatr ml10" style="width:176px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2008/9/28/bob.jpg" alt="Jack With Bob" width="148" height="174" />
  </div>
</div>

<p>
  I am talking about groups. Not the underground ones that carve us out of wood, but ones where we share with those around us. This is healing. The time has come to for our objects to do the same, but how?
</p>

<p>
  The problem is that the ActiveRecord has_many association is scoped to an individual. No matter what conditions are tacked on, they are always <a href="http://en.wikipedia.org/wiki/Pwn" class="external-link">pwned</a> by the proxy owner. The things they own have ended up owning you! Sure we could model some groupable schema and go through it, ActiveRecord is beautiful that way. But what about our hard work in all those existing has_many associations and named_scopes? 
</p>





<h2>I felt like destroying something beautiful.</h2>

<p>
  The solution is on everyone's face, it is on the tip of everyone's tongue. I just gave it a name. It is called <a href="http://github.com/metaskills/grouped_scope/tree/master" class="external-link">GroupedScope</a> and it will fundamentally change the constructed SQL for the has_many associations you want to share. The best part is that it will leave those associations untouched for continued use. GroupedScope even works with your existing association extensions and any named scopes. Let's have a session.
</p> 

<p>First we need to install the plugin.</p>

<pre class="command">
./script/plugin install git://github.com/metaskills/grouped_scope.git
</pre>

<p>Now let's open up our Person model and schema, so Jack can share.</p>

<macro:code lang="ruby">
class PeopleCanChooseAGroup < ActiveRecord::Migration
  def self.up
    add_column :people, :group_id, :integer
  end
  def self.down
    remove_column :people, :group_id
  end
end
</macro:code>

<macro:code lang="ruby">
class Person < ActiveRecord::Base
  has_many :things
  has_many :acquaintances
  has_many :problems
  grouped_scope :things, :problems
end

@jack = Person.find_by_name('Jack')
@bob  = Person.find_by_name('Bob')

@jack.update_attribute :group_id, 1
@bob.update_attribute :group_id, 1
</macro:code>

<p>
  Every Person object in our app is now ready to share their :things and their :problems. I have also just arbitrarily put Jack and Bob into the same group. Declaring <code>grouped_scope</code> in the model generates a new <code>group</code> instance method that will allow us to iterate over its members.
</p>

<macro:code lang="ruby">
@jack.group   # => [#<Person id: 1, name: "Jack", group_id: 1>, #<Person id: 2, name: "Bob", group_id: 1>]
</macro:code>





<h2>We all started seeing things differently.</h2>

<p>
  The object returned by the group method, an instance of GroupedScope::SelfGrouping, is far cooler than you think. It looks and acts as an enumerable array, but in reality it is a proxy object that can delegate to generated grouped association reflections which mimic their originals. Essentially giving the group access to all associated objects of its members, in this case their :things and :problems. Did I loose you? 
</p>

<macro:code lang="ruby">
@jack.problems.size   # => 6
@bob.problems.size    # => 2

@bob.group.problems        # => [#<Problem...>,#<Problem...>,#<Problem...>,#<Problem...>,....]
@bob.group.problems.size   # => 8
@jack.group.problems.size  # => 8
</macro:code>

<p>
  Without going into the detail of Jack's and Bob's problems, we can see that within the group, they are all shared. This is what the GroupedScope plugin is really all about. It allows existing has_many associations to be called on the group which changes the SQL generated to be owned by the group, essentially from <code>id = 1</code> to <code>id IN (1,2)</code>.
</p>

<p>
  The way it accomplishes this is pretty sweet. GroupedScope creates an association reflection and accessor that will proxy all critical reflection calls back to the original association reflection. This means that it can be really smart and maintain all the logic in the existing association which could include custom options like :class_name, :foreign_key, :though, and :extend, very handy for legacy/custom associations. It also lets you chain named scopes on the grouped scope. Here is very contrived example:
</p>

<macro:code lang="ruby">
class Person < ActiveRecord::Base
  has_many :mental_issues, :class_name => "MentalState", :foreign_key => :name do
    def dangerous
      find :all, :conditions => {:snap_tolerance => 10}
    end
  end
  grouped_scope :mental_issues
end

class MentalState < ActiveRecord::Base
  named_scope :treatable_by, lambda { |doctor| 
    {:conditions => {:doctor_id => doctor.id}}
  }
end

@jack.group.mental_issues.dangerous.treatable_by(@doctor) # => [#<MentalState...>,#<MentalState...>]
</macro:code>



<h2>This is probably one of those "cry for help" things.</h2>

<div class="photobounding floatr ml10" style="width:348px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2008/9/28/marla.jpg" alt="Marla" width="320" height="214" />
  </div>
</div>

<p>
  The GroupedScope plugin is not done. It is however well tested and can do what I have outlined in both rails 1.2.6 and 2.1.1. I have marked some TODO's in the project README but I thought I would cover a few here in detail.
</p>

<p>
  First, every model that declares <code>grouped_scope</code> also generates a <code>belongs_to :grouping</code> association that can be used to get to the GroupedScope::Grouping object. This object has no underlying schema and is not being used right now. Eventually this will be the place where you write your own <a href="http://errtheblog.com/posts/67-evil-twin-plugin" class="external-link">evil twin plugin</a> that defines your business logic to what a group (not the selfgrouping proxy) can do. For now, it would be a good idea to generate a "groupings" table and create rows and use those IDs when assigning group_ids.
</p>

<p>
  Also, you may have noticed that GroupedScope focuses on a single group and that no single owner can essentially have many groups. I think at some point I might like to see this and work like all the examples above. Have other ideas? Send me an email. I'm ken at this domain dot com.
</p>



<h2>I'd like to thank the Academy.</h2>

<ul>
  <li><a href="http://github.com/metaskills/grouped_scope/tree/master" class="external-link">The GroupedScope plugin on my Github account.</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Fight_Club" class="external-link">About the movie Fight Club.</a></li>
</ul>



filename: 2008-10-11-plug-it-in-plug-it-in.html
         title: Plug It In Plug It In
    categories: ["Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/10/11/plug-it-in-plug-it-in
          body: 


<p>
  <img src="http://www.metaskills.net/assets/2008/10/11/plugitin.png" alt="Jack Has Many Things" width="285" height="403" class="floatr" />
  I've been busy putting together some plugins form misc work. If you did not catch my latest article <em><a href="http://www.metaskills.net/2008/9/28/jack-has_many-things">Jack has_many :things</a></em> where I covered GroupeScope, by all means check it out. I've also just finished up a pretty solid backport of NamedScope that can be found on my Github page. It bills itself as a well tested complete back port for rails 1.2.6 and 2.0.4.
</p>

<p>One thing that has been a real help while I've been developing these plugins is this autotest class I put together specifically for developing rails plugins. I even got mention on rubyonrails.org. Sweet! More to come.
</p>

<h2>Resources</h2>

<ul class="mt20">
  <li><a href="http://github.com/metaskills/named_scope/tree/master" class="external-link">The NamedScope plugin.</a></li>
  <li><a href="http://github.com/metaskills/grouped_scope/tree/master" class="external-link">The GroupedScope plugin.</a></li>
  <li><a href="http://github.com/metaskills/autotest_railsplugin/tree/master" class="external-link">The RailsPlugin class for Autotest.</a></li>
  <li><a href="http://www.artlebedev.com/everything/vilcus/" class="external-link">Vilcus plug dactyloadapter</a>. Developed specially for people who enjoy closing electrical circuits with their own fingers.</li>
</ul>



filename: 2008-10-13-code-o-lanterns-what-scares-you.html
         title: Code-O-Lanterns: What Scares You?
    categories: ["Apple/OSX", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/10/13/code-o-lanterns-what-scares-you
          body: 


<img src="/assets/2008/10/13/php_lantern.png" class="floatr" width="253" height="228" />

<p>
  While reading the <a href="http://tuaw.com/" class="external-link">The Unofficial Apple Weblog</a> today I noticed this sweet little 
  <a href="http://www.killerrobots.com/screensavers/" class="external link">Jack-O-Lantern screensaver</a> for OS X. After some feedback on 
  the <a href="http://757rb.org/" class="external-link">757.rb</a> group, I decided to make some Code-O-Lanterns.
</p>

<p>
  Follow the instructions for the <a href="http://www.killerrobots.com/screensavers/" class="external link">Jack-O-Lantern screensaver</a> 
  on where to put the carving files. If you are not on a Mac, I have taken some screen shots that you can use for desktop pictures. If you 
  would like to see a code o lantern that is not up... just ask for one, providing it has a logo!
</p>

<div class="center">
  <img src="/assets/2008/10/13/code_o_lanterns.png" class="floatr" width="554" height="185" />
</div>



<h2>Code-O-Lanterns Files</h2>

<ul class="mt10 mb10">
  <li>757rb <a href="/files/code_o_lanterns/carvings/757rb.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/757rb.png">[Desktop]</a> </li>
  <li>AJAX <a href="/files/code_o_lanterns/carvings/ajax.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/ajax.png">[Desktop]</a> </li>
  <li>GIT <a href="/files/code_o_lanterns/carvings/git.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/git.png">[Desktop]</a> </li>
  <li>Java <a href="/files/code_o_lanterns/carvings/java.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/java.png">[Desktop]</a> </li>
  <li>JavaScript <a href="/files/code_o_lanterns/carvings/javascript.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/javascript.png">[Desktop]</a></li>
  <li>Perl <a href="/files/code_o_lanterns/carvings/perl.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/perl.png">[Desktop]</a> </li>
  <li>PHP <a href="/files/code_o_lanterns/carvings/php.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/php.png">[Desktop]</a> </li>
  <li>Python <a href="/files/code_o_lanterns/carvings/python.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/python.png">[Desktop]</a> </li>
  <li>Rails <a href="/files/code_o_lanterns/carvings/rails.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/rails.png">[Desktop]</a> </li>
  <li>SVN <a href="/files/code_o_lanterns/carvings/svn.png">[Carving]</a> <a href="/files/code_o_lanterns/desktops/svn.png">[Desktop]</a> </li>
</ul>



filename: 2008-11-23-sql-server-adapter-for-rails-2-2.html
         title: SQL Server Adapter For Rails 2.2
    categories: ["Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/11/23/sql-server-adapter-for-rails-2-2
          body: 


<a href="http://twitter.com/metaskills/statuses/1017702780" class="noa mt20">
  <div class="center"><img src="/assets/2008/11/23/adapter_announcement.png" class="" width="480" height="253" /></div>
</a>
  
<p>
  So that about sums up what I've been doing for the past 4 weeks. A total rewrite of the <a href="http://github.com/rails-sqlserver/2000-2005-adapter/tree/master" class="external-link">SQL Server Adapter for Rails</a>. On top of passing all the Rails 2.2.2 tests, which is MAJOR news, it includes tons of new features. Unicode column support, pessimistic locking, date/time column casting, DDL transactions and <a href="http://github.com/rails-sqlserver/2000-2005-adapter/tree/master" class="external-link">way more</a>.
</p>

<p>
  On top of that. It was nice being mentioned on the rubyonrails.org website not for my <a href="http://weblog.rubyonrails.org/2008/9/24/this-week-in-rails-september-24-2008" class="external-link">first</a>, <a href="http://weblog.rubyonrails.org/2008/10/10/2-weeks-in-rails-october-10-2008" class="external-link">second</a>, but a <a href="http://weblog.rubyonrails.org/2008/11/21/this-week-in-edge-rails" class="external-link">THIRD</a> time. Thanks Gregg!
</p>

<ul>
  <li>UPDATE: I just got a <a href="http://twitter.com/d2h/statuses/1019410396" class="external-link">nod from David's twitter</a>. Thanks!</li>
</ul>





filename: 2008-11-26-go-buy-envycasts-now.html
         title: Go Buy Envycasts Now!
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2008/11/26/go-buy-envycasts-now
          body: 


<div class="photobounding floatl mr20" style="width:348px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2008/11/26/envycasts_2.2_small.jpg" alt="Envycasts: Ruby on Rails 2.2 Screencast" width="323" height="216" />
  </div>
</div>

<p>
  I got a chance to meet Gregg Pollack at this years RubyConf, a great guy. In fact I seem to owe him alot. Not only did I get 3 mentions lately on the main rubyonrails.org site, but it appears I got one of my <a href="http://github.com/rails/rails/commit/f277e1d8fddfa417104c6fe095c15559f0c8713d" class="external-link">2.2 additions</a> mentioned in their new <a href="http://envycasts.com/products/ruby-on-rails-22-screencast" class="external-link">envycast that covers rails 2.2</a>. Sweet!
</p>
  
<p>
  So now it is my duty to help the Rails Envy guys to bank it Grossenbach-style. If you have not done so, go check out <a href="http://envycasts.com/" class="external-link">envycasts.com</a> and put $9 down on one or two of their great vids! This stuff is a great resource for any ruby/rails'ist. Put it on your TV and imagine your in your own little Orlando user group.  
</p>





filename: 2008-12-30-autotestify-brothers-and-sisters.html
         title: Autotestify Brothers and Sisters
    categories: ["Heuristics", "Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2008/12/30/autotestify-brothers-and-sisters
          body: 


<p>
  Based on my previous article <a href="/2008/9/19/using-autotest-for-rails-plugin-development">Using Autotest For Rails Plugin Development</a>, <a href="http://brennandunn.com/" class="external-link">Brennan Dunn</a> wrote a ZSH function that helps him with his eager rails plugin work. Testing plugins is simply the most fun you will ever have. It's nice to test in isolation and easy to make a plugin test multiple rails versions, etc. Typically plugin testing is very fast to because you are not burdened with excessive tests in a big app that might use it. Just the ones needed to test the plugin. Enjoy this ZSH function.
</p>

<pre class="command">
function autotestify () {
  git clone git://github.com/metaskills/autotest_railsplugin.git
  rm -rf ./autotest_railsplugin/.git
  mv ./autotest_railsplugin ./autotest
}
</pre>



filename: 2009-01-20-multiruby-the-macports-way-testing-your-rails-apps-with-ruby-1-9.html
         title: MultiRuby The MacPorts Way. Testing Your Rails Apps With Ruby 1.9
    categories: ["Apple/OSX", "Heuristics", "Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2009/1/20/multiruby-the-macports-way-testing-your-rails-apps-with-ruby-1-9
          body: 



<p>
  <strong>UPDATE:</strong> In a recent article, I <a href="/2009/10/27/installing-ree-with-the-snow-leopard-sql-server-stack">covered how to install REE</a> and have hence NOOP'ed this function to ignore the symlinking when REE is installed.
</p>

<p>
  Ruby 1.9.1, the stable release, is just around the corner and if your like me, maybe you want to start playing around with 
  it and perhaps test a few projects using 1.9 with edge rails 2.3. If so, and your on a Mac, then perhaps this installation 
  method might appeal to you. I'll break this article up in two parts, the first will be on installing multiple versions of 
  ruby and how to switch between them while the other will be some things I noticed when testing ruby 1.9 with edge rails on my 
  favorite pet project <a href="http://github.com/metaskills/homemarks/tree/master" class="external-link">HomeMarks</a>.
</p>







<h2>Installing Ruby 1.9 & Change Ruby Function</h2>

<p>
  I love MacPorts and recommend using it even though OS X comes with ruby pre-installed. Doing so simply keeps things clean and 
  separated in the <code>/opt</code> directory vs mixing things in /usr where they might be clobbered by Apple during a system 
  update. So no to dependency hell! This article assumes you already have ruby 1.8 installed via MacPorts, if not change some of 
  the paths in the provided code below. Now... thanks to MacPorts it is easier than ever to get ruby 1.9 preview release 2 
  installed in it's own separate space.
</p>

<pre class="command">
  sudo port install ruby19
</pre>

<p>
  MacPort has just added these ruby 1.9 binaries to your PATH in <code>/opt/local/bin</code>. Nice and clean egh? 
  From here you can start "playing" with 1.9 by just executing either <code>ruby1.9</code> or <code>irb1.9</code>, but that 
  gets boring quick.
</p>

<ul>
  <li>erb1.9</li>
  <li>gem1.9</li>
  <li>irb1.9</li>
  <li>rake1.9</li>
  <li>rdoc1.9</li>
  <li>ri1.9</li>
  <li>ruby1.9</li>
  <li>testrb1.9</li>
</ul>

<p>
  Let's hack up your setup so that you can quickly switch your whole ruby install back and forth transparently. 
  The first step is to move the corresponding ruby 1.8 binaries to the same naming convention as their 1.9 counterparts. We will 
  then use symlinks to change which one gets executed. Step one:
</p>

<pre class="command">
  sudo mv /opt/local/bin/erb /opt/local/bin/erb1.8
  sudo mv /opt/local/bin/gem /opt/local/bin/gem1.8
  sudo mv /opt/local/bin/irb /opt/local/bin/irb1.8
  sudo mv /opt/local/bin/rake /opt/local/bin/rake1.8
  sudo mv /opt/local/bin/rdoc /opt/local/bin/rdoc1.8
  sudo mv /opt/local/bin/ri /opt/local/bin/ri1.8
  sudo mv /opt/local/bin/ruby /opt/local/bin/ruby1.8
  sudo mv /opt/local/bin/testrb /opt/local/bin/testrb1.8
</pre>

<p>
  So now that we have two versions of ruby installed, each in their own path suffix. So to switch back and forth without using these 
  suffixes, we will need to create a symlink for each binary that points to the version we want to use. The users of the local ruby 
  group <a href="http://757rb.org/" class="external-link">757rb</a> came up with this ZSH function below. Place it into your 
  <a href="http://github.com/metaskills/zshkit/tree/master" class="external-link">.zshkit</a> or dotfile of choice and 
  it will create/change symlinks for your ruby, irb, rake, etc.. that each point to the version you want to use. Calling it multiple 
  times will simply toggle your ruby versions.
</p>

<pre class="command">
chruby () {
  ree=`ruby -e "puts RUBY_DESCRIPTION.include?('Ruby Enterprise Edition')"`
  if [ $ree = "true" ]; then 
    echo "NOOP: Currently using REE in your path."
  else
    v=`ruby -e "puts RUBY_VERSION.split('.')[0,2].join('.')"`
    if [ $v = "1.9" ]; then 
      cv="1.8"
    else
      cv="1.9"
    fi
    rubyexes=(erb gem irb rake rdoc ri ruby testrb autotest unit_diff rails)
    for i in $rubyexes; do
      sudo unlink "/opt/local/bin/${i}"
      sudo ln -s "/opt/local/bin/${i}${cv}" "/opt/local/bin/${i}"
    done
    echo "Now Running: "`ruby -v`
  fi
}
</pre>

<pre class="command">
  $ chruby
  Now Running: ruby 1.8.7 (2008-08-11 patchlevel 72) [i686-darwin9]
  $ chruby
  Now Running: ruby 1.9.1 (2008-12-01 revision 20438) [i386-darwin9]
</pre>

<p>
  This works amazingly well at first. The one big gotcha is that you have to remember you have two gems directories. Any gem you installed under 1.8 will have to be installed again under 1.9. There are ways around this with some clever symlinking, but I'd recommend against it. Note too, this also applies to any site/vendored libs or bundles, for instance ruby odbc.
</p>


<h3>Things To Watch Out For</h3>

<p>
  If you install a gem under a certain version of ruby that places an executable in say /opt/local/bin then you are going to want to watch out for a bad she bang. For instance if you install the ZenTest gem while running under ruby1.9 suffix, then the she bang for /opt/local/bin/autotest would be incorrectly set to this <code>#!/opt/local/bin/ruby1.9 -ws</code>. The simple fix is to just change it to the true sym link.
</p>


<h2>Exploring Rails 2.3 & Ruby 1.9</h2>

<p>
  So far my HomeMarks project does not have any major issues with ruby 1.9. I'm not surprised, it's very very slim ruby code due 
  to the <a href="/2008/5/24/the-ajax-head-br-design-pattern">AJAX head design pattern</a>. I did however find a few new things 
  about the changes an app will need when moving from 2.2 to 2.3.
</p>

<ul>
  <li>Your test/test_helper.rb file will need to change to from <code>class Test::Unit::TestCase</code> to <code>class ActiveSupport::TestCase</code>. I'm sure this change is related to future abstraction to choose Minitunit vs Test::Unit.</li>
  <li>They have finally changed <code>app/controllers/application.rb</code> to <code>app/controllers/application_controller.rb</code>. Finally their hacks on that bad name are now gone. I found that I had to do this change manually on my own.</li>
  <li>Disabling sessions for a single controller has been deprecated. Sessions are now lazy loaded. So if you don't access them, consider them off. You can still modify the session cookie options with request.session_options.</li>
</ul>

<p>
  Past that, about the only interesting thing I found in Ruby 1.9 was that Test::Unit is gone and is actually loading Miniunit. 
  So things in rails that were requiring test/unit/error are going to fail.
</p>





filename: 2009-02-01-git-subversion-user-commit-reports.html
         title: Git & Subversion User Commit Reports
    categories: ["Heuristics", "Home", "Miscellaneous", "Ruby/Rails", "Workflow"]
     disqus_id: /2009/2/1/git-subversion-user-commit-reports
          body: 


<p>
  Want a list of the users and the number of commits they made? Git makes it really really easy, while I could not find such an easy method on Subversion. Here they are.
</p>

<h2>Git</h2>

<pre class="command">
git log | git shortlog -n -s
</pre>

<h2>Subversion</h2>

<macro:code lang="ruby">
#!/usr/bin/env ruby

require 'rubygems'
require 'activesupport'

log_xml = `svn log -q --xml`
svn_logs = XmlSimple.xml_in(log_xml)['logentry']

report_hash = svn_logs.inject({}) do |report,log|
  author = log['author'][0]
  report[author] ||= {:commit_count => 0}
  report[author][:commit_count] += 1
  report
end

commits_authors = report_hash.keys.map { |a| [report_hash[a][:commit_count], a] }
commits_authors = commits_authors.sort_by(&:first).reverse

cc_colsize = commits_authors.map(&:first).max.to_s.size
a_colsize = commits_authors.map(&:last).inject{|m,w| m.length > w.length ? m : w }.size

final_report = commits_authors.map do |ca|
  c,a = ca
  " #{c.to_s.rjust(cc_colsize)}  #{a.ljust(a_colsize)}"
end.join("\n")

puts final_report
</macro:code>





filename: 2009-03-10-learning-objective-c-iphone-development.html
         title: Learning Objective-C & iPhone Development
    categories: ["Apple/OSX", "Heuristics", "Home"]
     disqus_id: /2009/3/10/learning-objective-c-iphone-development
          body: 


<p>
  What have I been up too lately? Well primary working my butt off in my day job and after that, I just finished a week of vacation. As an aside, I need to disconnect more often, my vacation was very relaxing. But what's more relaxing that doing things in the fresh outdoors? Well learning another programming language of course.
</p>

<p>
  That is why this week I have seriously started learning Objective-C and iPhone application development. In fact I just got my approval today from Apple that I am a registered developer, see that pretty icon in the right column? So do you want to do the same? Below is a list of resources that I have found helpful to me. Let me explain something first, I am very tangential in my learning methods. Basically that means I take frequent breaks from my main course to learn deep details. For instance my main course is the <a href="http://www.pragprog.com/titles/amiphd/iphone-sdk-development" class="external-link"><em>iPhone SDK Development</em></a> book. But I have found it very helpful to break early on and watch the <a href="http://www.pragprog.com/screencasts/v-mcxcode/becoming-productive-in-xcode" class="external-link"><em>Becoming Productive In Xcode</em></a> videos. Knowing keyboard bindings and customizing my, dare I say it... IDE, just helps me get business done! Stay tuned for some updates.
</p>


<h2>Resources</h2>

<ul class="mt10">
  <li><a href="http://www.pragprog.com/titles/amiphd/iphone-sdk-development" class="external-link"><em>iPhone SDK Development</em></a></li>
  <li><a href="http://www.pragprog.com/screencasts/v-bdiphone/writing-your-first-iphone-application" class="external-link"><em>Writing Your First iPhone Application</em></a></li>
  <li><a href="http://www.pragprog.com/screencasts/v-mcxcode/becoming-productive-in-xcode" class="external-link"><em>Becoming Productive In Xcode</em></a></li>
  <li><a href="http://www.pragprog.com/screencasts/v-bdobjc/coding-in-objective-c-2-0" class="external-link"><em>Coding In Objective-C 2.0</em></a></li>
</ul>




filename: 2009-05-14-pdf-writer-for-ruby-1-9.html
         title: PDF::Writer For Ruby 1.9
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2009/5/14/pdf-writer-for-ruby-1-9
          body: 


<p>
  If you have legacy code written for ruby 1.8 and you want to run 1.9 and support your old <a href="http://ruby-pdf.rubyforge.org/pdf-writer/" class="external-link">PDF::Writer</a> code, then just jump right over to <a href="http://github.com/metaskills/pdf-writer/tree/master" class="external-link">my Github pdf-writer fork</a> and get it.
</p>

<pre class="command">
sudo gem install metaskills-pdf-writer
</pre>

<p>
  If you are interested in knowing some of the dirty details about what pitfalls are under 1.9, read on. The biggest thing for me was getting used to the character encodings. Including string literals in your code that are say UTF-8 or some other encoding will blow up on you real quick. I highly highly suggest that you read <a href="http://blog.grayproductions.net/categories/character_encodings" class="external-link">James Edward Gray II: Everything About Ruby 1.9 Character Encoding Series</a> series. He covers all the basics. If you want to see what two commits I did for pdf-writer, see <a href="http://github.com/metaskills/pdf-writer/commit/ef9787c050a3b861089fc95f4f3af544f8e39219" class="external-link">here</a> and <a href="http://github.com/metaskills/pdf-writer/commit/8f0ed3f1bd312bf86da47d721ca2f2070724efd6" class="external-link">here</a>. The second one is very very hackish, it basically add a marshaling support to the Mutex class which 1.9 does not have. The reason this is needed was due to pdf-writer's use of transaction simple to roll back object state as it is drawing across multiple pages. If you are like me and wish all your PDF::Writer code was in Prawn, your not alone!
</p>


<h2>Resources</h2>

<ul class="mt10">
  <li><a href="http://github.com/metaskills/pdf-writer/tree/master" class="external-link">PDF::Writer For Ruby 1.9</a></li>
  <li><a href="http://blog.grayproductions.net/categories/character_encodings" class="external-link">James Edward Gray II: Everything About Ruby 1.9 Character Encoding Series</a></li>
  <li><a href="http://eigenclass.org/hiki.rb?Changes+in+Ruby+1.9" class="external-link">General Changes in Ruby 1.9</a></li>
  <li><a href="http://prawn.majesticseacreature.com/" class="external-link">Prawn: Fast, Nimble PDF Generation For Ruby</a></li>
</ul>






filename: 2009-07-18-757rb-memcached-talk.html
         title: 757rb Memcached Talk
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2009/7/18/757rb-memcached-talk
          body: 


<p>
  <img src="/assets/2009/7/18/memcache_slides2.gif" alt="757.rb Memcached Presentation" class="floatl mr20" width="250" height="224" />
  Earlier this week I gave a talk at our local ruby users group, <a href="http://www.757rb.org/" class="external-link">757.rb</a>, about Memcached. Here recently I started picking it up again so that I could keep track of large sets of PK/FK changes during a big database move. In doing so, I decided to dig deep into it's internals and get a better grasp of how I would use it when I decided to do some serious fragment caching again.
</p>

<p>
  The biggest thing I took away from the talk was -- First, that you can use an array of strings/objects for the key passed to various caching methods. If the object responds to #cache_key, the return of that method would be used. The default implementation of ActiveRecord's #cache_key method is to use the updated_at column for a unique timestamp. It is even smart enough to know weather the object is new or not. Thanks to Brennan Dunn for pointing that out! The second and most important thing was an article by <a href="http://www.motionstandingstill.com/starting-simple-with-rails-caching/2008-11-27/" class="external-link">Nahum Wild</a> that talked about item level caching. This seemed like a strange place to start as typically I would start with a page or big sections of fragments. But as the demo app shows, this is an incredibly good place to start. Especially if you have heavy hitting pages of paginated views that talk to deep nested associations.
</p>


<h2>Resources</h2>

<ul class="mt10">
  <li><a href="/assets/2009/7/18/MemcachedPresentation-757rb.pdf" class="external-link">PDF Version of my Memcached Presentation</a></li>
  <li><a href="/assets/2009/7/18/play_cache.zip" class="external-link">The Demo Rails App of my Memcached Presentation</a></li>
  <li><a href="http://www.motionstandingstill.com/starting-simple-with-rails-caching/2008-11-27/" class="external-link">Da Man, Nahum Wild's advice</a></li>
  <li><a href="http://github.com/andrewfromcali/mcinsight/tree/master" class="external-link">GUI Version Of Memcached For Mac</a></li>
  <li><a href="http://github.com/nkallen/cache-money/tree/master" class="external-link">CacheMoney Rails Plugin</a></li>
</ul>





filename: 2009-08-18-visor-terminal-on-snow-leopard.html
         title: Visor Terminal on Snow Leopard
    categories: ["Apple/OSX", "Home"]
     disqus_id: /2009/8/18/visor-terminal-on-snow-leopard
          body: 


<p>
  <strong>UPDATE: Hacks no longer needed, latest Visor/SIMBL is 64-bit Snow Leopard happy!</strong>
  This is a similar process that I had to go through back in the day when I had to hack visor terminal in Leopard. Basically the steps are pretty easy. First you just install <a href="http://www.culater.net/software/SIMBL/SIMBL.php" class="external-link">SIMBL</a> and the <a href="http://visor.binaryage.com/" class="external-link">Visor.bundle</a> as a SIMBL plugin in <code>~/Library/Application Support/SIMBL/Plugins/Visor.bundle</code>. Once that is done here is the process to get this working in Snow Leopard.
</p>

<p class="mb20">
  First, you are going to need a copy of the Terminal.app from Leopard. I have <a href="https://cdn.mmetaskills.net/VisorTerminal.zip" class="external-link">provided a copy</a> in the resources section below. This copy has a few key things changed in the app's Info.plist file. First I have changed the bundle identifiers and display names to VisorTerminal. This is how we are going to scope visor to use this particular app. It also allows us to set things like the LSUIElement to 1 so that this app does not show in the dock. A summary of the changes I made are below, all these are done already in the download file I provide. If you want to do these on your own copy of Leopard's Terminal.app then just right click on the app, show package contents, and edit the Info.plist file. Remember to rename the app to VisorTerminal.app.
</p>

<macro:code lang="html">
<key>CFBundleDisplayName</key>
<string>VisorTerminal</string>
...
<key>CFBundleIdentifier</key>
<string>com.apple.VisorTerminal</string>
...
<key>CFBundleName</key>
<string>VisorTerminal</string>
...
<key>LSUIElement</key>
<string>1</string>
</macro:code>
<br />

<p class="mb20">
  Now we need to edit the installed <code>~/Library/Application Support/SIMBL/Plugins/Visor.bundle</code> so that it focuses on the old Leopard's terminal app (now VisorTerminal.app). Again right click on it and show the package contents, here is the complete plist below. You can see where I changed 3 places to VisorTerminal.
</p>

<macro:code lang="html">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>English</string>
	<key>CFBundleExecutable</key>
	<string>Visor</string>
	<key>CFBundleIdentifier</key>
	<string>com.blacktree.visor</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>Visor</string>
	<key>CFBundlePackageType</key>
	<string>BNDL</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>Custom</string>
	<key>GoogleML</key>
	<dict>
		<key>TargetApplications</key>
		<array>
			<dict>
				<key>BundleIdentifier</key>
				<string>com.apple.VisorTerminal</string>
				<key>BundleVersionsRE</key>
				<array>
					<string>.*</string>
				</array>
				<key>ExecPattern</key>
				<string>*/VisorTerminal.app/Contents/MacOS/Terminal</string>
			</dict>
		</array>
	</dict>
	<key>NSPrincipalClass</key>
	<string>Visor</string>
	<key>SIMBLTargetApplications</key>
	<array>
		<dict>
			<key>BundleIdentifier</key>
			<string>com.apple.VisorTerminal</string>
		</dict>
	</array>
</dict>
</plist>
</macro:code>
<br />

<p>
  Now when you launch VisorTerminal, it will be hidden from the dock and be the app that Visor.bundle focuses on. I really like how this app is removed from the doc too. More so I am just stoked it is working in Snow Leopard. As a last step, yoyou can add this to your login items so that it opens up automatically. I have found that it is a bit sticky when it first launches, but a few clicks in and out on first launch fixes that. One last note, I found it is easier to edit the custom properties for this terminal window like it's default color, font size, etc, if I turn off the LSUIElement.
</p>

<p>
 <strong>UPDATE:</strong> Thanks to Raptor007 for reminding us that if you want to get a head start on your terminal preferences looking the same for your VisorTerminal, you should copy <code> ~/Library/Preferences/com.apple.Terminal.plist</code> to <code> ~/Library/Preferences/com.apple.VisorTerminal.plist</code>. Thanks!
</p>

<h2 class="mb10">Resources</h2>

<ul>
  <li><a href="http://visor.binaryage.com/" class="external-link">Visor Project Page</a></li>
  <li><a href="http://www.culater.net/software/SIMBL/SIMBL.php" class="external-link">SIMBL Project Page</a></li>
  <li><a href="https://metaskills.s3.amazonaws.com/VisorTerminal.zip" class="external-link">VisorTerminal.app (Leopard)</a></li>
</ul>








filename: 2009-09-05-the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more.html
         title: The Ultimate OS X Snow Leopard Stack For Rails Development - x86_64, MacPorts, Ruby 1.8/1.9, SQL Server, SQLite3, MySQL & More
    categories: ["Apple/OSX", "Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more
          body: 


<div id="flash_indif" class="flash_message mt20 mb0">
  If you are interested in <a href="/2010/7/30/the-rvm-ruby-api">using RVM with a MacPort base for the SQL Server stack</a>, check out this article.
</div>

<div id="flash_indif" class="flash_message mt20 mb0">
  I have written <a href="/2010/7/19/a-macport-rubyodbc-update">an updated article on the MacPorts installation of the latest RubyODBC</a>.
  It includes information pertaining to utf8 support.
</div>


<p>
  This guide is all encompassing but primarily focuses on the benefits of MacPorts, second the development stack for SQL Server and lastly on anything else a rails developer might need on OS X. If you are on a Mac, possibly running Snow Leopard and x86_64 is near and dear to your heart, this article is for you. <strong>If you do not "have" to use SQL Server, you can safely skip those sections and get to the Ruby1.9/Apache2/SQLite3/MySQL stuff.</strong>
</p>

<p>
  A small forward. If you are developing rails applications on a modern OS such as Snow Leopard and your needs never make it out of the shallow end of the default Ruby and SQLite3, then this how-to might not be for you. However if you find yourself needing more and you want it to be easy and optimized for your architecture, then I highly suggest MacPorts.
</p>

<p>
  Even though this tutorial is based on MacPorts, there are alternatives if you have the guts. One is called <a href="http://github.com/mxcl/homebrew/tree/masterbrew" class="external-link">Homebrew</a> by Max Howell, which offers a very easy package management system that is closely knit to OS X's own libraries. If your smart enough to manage the sheer amount of dependencies and different ways OS X wants to pull you when using their libraries, then have at it. I failed horribly and I consider myself somewhat smart. This article also focuses on running multiple versions of ruby, specifically 1.8.7 and a flavor of 1.9.x. Again to this end there are other solutions. One recent one is called <a href="http://rvm.beginrescueend.com/" class="external-link">Ruby Version Manager (rvm)</a> by Wayne Seguin. An incredible library, but something I could not use with my level of compiling source due to the fact that all the dependencies needed for SQL Server to ODBC are hard enough to get in place for one ruby installation. RVM has it's use, but if you just need two versions of ruby with a full 64-bit stack to SQL Server, read on.
</p>





<h2>Install MacPorts</h2>

<p>
  If you have not done so already, go <a href="http://www.macports.org/install.php" class="external-link">download MacPorts</a> and run the installer and follow <a href="http://guide.macports.org/" class="external-link">their installation instructions</a>. At the time of this writing, the current version is 1.8 and has tons of new stuff for Snow Leopard. If you use bash, the default shell on OS X, then add this to your ~/.profile.
</p>

<pre class="command">
export PATH="/usr/local/bin:$PATH"
export MANPATH="/usr/local/share/man:$MANPATH"
export INFOPATH="/usr/local/share/info:$INFOPATH"
</pre>

<p>
  However, if you have <a href="http://books.google.com/books?id=jKY-rDoJx3wC&pg=PA115&lpg=PA115&dq=system+preferences+account+right+click+os+x+switch+to+zsh+default+shell&source=bl&ots=J0eyfcuH37&sig=F4MrA0-NmqeprnqEneAhAdqJBPg&hl=en&ei=FFigSs73GMqc8QaAzoDeDw&sa=X&oi=book_result&ct=result&resnum=2#v=onepage&q=system%20preferences%20account%20right%20click%20os%20x%20switch%20to%20zsh%20default%20shell&f=false" class="external-link">changed your default shell to ZSH</a>, then put this in your ~/.zshenv file. I highly recommend switching your default shell to ZSH.
</p>

<pre class="command">
path=(/opt/local/bin /opt/local/sbin /opt/local/apache2/bin $path)
manpath=(/opt/local/share/man $manpath)
infopath=(/opt/local/share/info $infopath)
</pre>

<h3>Important x86_64 Arch Notice</h3>

<p>
  If you are running Snow Leopard and if your processor supports 64-bit, say a Core 2 Duo (consult your manual), then I highly suggest you set the MacPorts build_arch to force it to x86_64 for all installed ports. Remember, even if you have a unibody MacBook that can not boot the 64-bit kernel yet, that does not mean you are not running 64-bit apps. If your chip supports it and your on Snow Leopard, turn it on. Here is how.
</p>

<p>
  Open up your MacPorts config file located at <code>/opt/local/etc/macports/macports.conf</code>. Around line 59, find the section that has the build_arch and set it to x86_64. I have done this on both my unibody MacBook 13" and Nehalem MacPro and everything has installed and works perfectly. This includes, ruby, git, and everything in between. See screenshots below for proof. Lastly, as a good habit, always run <code>sudo port selfupdate</code> before installing ports. This makes sure you have the latest port files.
</p>





<h2>Installing Ruby 1.8.7</h2>

<p>
  By now Ruby 1.8.7 is the new 1.8.6. It will be the de-facto low level version that supports the enterprise. Frankly, 1.9.2 is really where it is at, but we all have our day jobs right. Either way it is good to have this version installed. You may ask why, 1.8.7 comes on OS X by default now in Snow Leopard? Correct, but the goal here is to get a base ruby installed whose libs are known and compiled the way we want them for our low level SQL Server libraries and their dependencies. The goal here is to avoid dependency hell.
</p>

<pre class="command">
$ sudo port install ruby  

$ which ruby
/opt/local/bin/ruby

$ ruby -v
ruby 1.8.7 (2009-06-12 patchlevel 174) [i686-darwin10]
</pre>

<p>
  Running that port install may have taken awhile, but let me show you something. Do you see that below? That's right, it's 64-bit ruby just like the default OS X installed 1.8.7. In fact, it's even a bit faster for some reason. So remember, using MacPorts this way means that everything you install that supports it, will be built for 64-bit.
</p>

<div class="photobounding" style="width:522px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2009/9/4/ruby18_darwin_x86_64.jpg" alt="Ruby 1.8.7 64-bit Activity Monitor" width="497" height="260" />
  </div>
</div>

<p>
  Lets get RubyGems package management up and running. Thanks again to MacPorts this is really easy. Some advice. Never use MacPorts to update RubyGems! We just used it to get it installed easily and quickly and in the right scope. If you need to update RubyGems, just use it's own self update feature. 
</p>

<pre class="command">
$ sudo port install rb-rubygems
</pre>

<p>
  Feeling good? Maybe like me, you wouldn't mind getting side tracked. If so, go ahead and install Subversion and/or Git. I personally like to install both of these since I use Git to manage my Subversion repos too.
</p>

<pre class="command">
$ sudo port install subversion
$ sudo port install git-core +svn
</pre>


<h2>The SQL Server Connection Stack</h2>

<p>
  So back on track. The low level connection stack for SQL Server is pretty easy. We need unixODBC and not OS X's installed iODBC. After that FreeTDS needs to be installed with the +odbc variant so that it prefers the installed unixODBC. If you did not get side tracked above, these two installs could pull in a lot of dependency installs too and take some time. When we are done the final stack for connecting Rails to SQL Server will look something like this. Ruby/Rails => ActiveRecord SQL Server Adapter => DBI Gem w/DBD-ODBC => Ruby ODBC => unixODBC => FreeTDS => SQL Server.
</p>

<pre class="command">
$ sudo port install unixODBC
$ sudo port install freetds +odbc
</pre>

<p>
  If all went well, you should see a configuration file notice after FreeTDS installs. This is just the port reminding us that we will ultimately have to configure FreeTDS to point to our SQL Server box. We'll get back to that later, for now, let's check that the install is looking good.
<p>

<pre class="command">
$ which tsql
/opt/local/bin/tsql

$ tsql -C
Compile-time settings (established with the "configure" script)
                            Version: freetds v0.82
             freetds.conf directory: /opt/local/etc/freetds
     MS db-lib source compatibility: no
        Sybase binary compatibility: no
                      Thread safety: yes
                      iconv library: yes
                        TDS version: 5.0
                              iODBC: no
                           unixodbc: yes

$ tsql I
locale is "en_US.utf-8"
locale charset is "utf-8"
</pre>

<p>
  See that last line after <code>tsql -C</code>? It says unixodbc is a go! That's important. If for some reason you do not see this, then I suggest reinstalling unixODBC and FreeTDS in that order again. Also note the output of <code>tsql I</code> and check out the locale settings. On Mac OS X, this seems to default to the utf-8 stuff we would expect. Possibly due to the default LANG env var is set to en_US.utf-8. However, on other systems this may note be right. See the configure FreeTDS section below for what to do if this is the case.
</p>

<p>
  Right. That completes the UNIX'y low level parts to get us talking to SQL Server, now to put the focus back on Ruby again by installing a few gems that will be needed. Here are the ones critical to this setup. Please consult the adapter's <a href="http://github.com/rails-sqlserver/2000-2005-adapter/tree/master" class="external-link">README</a> for update to date version information on the approved/latest gems for DBI.
</p>

<pre class="command">
$ sudo gem install dbi -v 0.4.1
$ sudo gem install dbd-odbc -v 0.2.4
$ sudo gem install activerecord-sqlserver-adapter
</pre>

<p>
  Almost there, we need one more piece, the Ruby ODBC bindings, so we can talk to the low level unixODBC. At the time of this writing, the MacPort portfile for rb-odbc was stuck at 0.9995 while the <a href="http://www.ch-werner.de/rubyodbc/" class="external-link">ruby odbc project page</a> reports that the latest version is 0.9997. So here is a little lesson on how to edit a portfile to get our desired results. 
</p>

<pre class="command">
$ port file rb-odbc
/opt/local/var/macports/sources/rsync.macports.org/release/ports/ruby/rb-odbc/Portfile

$ port file rb-odbc | xargs mate
</pre>

<p>
  The first command simply shows you how you can get MacPorts to revel where the port file is located. The second shows how you can pipe that result to xargs to get TextMate to open the portfile. Now that we have the port file in front of us, let's edit it so that it pulls the latest. First change all occurrences of the version to latest, in this case from 0.9995 to 0.9997. Lastly, download your target version from the ruby odbc project page and do a MD5 checksum on it. In my case, when I downloaded 0.9997, the md5 checksum is 36d21519795c3edc8bc63b1ec6682b99. Now change the odd md5 in the portfile to this new one, hit save, and close. Let's try it out.
</p>

<pre class="command">
$ sudo port install rb-odbc +utf8
</pre>

<p>
  So without little fuss, that should have worked. Did you notice how we have the +utf8 variant there? If your like me and have national/unicode columns in your database, this is a good thing. The adapter has tests and support for unicode as well.
</p>


  

<h2>Configure The SQL Server Stack</h2>

<p>
  First, let's configure FreeTDS to point to our server. Assuming you have TextMate a simple <code>mate /opt/local/etc/freetds/freetds.conf</code> should get it open for us. FreeTDS even put in a few examples at the bottom of the file, I typically comment these out and add my own. In this example I am naming my server "my_dev_server". Note that tds version section, I personally use tds version 8.0 and have tested this against my stack on all SQL Server types with the ActiveRecord tests. Some have reported that they have errors unless the use 7.0. Your mileage may vary. Save and close the file. <strong>UPDATE:</strong> As noted above when running <code>tsql I</code>, if you do not see a utf-8 locale setting, you may have to add this line <code>client charset = UTF-8</code> to your configuration file. Here is a thread on <a href="http://lists.ibiblio.org/pipermail/freetds/2006q3/020396.html" class="external-link">how to set tsql's client character set</a>.
</p>

<pre class="">
# A typical Sybase server
# [egServer50]
#   host = symachine.domain.com
#   port = 5000
#   tds version = 5.0

# A typical Microsoft server
# [egServer70]
#   host = ntmachine.domain.com
#   port = 1433
#   tds version = 7.0

[my_dev_server]
  host = 192.168.1.58
  port = 1433
  tds version = 8.0
</pre>

<p>
  It has been noted that Windows user may want to include client encodings and character sets that set UTF-8 values. If you are running on Windows, try out this style freetds conf.
</p>

<pre class="">
[YOURSERVER]
 host             = yourserver.com
 port             = 1433
 tds version      = 7.0
 text size = 64512
 client encoding  = UTF-8
 client charset   = UTF-8
</pre>

<p>
  So after you have added your own server here, it is now time to configure unixODBC to use FreeTDS. Let's copy the default distribution files to the correctly named ones that unixODBC will look for.
</p>

<pre class="command">
$ sudo cp /opt/local/etc/odbc.ini.dist /opt/local/etc/odbc.ini
$ sudo cp /opt/local/etc/odbcinst.ini.dist /opt/local/etc/odbcinst.ini
</pre>

<p>
  Open up the newly copied <code>/opt/local/etc/odbcinst.ini</code> file. More than likely, this will be the only time you ever edit this file. Add a FreeTDS configuration to it like so. No personal configuration options here, this just links up the MacPort installed unixODBC and FreeTDS.
</p>

<pre class="">
[FreeTDS]
Decscription = FreeTDS driver for SQLServer
Driver = /opt/local/lib/libtdsodbc.so
Setup = /opt/local/lib/libtdsodbc.so
FileUsage = 1
</pre>

<p>
  So the last thing is to create some DSNs in your <code>/opt/local/etc/odbc.ini</code> file. It is very likely that you could edit this file often. Perhaps you do a lot of development and DB server changes. My personal file has over 20 some DSNs here. Here is one example. The name and description of the DSN is up to you. Take note how I made the server name "my_dev_server" line up to that used in the FreeTDS conf file. That is important. Flavor this to your tastes.
</p>

<pre class="">
[my_dev_server_dsn]
Driver=FreeTDS
Description=My Server Connection
Servername=my_dev_server
Server=my_dev_server
Port=1433
Database=killer_app
</pre>

<p>
  Here is an example of what your database.yml will look like. So by now you should be able to connect and work with your database. I have this working on quite a few Macs. If you found any issues, let me know, but a good place to start is running the adapter tests. That is of course if you have the stack setup right.
</p>

<pre class="">
development:
  adapter: sqlserver
  mode: ODBC
  username: rails
  password: secret
  database: killer_app
  dsn: my_dev_server_dsn
</pre>





<h2>Going The Extra Mile With Ruby 1.9.x</h2>

<p>
  Here is a little trick that I put in an article called <a href="http://www.metaskills.net/2009/1/20/multiruby-the-macports-way-testing-your-rails-apps-with-ruby-1-9">MultiRuby The MacPorts Way. Testing Your Rails Apps With Ruby 1.9</a>. Follow the steps in this post to get 1.9.x installed and switchable between your default 1.8.7 install.
</p>

<p>
  Remember, RubyGems already comes in 1.9 and that tutorial leaves your installed gems under 1.9 empty. Do the right thing and install gems on an as needed basis under 1.9. As for the ruby-odbc which is installed in the 1.8's vendor ruby directory, we will need to trick MacPorts to recompile and reinstall that for us. Here is how I did it. First make sure you in the right ruby version.
</p>

<pre class="command">
$ ruby -v                                 
ruby 1.9.1p243 (2009-07-16 revision 24175) [i386-darwin10]
</pre>

<p>
  Now we need to trick MacPorts to forget about the previous install so it will build and use the extconf.rb of the ruby 1.9 installation. Here are the commands to softly remove rb-odbc from MacPorts memory. If you want, you can change <code>rm -rf</code> to just <code>mv</code> and move these files to some other place.
</p>

<pre class="command">
sudo rm -rf /opt/local/var/macports/receipts/rb-odbc
sudo rm -rf /opt/local/var/macports/software/rb-odbc
sudo rm -rf /opt/local/share/doc/rb-odbc
</pre>

<p>
  Now you can tell MacPorts to reinstall ruby-odbc and it should create a new odbc.bundle in your <code>/opt/local/lib/ruby1.9/site_ruby/1.9.1/i386-darwin10/odbc.bundle</code>.
</p>

<pre class="command">
$ sudo port install rb-odbc +utf8
</pre>

<p>
  Here is the proof that I have 1.9 installed, working with SQL Server adapter and 64-bit. Thanks to the <code>chruby</code> ZSH function described in my other post, I can easily switch between my ruby installs.
</p>

<div class="photobounding" style="width:522px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://www.metaskills.net/assets/2009/9/4/ruby19_darwin_x86_64.jpg" alt="Ruby 1.8.7 64-bit Activity Monitor" width="497" height="260" />
  </div>
</div>



<h2>Complete The Marathon!</h2>

<p>
  Installing apache2 and passenger, yes all 64-bit happy.
</p>

<pre class="command">
$ sudo port install apache2
$ sudo gem install passenger
$ sudo passenger-install-apache2-module
</pre>


<p>
  How about a more common setup for SQLite3? If you took the side track and installed subversion from above, then you already have SQLite3 installed via MacPorts. If not, that's easy to fix. Here is how to install it and the ruby sqlite3 gem. I have done this for both my 1.8.7 and 1.9.x install above and again I am all 64-bit happy and passing all my tets.
</p>

<pre class="command">
$ sudo port install sqlite3
$ sudo gem install sqlite3-ruby
</pre>


<p>
  Installing MySQL and the ruby drivers are a bit more involved. This will get it installed and your launch control setup to act as if your box is a server, ie. load MySQL when it starts up.
</p>

<pre class="command">
$ sudo port install mysql5-server
$ sudo launchctl load -w /Library/LaunchDaemons/org.macports.mysql5.plist
$ sudo -u _mysql mysql_install_db5
$ sudo /opt/local/share/mysql5/mysql/mysql.server start
 Starting MySQL
 SUCCESS!
$ sudo gem install mysql -- --with-mysql-config=/opt/local/bin/mysql_config5
</pre>

<p>
  Nice, fully 64-bit and passing all the ActiveRecord tests for me. Note, sometimes you will have to reset your shell for new path binaries to become usable. It's always a good idea to open a new shell post a port install If you get an unfound <code>mysql_install_db5</code>, try opening a new shell. Pay attention to some of the output from that command too. For instance, if you want to set a root user password. I choose not to do this for a dev DB, but I do like to limit the connections so that only local connections can be used by editing the conf file. To create yourself a my.cnf file, copy one of the templates in <code>/opt/local/share/mysql5/mysql</code>, I choose to copy the large conf like so <code>sudo cp /opt/local/share/mysql5/mysql/my-large.cnf /opt/local/etc/mysql5/my.cnf</code>. Then I edit the conf file and uncomment the link that says "skip-networking". That way no one on the local network can hit my DBs. Lastly, here are some helpful aliases that I use.
</p>

<pre>
alias my_stop="sudo launchctl stop org.macports.mysql5"
alias my_start="sudo launchctl start org.macports.mysql5"
alias my_rs="my_stop ; my_start"
alias myconf="mate /opt/local/etc/mysql5/my.cnf"
</pre>




filename: 2009-09-21-perform-occupational-maintenance.html
         title: Perform Occupational Maintenance!
    categories: ["Home"]
     disqus_id: /2009/9/21/perform-occupational-maintenance
          body: 


<p>
One of the things that bugs me about some people in the technology field is that they do not perform enough occupational maintenance. Today I just purchased <a href="http://www.pragprog.com/titles/sdcoach/agile-coaching" class="external-link"><em>Agile Coaching</em></a> and <a href="http://www.pragprog.com/titles/tibmac/beginning-mac-programming" class="external-link"><em>Beginning Mac Programming: Develop with Objective-C and Cocoa</em></a>. Both from the <a href="http://www.pragprog.com/" class="external-link">Pragmatic Bookshelf</a>.
</p>

<p>
If you have not done so already, do yourself a favor and go to the Pragmatic Bookstore, check yo self, and get better at what you do! Here is my bookshelf to date.
</p>

<div class="center">
<img src="/assets/2009/9/21/occupational_maintenance.png" alt="757.rb Memcached Presentation" class="mr20" width="502" height="361" />
</div>






filename: 2009-10-04-757-studio.html
         title: 757 Studio
    categories: ["Home"]
     disqus_id: /2009/10/4/757-studio
          body: 


<div class="center">
  <img src="/assets/2009/10/4/757_studio_conference.png" alt="757 Studio Website">
</div>

<p>
  Well it took up quite a bit of my free time and a good 2 weeks of no iPhone development, but I am very very happy that
  the organization of my first event has been a success so far. Check out <a href="http://757studio.org/" class="external-link">
  757studio.org</a> for full details. Andy Hunt is headlining the event with a talk on Pragmatic Thinking and Learning. Clinton 
  Nixon and Jamie Pinkham will be following with talks on Ruby/Rails and iPhone/Cocoa. So even though I can not make it to the 
  West Coast for RubyConf this year, it is not so bad with a local event like this.
</p>

<p>
  Thanks so much to the <a href="http://pragmaticstudio.com/" class="external-link">Pragmatic Studio</a> and the 
  <a href="http://www.pragprog.com/" class="external-link">Pragmatic Bookshelf</a> for sponsoring the event and most 
  important to the speakers who are giving the talks. It is my sincere hopes that the Hampton Roads area can support more 
  talks like this and hopefully the advocacy of Ruby/Objective-C to local software developers and business will pay off, for 
  everyone!
</p>

<h2>Some Background</h2>

<p>
  I myself designed and developed the 757 Studio site. Yes, I used to be a designer back in the day, not a good one, but enough 
  to get by. It took me a few days to get to something in PhotoShop that looked right to me. I'm digging the brick and wood 
  masthead. I think it gives the site both a modern ".com" office look, even though some say it feels dated. On the technical 
  side, this was my first experience using <a href="http://haml-lang.com/" class="external-link">HAML</a> and 
  <a href="http://sass-lang.com/" class="external-link">SASS</a>.
</p>

<p>
  I loved HAML so much, I doubt I'll ever go back to ERB templates in Rails again. The forced indentation and not having to 
  manage closing tags was wonderful, it kept my views clean and forces you to use helpers like they should vs inlining a 
  bunch of control structures. SASS, the companion to HAML is for generating your CSS. It too forces you to write a strict 
  indentation for you CSS which works wonders. Not only will it generate deep selectors that maintain good scope, but the 
  the layout helps you really understand where in the DOM tree you are.
</p>

<p>
  If you want to see how all this came together and how I quickly hashed up a battle tested rails app for the studio's 
  RSVP/Reservation system, <a href="http://github.com/metaskills/757studio" class="external-link">the project is on my 
  Github page</a>. Check out the <code>app/stylesheets/site.sass</code> for the SASS CSS template and all the other views
  use HAML. Oh yea... I should also say that this was my first time playing with some webkit animations and effects. You may
  be able to spot them if you are on Safari/WebKit/Chrome.
</p>








filename: 2009-10-11-the-zombie-shotgun-revisited.html
         title: The Zombie Shotgun Revisited 
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2009/10/11/the-zombie-shotgun-revisited
          body: 


<div class="photobounding floatl mr20" style="width:348px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2008/7/6/zombie_shotgun.jpg" alt="Resident Evil Zombie Shotgun" width="320" height="213" />
  </div>
</div>

<p>
  My how time flies. Over a year ago <a href="/2008/7/6/stop-exception-notifications-with-the-zombieshotgun">I created a simple bit of code</a> that was useful for stopping ActionController routing errors from common Microsoft attacks from sending exception notification emails. Well now most people do not use exception notifications emails in favor of apps like Hoptoad. And hey, most code like this has moved to Rack middlewares.
</p>

<p>
  Yesterday I noticed a <a href="http://coderack.org" class="external-link">rack code competition</a> that encouraged "most useful and top quality Rack middlewares". Well the Zombie Shotgun is pretty useful to me, but I'm sure it's not top quality. That said, I did take the time to finally pick up on the rack internals and learn how to use <a href="http://github.com/brynary/rack-test" class="external-link">rack-test</a>. If you want to check out the new tested Zombie Shotgun middleware and how I tested it using Shoulda, <a href="http://github.com/metaskills/rack-zombieshotgun" class="external-link">go see the project on my github page</a>. Also, here is my <a href="http://coderack.org/users/MetaSkills/entries/15-zombie-shotgun" class="external-link">CodeRack entry</a>.
</p>



filename: 2009-10-27-installing-ree-with-the-snow-leopard-sql-server-stack.html
         title: Installing REE With The Snow Leopard SQL Server Stack
    categories: ["Database", "Heuristics", "Home", "Projects", "Ruby/Rails"]
     disqus_id: /2009/10/27/installing-ree-with-the-snow-leopard-sql-server-stack
          body: 


<p>
  Today I noticed that Ruby Enterprise Edition 2009.10 was released and I have really been wanting to see if I could get the <a href="http://github.com/rails-sqlserver" class="external-link">SQL Server adapter</a> tested and running under it. I am really curious how the speed improvements might look and will share my results below. This article assumes that you read my previous guide titled <a href="/2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more">The Ultimate OS X Snow Leopard Stack For Rails Development - x86_64, MacPorts, Ruby 1.8/1.9, SQL Server, SQLite3, MySQL & More</a> as I will be building on top of it and referencing certain steps. So let's get down to business.
</p>



<h2>Installing REE</h2>

<p>
  The guys at Phusion have done a rock solid job. My previous attempts to install REE were a bomb, but it worked perfectly this time around. Simply <a href="http://www.rubyenterpriseedition.com/download.html" class="external-link">follow their directions</a> and all will be OK. A snippet of my output is below. I liked how they picked a new default install directory of <code>/opt/ruby-enterprise-1.8.7-2009.10</code>. Wicked cool! By the way, the only issue I had during install was when they were trying to install the pg gem for me. I ignored that error for now.
</p>

<pre class="command">
sudo ./ruby-enterprise-1.8.7-2009.10/installer

Where would you like to install Ruby Enterprise Edition to?
(All Ruby Enterprise Edition files will be put inside that directory.)
[/opt/ruby-enterprise-1.8.7-2009.10] :
</pre>



<h2>Configuring For REE</h2>

<p>
  This is actually really easy. In my previous article, I talked about installing MacPorts and configure your profile. All I did this time around was add the REE path extensions after my MacPort extensions in my ZSH kit. So my path file now looks this below. If I ever want to just go back to my normal 1.8/1.9 toggle in <code>/opt/local/bin</code>, I just comment out the REE path extensions, source my profile and I'm back to my MacPort basics.
</p>

<pre>
# MacPorts
path=(/opt/local/bin /opt/local/sbin /opt/local/apache2/bin ~/.zshkit/bin $path)
manpath=(/opt/local/share/man $manpath)
infopath=(/opt/local/share/info $infopath)

# REE
path=(/opt/ruby-enterprise-1.8.7-2009.10/bin $path)
manpath=(/opt/ruby-enterprise-1.8.7-2009.10/share/man $manpath)
infopath=(/opt/ruby-enterprise-1.8.7-2009.10/share/info $infopath)
</pre>

<p>
  In the last guide, I mentioned how to switch between ruby 1.8/1.9 installed by MacPorts using a simple ZSH function. You can find this in my article title <a href="/2009/1/20/multiruby-the-macports-way-testing-your-rails-apps-with-ruby-1-9">MultiRuby The MacPorts Way. Testing Your Rails Apps With Ruby 1.9</a>. I have updated this to include a condition that will noop the function if you are running REE. So to recap. I use my <code>chruby</code> function to switch between 1.8/1.9 installed by MacPorts and I use my profile extension to use REE. So what that profile change done... reload and/or open a new terminal window and test it out.
</p>

<pre class="command">
$ which ruby
/opt/ruby-enterprise-1.8.7-2009.10/bin/ruby
$ which gem
/opt/ruby-enterprise-1.8.7-2009.10/bin/gem
</pre>



<h2>Using REE With SQL Server</h2>

<p>
  Let's get the easy stuff out of the way and install the needed gems for the adapter to work. Again, always <a href="http://github.com/rails-sqlserver" class="external-link">follow the TODO on the adapter page</a> for the latest blessed versions of DBI and low level connectivity stuff. But just to recap the current needs.
</p>

<pre class="command">
$ sudo gem install dbi -v 0.4.1
$ sudo gem install dbd-odbc -v 0.2.4
$ sudo gem install activerecord-sqlserver-adapter
</pre>

<p>
  Now the hard part, but I have an easy solution. You can do this the hard way and recompile the UTF8 version of ruby odbc by hand or you can type one command. I tried compiling it by hand and found that I had a few bugs, even after following <a href="http://digitaljacob.riff.dk/2009/10/26/using-ruby-odbc-with-unixodbc-on-snow-leopard/" class="external-link">Jacob Riff's notes</a> when he had a similar issue when trying to hook ruby ODBC to use unixODBC in his <code>/usr/local</code> . My solution was much simpler. I just coped my ruby 1.8.7 ruby odbc to the REE's vendor ruby directory. Hence:
</p>

<pre class="command">
$ sudo cp /opt/local/lib/ruby/vendor_ruby/1.8/i686-darwin10/odbc.bundle /opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/vendor_ruby/1.8/i686-darwin10.0.0
</pre>

<p>
  Here are my notes below on where I failed on installing ruby odbc by hand under REE. Feedback welcome, but good to know that the above simple copy worked just fine.
</p>

<pre>
# Installing Ruby ODBC By Hand Notes

$ ruby -Cutf8 extconf.rb
$ make -C utf8
$ sudo make -C utf8 install
  /usr/bin/install -c -m 0755 odbc_utf8.bundle /opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/i686-darwin10.0.0
$ sudo mv /opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/i686-darwin10.0.0/odbc_utf8.bundle /opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/i686-darwin10.0.0/odbc.bundle 

Loading development environment (Rails 2.3.4)
dlsym(0x102c6e330, Init_odbc): symbol not found - /opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/i686-darwin10.0.0/odbc.bundle
/opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/i686-darwin10.0.0/odbc.bundle
/opt/ruby-enterprise-1.8.7-2009.10/lib/ruby/site_ruby/1.8/rubygems/custom_require.rb:31:in `require'
</pre>




<h2>Benchmarking REE vs MacPorts</h2>

<p>
  Here is the good news, the above hacks and REE work! I have even tested the adapter and all is looking good from my end!!! Now how about those benchmarks? Here are the speed differences for running the full adapter test suite under 1.8.7 installed in MacPorts and the latest REE. Note, this is really non-scientific benchmarks, but I think they fun facts.
</p>

<pre>
Ruby 1.8.7 MacPorts (patchlevel 174)
Finished in 158.574243 seconds.
2190 tests, 7395 assertions, 0 failures, 0 errors

REE 1.8.7 (2009.10)
Finished in 146.834762 seconds.
2190 tests, 7636 assertions, 0 failures, 0 errors
</pre>



<h2>Installing Passenger</h2>

<p>
  Since passenger was installed as part of the REE installation, all I had to do was run the apache2 installer again and paste in the new code into my httpd.conf file.
</p>

<pre class="command">
$ which passenger-install-apache2-module
/opt/ruby-enterprise-1.8.7-2009.10/bin/passenger-install-apache2-module
$ sudo passenger-install-apache2-module
</pre>





filename: 2009-11-11-meta-programming-in.html
         title: Meta Programming In...
    categories: ["Home"]
     disqus_id: /2009/11/11/meta-programming-in
          body: 


<p>
  Last nights <a href="http://757rb.org/" class="external-link">757.rb</a> meeting was a great success. We did a talk titled <em>Introduction To Ruby & Rails</em> for all the new comers that might have been interested in learning more about both â€“ from the ground up. Since Ruby was my first language and my toolbelt only extends to JavaScript and Objective-C, I'm always interested in how other languages do the things that I love so much in Ruby. One of the biggest pluses for Ruby, to me, is the support for meta programming. In a typical rails model, you might see something like this.
</p>

<div class="mt20 mb10">
<macro:code lang="ruby">
class User < ActiveRecord::Base
  has_many                :articles
  named_scope             :active, :conditions => {:active => true}
  validates_uniqueness_of :email
  validates_presence_of   :email, :username, :twitter_handle
end
</macro:code>
</div>

<p>
  For the untrained, those are class level methods writing code for an model that persists objects to a database. It looks like you are typing a spec or some declaration. In fact this is code writing other code. For newcomers to the language this is voodoo magic, but if you write programs and interfaces for others, meta programming is what it is all about. In fact, I use this technique all the time instead of writing the same code over and over again.
</p>

<p>
  This concept is built into the core of Ruby. In fact here is an example from my talk on the class method built into Ruby called <code>attr_accessor</code> which wraps a common paradigm of generating getter/setter methods for an instance variable. No magic here, the two class definitions below are equal and the interface of the object is the same. One is you do not have to write code over an over again in an vanilla class you care to have getter/setter methods for.
</p>

<div class="mt20 mb10">
<macro:code lang="ruby">
class MyClass
  attr_accessor :foo
end

# Same as writing

class MyClass
  def foo
    @foo
  end
  def foo=(value)
    @foo = value
  end
end

# Same results

o = MyClass.new
o.foo           # => nil
o.foo = 'bar'   # => "bar"
o               # => #<MyClass:0x100172b80 @foo="bar">
</macro:code>
</dib>

<p>
  So here is where I want to learn. I know how to write Ruby well enough that I can show one way below of how to write <code>attr_accessor</code> if it did not exist in core Ruby. In my example below I made the method named <code>attribute_accessor</code> to avoid the name conflict. Can anyone show me how this would be done in PHP, Java, Anything? What is meta programming like in those languages? How about posting a code example on <a href="http://pastie.org/" class="external-link">pastie.org</a> and school me. I really am interested in knowing. BTW, my example only shows how the <code>attribute_accessor</code> takes on argument. In actuality in Ruby, the built in <code>attr_accessor</code> method takes multiple args and generates methods for each. For simplicity I narrowed down my examples and code to only take one argument so we can all stay focused.
</p>

<div class="mt20 mb10">
<macro:code lang="ruby">
module MetaSkills
  
  def self.included(klass)
    klass.class_eval do
      include ClassMethods
    end
  end
  
  module ClassMethods
    
    def attribute_accessor(name)
      attribute_reader(name)
      attribute_writer(name)
    end

    def attribute_reader(name)
      define_method(name) do
        instance_variable_get "@#{name}"
      end
    end

    def attribute_writer(name)
      define_method "#{name}=" do |value|
        instance_variable_set "@#{name}", value
      end
    end
    
  end
  
end

Class.send :include, MetaSkills

class MyClass
  attribute_accessor :foo
end

o = MyClass.new
o.foo           # => nil
o.foo = 'bar'   # => "bar"
o               # => #<MyClass:0x100171c80 @foo="bar">
</macro:code>
</div>

<p>
  Update: A friend was asking me about the namespaces you see in the module. It is technically possible to just open up the Class object and add my example additions. Typically in Ruby you are encouraged to create your own namespaced module and inject class/instance modules into the included class via the module's hook method <code>self.included</code>. The pattern is like so <a href="http://pastie.org/694019" class="external-link">http://pastie.org/694019</a>. So for instance, I could have done this <a href="http://pastie.org/694038" class="external-link">http://pastie.org/694038</a> without taking advantages of the modules hook method. 
</p>







filename: 2009-11-23-authenticated-s3-gets-for-private-objects-using-paperclip.html
         title: Authenticated S3 GETs For Private Objects Using Paperclip
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2009/11/23/authenticated-s3-gets-for-private-objects-using-paperclip
          body: 


<p>
  Yea I know, I am probably the last person on earth that is just getting around to using <a href="http://github.com/thoughtbot/paperclip" class="external-link">Paperclip</a>. To be honest, most of my file upload code was written way before Paperclip or even AttachementFu was ever conceived. And frankly, I do not do much social app coding on the side - so the need never came up. But that changed recently and I wanted a really really good way of leveraging AWS::S3 storage with the best local app security while maintaining tight control over the files.
</p>

<p>
  So the Paperclip wiki has a few links that already dealt with some ways of protecting your app's attachments. One mentions a method I totally love called security through obscurity. It uses a secure random token as part of the filename which combined with the original filename and the id partition makes for great random URLs. The other is a great walk thru on how to use the :url option of paperclip to point access control back to your own application for your normal biz logic.
</p>

<p> 
  The problem I see with both of these methods is that they do not allow you to maintain app control past the final URL handoff/redirect. It also requires that your S3 bucket is public. For instance, if you were to use the <code>s3_permissions => :private</code> option of Paperclip, then that URL given to you by Paperclip is pretty much worthless. I knew AWS::S3 had authenticated GETs that generated an automatically expiring URL, but saw no way of accessing its features using the abstract <code>Paperclip::Attachment</code> object. So this is what I did.
</p>


<div class="mt20 mb10">
<macro:code lang="ruby">
class MyDownload
  
  has_attached_file :attachment, 
                    :storage => :s3, :bucket => 'mybucket',
                    :s3_credentials => {...}, :s3_protocol => 'https', 
                    :s3_permissions => :private,
                    :path => lambda { |attachment| ":id_partition/#{attachment.instance.random_secret}/:filename" },
                    :processors => [:noop]
  
  before_validation_on_create :set_random_secret
  
  
  def attachment_url
    "#{self.class.tableize}/#{id}/#{attachment_file_name}"
  end
  
  def authenticated_s3_get_url(options={})
    options.reverse_merge! :expires_in => 10.minutes, :use_ssl => true
    AWS::S3::S3Object.url_for attachment.path, attachment.options[:bucket], options
  end
  
  private
  
  def set_random_secret
    self.random_secret = ActiveSupport::SecureRandom.hex(8)
  end
  
end
</macro:code>
</div>

<p>
  Let me walk you thru some of the highlights of that class, the general concept following is that we are going to use the best of both examples in security mentioned above. First, the secure token, that is what #set_random_secret will generate for each instance. The <code>:path</code> option for Paperclip uses a proc to make sure each instance uses that attribute in the string that will be later interpolated further down. You can also see how I use the id partition too. Next, I have added two public instance methods. The first is #attachment_url and it will need a bit of explaining.
</p>

<p>
  Currently in Paperclip, if you use the :url option and your :storage is set to :s3, then it is ignored. This could totally be intentional. So in a typical setup where you want the file download running through your own access control, you wold have a :url option like this <code>:url => '/:class/:id/:filename'</code>. So this is what #attachment_url mimics, it simply gets around that shortcoming and points the download action back to your own controller. How that controller would work is beyond the scope of this article, see the resources section below for those links.
</p>

<p>
  The last example method is #authenticated_s3_get_url which dips right on down to the AWS::S3 library to get the URL for the object in the bucket. AWS::S3's doc mention that it will automatically generate a secure GET url that expires in 5 minutes. However in my example, you can see where I am changing that to 10 minutes and forcing the HTTPS protocol. This would be the URL that your own controller would do the final redirect to. This URL is for your private objects in your S3 bucket and will only work for the amount of time you want it too! Meaning your app stays in complete control. Putting it all together one more time...
</p>

<pre class="command">
# A MyDownload instance.
>> dl = MyDownload.find(4)

# This is totally useless for private buckets/objects.
>> dl.attachment.url
=> "https://s3.amazonaws.com/mybucket/000/000/004/147681c16fddc1e5/private.pdf?1258989107"

# This is what you use in your own views.
>> dl.attachment_url
=> "my_downloads/4/private.pdf"

# Your controller would redirect to this secure GET.
>> dl.authenticated_s3_get_url
=> "https://s3.amazonaws.com/mybucket/000/000/004/147681c16fddc1e5/private.pdf?AWSAccessKeyId=0HJD3NS9CVWN2JV89K02&Expires=1258990967&Signature=8aWsq4o5gXfpIrRZyeETddnOeFw%3D"
</pre>


<h3>What Is That Noop Processor</h3>

<p>
  Good eye! Did you see that I have a processor called Noop in the has_attached_file declaration? The default processor in Paperclip is the Thumbnail processor, which no matter what calls the ImageMagick identify command to see if it can do something to the file. I did not want that or any processing, just simple attachments. So I created this simple processor that just straight returns the file object. I made a <a href="http://github.com/thoughtbot/paperclip/issues/#issue/118" class="external-link">ticket on the Paperclip's issue page</a> that hopefully would allow a <code>:processors => false</code> option one day that would do this as well. So maybe one day it'll be a feature.
</p>

<div class="mt20 mb10">
<macro:code lang="ruby">
module Paperclip  
  class Noop < Processor
    
    def make
      file
    end

  end
end
</macro:code>
</div>


<h2>Resources</h2>

<ul>
  <li><a href="http://almosteffortless.com/2009/03/22/randomize-filename-in-paperclip/" class="external-link">Security Through Obscurity: Randomize Filename in Paperclip</a></li>
  <li><a href="http://thewebfellas.com/blog/2009/8/29/protecting-your-paperclip-downloads" class="external-link">Your Access Control: Protecting Your Paperclip Downloads</a></li>
  <li><a href="http://github.com/thoughtbot/paperclip/issues/#issue/118" class="external-link">Allow False Option For Processors</a></li>
</ul>






filename: 2010-01-05-rails-button-links-in-embedded-forms.html
         title: Rails Button Links In Embedded Forms
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2010/1/5/rails-button-links-in-embedded-forms
          body: 


<p>
  This is one I have had sitting around for almost 3 years now in my toolbox and thought I would share. Have you ever had complicated rails forms and needed simple form buttons that just took you to a simple link? Were you bitten by the <code>button_to</code> helper code because it generates another form inside of a form? If so, here is a simple rails view helper I made that creates simple button links for embedded forms by making an input with a javascript function. Tag soup you ask, hell yeah, but worth if if you need it.
</p>

<macro:code lang="ruby">
def button_to_link(name, link, options={})
  confirm_option = options.delete(:confirm)
  popup_option = options.delete(:popup)
  link_function = popup_option ? redirect_function(link,:new_window => true) : redirect_function(link)
  link_function = "if (confirm('#{escape_javascript(confirm_option)}')) { #{link_function}; }" if confirm_option
  button_to_function name, link_function, options
end

def redirect_function(location, options={})
  location = location.is_a?(String) ? location : url_for(location)
  if options[:new_window]
    %|window.open('#{location}')|
  else
    %|{window.location.href='#{location}'}|
  end
end
</macro:code>



filename: 2010-01-25-quickie-js-prototype-wrapper-for-quicktime.html
         title: Quickie.js - Prototype wrapper for QuickTime
    categories: ["Apple/OSX", "Heuristics", "Home"]
     disqus_id: /2010/1/25/quickie-js-prototype-wrapper-for-quicktime
          body: 


<p>
  As some of you know, I am in the last steps of announcing my first iPhone application. We all know that every good iPhone application has a great marketing website with a screen cast. I myself was heavily inspired by the <a href="http://tapbots.com/convertbot" class="external-link">Tapbots Convertbot</a> website while building my own and wanted a good way of embedding the screen cast. I think the last time I did an object/embed tag was god... around 2003 or something, seriously.
</p>

<p>
  So after looking at the source of the Convertbot website, I was happy to find a nice little JavaScript wrapper for QuickTime called Quickie.js. This is a MooTools class created by Jose Prado that helps generate an object or embed tag appropriate for the requesting browser in an abstract way. Here is the link to the <a href="http://pradador.com/code/quickiejs/" class="external-link">original Quickie.js</a>. If you use MooTools, fine, it is real close to Prototype and has my respect, but if you use Prototype, here is my rewrite of the class.
</p>


<macro:code lang="javascript">
/*

Author:
  Ken Collins <metaskills.net>

Options:
  id - (string: defaults to 'Quickie_' + unique id) The id of the Quickie object.
  width - (number: defaults to 1) The width of the Quickie object.
  height - (number: defaults to 1) The height of the Quickie object.
  container - (element) The container into which the Quickie object will be injected.
  attributes - (object) QuickTime attributes for the element. See http://www.apple.com/quicktime/tutorials/embed.html for possible attributes.
  
Returns:
  - (element) A new HTML object Element with browser appropriate QuickTime embed code.

Example:
  var myQuickie = new Quickie('myMovie.mov', {
    id: 'myQuicktimeMovie',
    width: 640,
    height: 480,
    container: 'qtmovie',
    attributes: {
      controller: 'true',
      autoplay: 'false'
    }
  });

Credits:
	Mootools Implementaiton: http://pradador.com/code/quickiejs/
	
License:
	MIT-Style License

*/

var Quickie = Class.create({
  
  initialize: function(path, options){
    var time = Try.these(
      function() { return Date.now() },
      function() { return +new Date }
    );
    var defaultOptions = {
      id: null,
      height: 1,
      width: 1,
      container: null,
      attributes: {}
    }
    this.path = path;
    this.instance = 'Quickie_' + time;
    this.options = Object.extend(defaultOptions, arguments[1] || {});
    this.id = this.options.id || this.instance;
    this.container = $(this.options.container);
    this.attributes = this.options.attributes;
    this.attributes.src = this.path;
    this.height = (this.attributes.controller == 'true') ? this.options.height + 16 : this.options.height; 
    this.width = this.options.width;
    this._assignElement();
  },
  
  toElement: function() {
    return this.element;
  },
  
  _assignElement: function() {
    var build = (Prototype.Browser.IE) ? this._buildObjectTag() : this._buildEmbedTag();
    this.element = ((this.container) ? this.container.update('') : new Element('div')).update(build).down();
  },
  
  _buildObjectTag: function() {
    var build = "";
    build = '<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B" codebase="http://www.apple.com/qtactivex/qtplugin.cab"';
    build += ' id="' + this.id + '"';
    build += ' width="' + this.width + '"';
    build += ' height="' + this.height + '"';
    build += '>';
    for (var attribute in this.attributes) {
      if (this.attributes[attribute]) {
        build += '<param name="' + attribute + '" value="' + this.attributes[attribute] + '" />';
      }
    }
    build += '</object>';
    return build;
  },
  
  _buildEmbedTag: function() {
    var build = "";
    build = '<embed ';
    build += ' id="' + this.id + '"';
    build += ' width="' + this.width + '"';
    build += ' height="' + this.height + '"';
    for (attribute in this.attributes) {
      if (this.attributes[attribute]) {
        build += ' ' + attribute + '="' + this.attributes[attribute] + '"';
      }
    }
    build += ' pluginspage="http://www.apple.com/quicktime/download/"></embed>';
    return build;
  }

});
</macro:code>

<p>
  If you ask me this is far cleaner than the original. It encapsulates factory methods and all the initialize does is just setup vars, not do ALL the work in one big procedural way. So what does this class do? It's simple, it allows you to create JavaScript objects that will represent DOM objects for QuickTime movies. This object can be passed to any method that takes expects and element to Prototype since it has a toElement method. Here is the way I am using it in my upcoming project. Just like the Tapbots website, I am creating <code><div></code> tags that have all the attributes I need and are the container elements. On page load, I update all those containers with generate QuickTime source code. See the example below.
</p>

<macro:code lang="javascript">
/* 
Example Container
<div id="mymovie_container" class="quicktime_video" rel="src=/video/mymovie.mov|width=280|height=393|loop=true|autoplay=true|video_id=mymovie"></div>
*/

document.observe('dom:loaded', function(){
  $$('.quicktime_video').each(function(container){
    var attributes = {};
    attributes.controller = 'false';
    attributes.autoplay = 'true';
    attributes.loop = 'false';
    attributes.enablejavascript = 'false';
    container.readAttribute('rel').split('|').each(function(keyvalue) {
      pair = keyvalue.split('=');
      attributes[pair[0]] = pair[1];
    });
    var qt = new Quickie(attributes['src'], {  
      id: attributes['video_id'], 
      width: parseInt(attributes['width']), 
      height: parseInt(attributes['height']), 
      container: container, 
      attributes: attributes
    });
    container.update(qt);
  });
});
</macro:code>


<h2>Resources</h2>

<ul>
  <li><a href="http://github.com/metaskills/quickie.js" class="external-link">Quickie.js on Github</a></li>
</ul>




filename: 2010-01-29-unobtrusive-js-in-rails-3-with-prototype.html
         title: Unobtrusive JS In Rails 3 With Prototype 
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2010/1/29/unobtrusive-js-in-rails-3-with-prototype
          body: 


<div id="flash_indif" class="flash_message mt20 mb0">
  An updated version of UJS and forgery protection in Rails3 <a href="/2010/4/13/restful-ajax-with-forgery-protection-with-rails-3" class="exteranl-link">here</a>.
</div>

<p>
  Are you bleeding on the edge of rails 3 and need to shim up some unobtrusive JavaScript to work with your <code>link_to</code> code that uses a destructive :method option? I did today and here is what I did to solve it. If you are unfamiliar with the problem, and what has been happening in rails 3 with UJS, check out <a href="http://blog.solnic.eu/2009/09/08/unobtrusive-javascript-helpers-in-rails-3" class="external-link">Piotr Solnica's</a> blog for a good run down. Or you can check out the simple code block below.
</p>

<macro:code lang="ruby">
# This Ruby
link_to 'Logout', session_path, :method => :delete

# Will out put this HTML in Rails 3
# <a href="/session" data-method="delete" data-url "/session" rel="nofollow">Logoout</a>
</macro:code>

<p>
  So no more tag soup. Yea! There was much rejoicing, but I could not find any illustrated examples of what type of JavaScript to use to back this up. There are two problems at play here. First, simple link <code>&lt;a&gt;</code> tags are not forms and hence methods like post/put/delete are not going to be solved with simple query params. Second, because link tags are not forms, there is no authenticity_token hidden in the generated form, like a <code>button_to</code> would generate. Let's ignore the second problem for a bit and see what I came up with for using with Prototype.
</p>

<macro:code lang="javascript">
var MyJsObject = {
  
  linkToDelete: function(event) {
    event.stop();
    var e = event.element();
    var a = e.readAttribute('href') ? e : e.up('a');
    var form = FORM({action:a.href, method:'post'},[
      INPUT({type:'hidden',name:'_method',value:'delete'}),
      INPUT({type:'hidden',name:'authenticity_token',value:authParams.get('authenticity_token')})]
    );
    form.submit();
    return false;
  }
  
};

document.observe('dom:loaded', function(){
  $$('a[data-method=delete]').each(function(a){ a.observe('click', MyJsObject.linkToDelete); });
});
</macro:code>

<p>
  In this example I am only covering the DELETE action. This code could be abstracted to take a "method" argument and use it. As you can see, it's just a simple iteration over the links with custom "data-method" attributes and attaching a function to it. For brevity, I am using the Builder.js methods for building DOM objects. See anything odd up there? The authentication token? You got it, destructive actions like POST/DELETE/PUT will need that token. I wrote up a great article a year or so ago that still works today titled <a href="/2010/4/13/restful-ajax-with-forgery-protection-with-rails-3">RESTful AJAX with Forgery Protection (In Rails3)</a> that gives me that nice global var. Check it out for the last piece to this puzzle and have fun working on the edge!
</p>





filename: 2010-02-06-simple-script-console-function.html
         title: Simple Script/Console Function
    categories: ["Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2010/2/6/simple-script-console-function
          body: 


<p>
  This is something simple I worked up today for my ZSH profile that let's me keep my simple <code>sc</code> alias and have it work with all versions of rails. If you did not know, all the script files in rails 3 are gone and the new all-in-one <code>rails</code> executable does all the heavy lifting. This little function even passes down all the arguments too.
</p>

<pre>
sc () {
  if [ -f ./script/rails ]; then 
    rails console $argv
  else
    ./script/console $argv
  fi
}
</pre>

<p>
  One other thing, the way rails uses IRB is different now. I had to change my <code>~/.irbrc</code> file to look like this below to get my simple prompt and history back. IMPORTANT NOTE: In order for this to work, you <a href="http://redmine.ruby-lang.org/issues/show/1556" class="external-link">have to apply this 2 line patch to your save-history.rb file</a>. Worked like a champ for me.
</p>

<macro:code lang="ruby">
# IRB history patch <http://redmine.ruby-lang.org/issues/show/1556>

require 'irb/completion'
require 'irb/ext/save-history'

IRB.conf[:USE_READLINE] = true
IRB.conf[:SAVE_HISTORY] = 500
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb.hist"
IRB.conf[:PROMPT_MODE] = :SIMPLE
</macro:code>



filename: 2010-02-12-synchronizing-core-data-with-rails-3-0-0-pre.html
         title: Synchronizing Core Data With Rails (3.0.0.pre)
    categories: ["Home"]
     disqus_id: /2010/2/12/synchronizing-core-data-with-rails-3-0-0-pre
          body: 


<p style="text-indent:0px">
  <a href="http://homemarks.com/" class="nobor"><img src="/assets/2010/2/17/57x57_w_shadow.png" class="floatl pr20 pb10" /></a>
  This is my presentation to our local @757rb/@757objc users group this past Tuesday. Hope some find it useful. Lessons learned from building HomeMarks native iPhone application to synchronize Core Data with a RESTful backend built using rails 3.0.0.pre. This covers a previous design methodology called the AJAX head pattern which decouples rails applications from the views they present which allowed an easy API foundation for the iPhone application and data sync methods.
</p>
  
<div class="photobounding" style="width:453px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <div style="width:425px;" id="__ss_3143799">    
      <object style="margin:0px" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=synchronizingcoredatawithrailswebapplications-100211204432-phpapp01&stripped_title=synchronizing-core-data-with-rails" /><param name="allowFullScreen" value="true"/><param name="allowScriptAccess" value="always"/><embed src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=synchronizingcoredatawithrailswebapplications-100211204432-phpapp01&stripped_title=synchronizing-core-data-with-rails" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></embed></object>
    </div>
  </div>
</div>


<h2>Resources</h2>

<ul class="mt20">
  <li><a href="http://homemarks.com/" class="external-link">HomeMarks (buy it, try it, review it)</a></li>
  <li><a href="http://www.slideshare.net/metaskills/synchronizing-core-data-with-rails" title="Synchronizing Core Data With Rails" class="external-link">Synchronizing Core Data With Rails (slideshare)</a></li>
  <li><a href="http://metaskills.net/2008/5/24/the-ajax-head-br-design-pattern">AJAX Head Design Pattern</a></li>
  <li><a href="http://metaskills.net/2008/6/18/restful-ajax-with-forgery-protection">RESTful AJAX With Forgery Protection</a></li>
  <li><a href="http://metaskills.net/2008/8/18/in-hell-oo-for-homemarks">In HELL-OO For HomeMarks</a></li>
  <li><a href="http://code.google.com/p/json-framework/" class="external-link">The json-framework Project</a></li>
  <li><a href="http://allseeing-i.com/ASIHTTPRequest/" class="external-link">The ASIHTTPRequest Project</a></li>
</ul>






filename: 2010-02-23-git-init-xcode-projects.html
         title: Git Init XCode Projects
    categories: ["Apple/OSX", "Heuristics", "Home", "Workflow"]
     disqus_id: /2010/2/23/git-init-xcode-projects
          body: 


<p>
  Here is a little ZSH function I have been using for quickly setting up new XCode apps I call tire kickers, little play and learn apps. Being able to track your learning as you go with git.
</p>

<pre>
if [[ -x `which git` ]]; then
  
	function ginit_xcode () {
	  git init
	  echo "\n\n# XCode\nbuild\n*.mode1v3\n*.mode2v3\n*.nib\n*.swp\n\
*.pbxuser\n*.perspective\n*.perspectivev3\n\n# OSX\n.DS_Store\n\n\
# TextMate\n*.tm_build_errors\n\n\n" >> .gitignore
	  git add .gitignore
	  git commit -m "Ignore Xcode stuff."
	  git add .
	  git commit -m "Initial Xcode project."
	}
  
fi
</pre>

<p>The echo lines puts out a .gitignore file that will look something like this.</p>

<pre>
# XCode
build
*.mode1v3
*.mode2v3
*.nib
*.swp
*.pbxuser
*.perspective
*.perspectivev3

# OSX
.DS_Store

# TextMate
*.tm_build_errors
</pre>



filename: 2010-03-19-textmate-theme-key-bindings-for-xcode.html
         title: TextMate Theme & Key Bindings For Xcode
    categories: ["Home"]
     disqus_id: /2010/3/19/textmate-theme-key-bindings-for-xcode
          body: 


<div class="mt20 photobounding" style="width:445px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2010/3/19/textmate_xcode_theme2.gif" alt="Xcode TextMate Theme" width="420" height="287" />
  </div>
</div>

<p>
  I've been using Xcode for about 8 hard core months now and for all this time I have been using a theme I made that mimics the All Hallow's Eve TextMate theme with a bunch of custom key bindings that make Xcode more TextMate compatible. Here are links to download both below and a few notes I have put together. As I remember more of what I have actually done, this post will get updated. I do remember the first thing I did with Xcode for almost 3 days was just to customize the heck out of it and these files are the results.
</p>

<table style="width:100%;">
  <tr>
    <td class="center">
     <a href="/assets/2010/3/19/TextMate-All-Hallows-Eve.xccolortheme.zip" class="noa">
      <img src="/assets/2010/3/19/fonts_and_colors2.gif" alt="Xcode Fonts & Colors" width="86" height="50" /><br />
      TextMate All Hallows Eve Theme
    </a>
    </td>
    <td class="center">
    <a href="/assets/2010/3/19/TextMate-Compatible.pbxkeys.zip" class="noa">
      <img src="/assets/2010/3/19/key_binding2.gif" alt="Xcode Key Bindings" width="78" height="50" /><br />
      TextMate Key Bindings
    </a>
    </td>
  </tr>
</table>

<p>
  To use these download and unzip them. Please the theme in <code>~/Library/Application Support/Xcode/Color Themes</code> and place the bindings in <code>~/Library/Application Support/Xcode/Key Bindings</code>. That should be it. Hare are my notes for now on what the key bindings do.
</p>


<h3 class="mb10">Misc Key Bindings</h3>

<ul class="mb10">
  <li>Command-W - Works on a file! Not the whole project window!</li>
  <li>Command-1 - Open File List</li>
  <li>Command-2 - Method List</li>
</ul>


<h3 class="mb10">TextMate Style Key Bindings</h3>

<ul>
  <li>Command-T - for Open Quickly</li>
  <li>I'll update this as I find more, it has honestly been so long I forget all the work I've done and just use this now as if it were TextMate.</li>
</ul>





filename: 2010-04-13-restful-ajax-with-forgery-protection-with-rails-3.html
         title: RESTful AJAX with Forgery Protection (In Rails 3)
    categories: ["Home"]
     disqus_id: /2010/4/13/restful-ajax-with-forgery-protection-with-rails-3
          body: 


<p>
  A <a href="/2008/6/18/restful-ajax-with-forgery-protection">while back ago</a> I wrote an article about how to use Rails built-in forgery protection in your RESTful AJAX calls. Normally AJAX requests, those responding true to <code>request.xhr?</code> in rails, are forgery whitelisted. But sometimes, and under what conditions I am not sure, AJAX methods are subjected to forgery protection. Maybe you have the <code>ActionDispatch::Request#forgery_whitelisted?</code> overridden to not include AJAX requests? Either way and for whatever reason â€“ if you like to use forgery protection in your RESTful AJAX calls to rails, then here is the new implementation under Rails 3 beta2.
</p>

<h2>Forgery Protection In Rails 3</h2>

<p>
  In a pre Rails 3 application all form tag helpers automatically create a hidden form field that contain the authentication token. These are passed when the form is serialized and if you viewed source, you could see them. However, Rails 3 is unobtrusive, which means you can count on them not polluting your markup with this kind of framework data. So where do the authentication params come from in a Rails 3 application? The answer is two places. First there is a new <code>ActionView::Helpers::CsrfHelper</code> module that allows you to use the #csrf_meta_tag helper in the head of your layout files. This helper will generate two meta tags, one for the authentication parameter name and the other for the value. The second place is in the new rails.js which reads these two meta tags for further interpolation into some generated form tags for all sorts of :remote links, buttons, etc. If your interested in reading more about these, look into the source, but I thought you might like to see some places where these are used by the framework now.
</p>

<macro:code lang="html">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <%= csrf_meta_tag %>
</macro:code>

<macro:code lang="javascript">
document.observe("dom:loaded", function() {
  var authToken = $$('meta[name=csrf-token]').first().readAttribute('content'),
    authParam = $$('meta[name=csrf-param]').first().readAttribute('content'),
    formTemplate = '<form method="#{method}" action="#{action}">\
      #{realmethod}<input name="#{param}" value="#{token}" type="hidden">\
      </form>',
    realmethodTemplate = '<input name="_method" value="#{method}" type="hidden">';
  //... etc
</macro:code>

<h2>Now Our RESTful AJAX with Forgery Protection</h2>

<p>
  OK, now that bit of background information is out of the way, lets look into how we can use this for ourselves. Since Rails 3 has provided us with a good convention, we can hook into this pretty easily. This prototype example below is pretty simple and follows my OOJS approach. I have a base JS object that is basically a module with a function called authParams. I then mixin this base JS object into all my Prototype classes. We are reading the same meta tags that rails now uses and create a Prototype Hash object with the name/value of the authentication token. Then in ever AJAX request I merge these paramters in with what ever I am serializing for that request. Pretty simple eh? Did I miss anything? 
</p>

<macro:code lang="javascript">
  // A base JS object.

  var MyBase = {

    authParams: function() {
      var params = {}
      var authParam = $$('meta[name=csrf-param]').first().readAttribute('content');
      var authToken = $$('meta[name=csrf-token]').first().readAttribute('content');
      params[authParam] = authToken
      return $H(params);
    }

  };

  // Mixed Into Other Classes.

  var SomeClass = Class.create(MyBase,{

    doAjaxRequest: function() {
      new Ajax.Request(elmnt.action,{
        parameters: this.form.serialize(true).merge(this.authParams()),
      });
    }

  });
</macro:code>




filename: 2010-05-26-the-alias_method_chain-of-rake-override-rake-task.html
         title: The alias_method_chain of Rake - Override Rake Task 
    categories: ["Heuristics", "Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2010/5/26/the-alias_method_chain-of-rake-override-rake-task
          body: 


<p>
  Rake is cool. It is built so that multiple tasks with the same name run in a reverse defined series. This is great, but sometimes you want to override a task with your own behavior and conditionally call the earlier task. Especially if that task is defined deep somewhere else, like in a rails gem. I have had to solve this problem before in Rake. Awhile back I hacked something up that would totally trump a predefined rake task and allow you to replace it with a new one. Lately while <a href="http://wiki.github.com/rails-sqlserver/2000-2005-adapter/rails-db-rake-tasks" class="external-link">working on the SQL Server adapter</a>, I had a need to method chain some core rails :db namespaced tasks. So once again I googled others work and again resorted to hacking Rake. Below is what I was left with.
</p>

<macro:code lang="ruby">
Rake::TaskManager.class_eval do
  def alias_task(fq_name)
    new_name = "#{fq_name}:original"
    @tasks[new_name] = @tasks.delete(fq_name)
  end
end

def alias_task(fq_name)
  Rake.application.alias_task(fq_name)
end

def override_task(*args, &block)
  name, params, deps = Rake.application.resolve_args(args.dup)
  fq_name = Rake.application.instance_variable_get(:@scope).dup.push(name).join(':')
  alias_task(fq_name)
  Rake::Task.define_task(*args, &block)
end
</macro:code>

<p>
  It's easy to use, just require it in your Rakefile. In the example below, I was able to programmatically method chain the core rails db:test:purge and only call the original if I needed to. Very cool!
</p>

<macro:code lang="ruby">
namespace :db do
  namespace :test do
    override_task :purge => :environment do
      ...
      # To invoke the original task add ":original" to its name
      Rake::Task["db:test:purge:original"].execute
      ...
    end
  end
end
</macro:code>

<p>
  Lastly, thanks to <a href="http://www.taknado.com/" class="external-link">Eugene Bolshakov</a>, <a href="http://github.com/jwood" class="external-link">John Wood</a>, and <a href="http://github.com/markwfoster" class="external-link">Mark Foster</a> whom have tackled this rake problem before. My version above was based on their work, but correctly works with namespaces which was critical for my needs.
</p>



filename: 2010-07-06-custom-webrat-session-formatted_error-for-rails-with-nokogiri.html
         title: Custom Webrat::Session formatted_error For Rails With Nokogiri
    categories: ["Home"]
     disqus_id: /2010/7/6/custom-webrat-session-formatted_error-for-rails-with-nokogiri
          body: 


<p>I never liked how Webrat shows the complete response body for exceptions when integration testing rails applications. For the longest time I redefined the formatted_error method to simple do nothing. Today I used Nokogiri to parse out the good bits from that page. Here is the result. Not pretty, but it's working fine so far. Got a better example? Please share!</p>


<macro:code lang="ruby">
module Webrat
  class Session
    def formatted_error
      doc = Nokogiri::HTML(response_body)
      exception_name = doc.css('head title').inner_html.squish
      exception_msg = doc.css('body h1').inner_html.squish
      exception_detail1 = "".tap do |detail|
        d = doc.css('body p')[0]
        detail << d.content.strip
        detail << d.next_sibling.content.squish
      end
      exception_detail2 = "".tap do |detail|
        d = doc.css('body p')[1]
        detail << d.content.strip
        detail << d.next_sibling.css('code').first.content.strip
      end
      app_trace = doc.css('#Application-Trace pre code').inner_html
      [exception_name, exception_msg, exception_detail1, exception_detail2, app_trace].join("\n")
    rescue
      "Could not format page exception. Perhaps try to use Nokogiri on this: \n#{response_body}"
    end
  end
end
</macro:code>



filename: 2010-07-07-bit-fat-legacy-schema-inspection.html
         title: Bit Fat Legacy Schema Inspection
    categories: ["Home"]
     disqus_id: /2010/7/7/bit-fat-legacy-schema-inspection
          body: 


<p>Sometime in rails 2.x the #inspect method for an ActiveRecord class was changed to show you all the column names (attributes) of that class. This is fine when things are small but if your working on a big legacy schema and you want clean terse debugging, all those column names can be noisy. I just set this initializer up today to kill it. Now the class just shows the number of columns.</p>

<macro:code lang="ruby">
module ActiveRecord
  class Base
    class << self
      
      def inspect
        if self == Base
          super
        elsif abstract_class?
          "#{super}(abstract)"
        elsif table_exists?
          "#{super}(#{columns.count} columns)"
        else
          "#{super}(Table doesn't exist)"
        end
      end
      
    end
  end
end
</macro:code>



filename: 2010-07-09-interactive-javascript-console-with-textmate.html
         title: Interactive JavaScript Console With TextMate
    categories: ["Apple/OSX", "Heuristics", "Home", "TextMate"]
     disqus_id: /2010/7/9/interactive-javascript-console-with-textmate
          body: 


<p>
  Last week I started reading <a href="http://oreilly.com/catalog/9780596517748" class="external-link"><em>JavaScript: The Good Parts</em></a> by Douglas Crockford. It was on my list of long overdue things to do. While reading it, I wanted to be able to kick some simple JavaScript examples around. As rubyist we have it good, <code>irb</code> let's us fire up an interactive console anytime we want. But with JavaScript, options are limited. Sure you could install Johnson/EnvJS, Rhino or some other JavaScript engine. Maybe even load up firebug or the web inspector. But who wants to load a browser to play with JS?
</p>

<p>
  Luckily if your are on a Mac, you do not have to worry about any of that. You already have a JavaScript engine installed. Where? Thanks to Safari's <a href="http://webkit.org/blog/214/introducing-squirrelfish-extreme/" class="external-link">SquirrelFish Extreme (SFX)</a>, it is right in your system's library at this full path <code>/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc</code>. Instead of adding that to my path, I created a symlink to in my opt's bin directory (seeing how I have MacPorts). For instance.
</p>

<pre class="command">
  sudo ln -s /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc /opt/local/bin
</pre>

<p>
  Assuming you just did that command in your own bin path of choice, you can now just type <code>jsc</code> and start typing JavaScript just as you easily as if you were in an irb prompt. Fun, but we can do better.
</p>


<h2>Creating A TextMate Bundle To Run JavaScript</h2>

<p>
  So I was inspired by this article that explained how easy it is to make a <a href="http://www.phpied.com/jslint-on-mac-textmate/" class="external-link">TextMate bundle to run JavaScript thru JSLint</a> and decided to make one to run the same JavaScript in an the interactive console for SFX. I wont go thru the details of how to add a simple TextMate bundle command, but the following picture and code sample shows the <code>Run JSConsole</code> command I made. The command resides in my own bundle namespace.
</p>

<div class="photobounding" style="width:548px">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://metaskills.net/assets/2010/7/8/jsc_tmbundle.gif" alt="TextMate Bundle Window" width="520" />
  </div>
</div>

<macro:code lang="ruby">
#!/usr/bin/env ruby

require ENV['TM_SUPPORT_PATH'] + '/lib/escape.rb'

def terminal_script_filepath
  %|tell application "Terminal"
      activate
      do script "jsc -i #{e_as(e_sh(ENV['TM_FILEPATH']))}"
    end tell|
end

open("|osascript", "w") { |io| io << terminal_script_filepath }
</macro:code>

<p>
  With that simple bundle command done, you can now use the <code>Command-R</code> keyboard shortcut to load the windows JavaScript file into a newly opened terminal window running in the SFX console. Pictures below.
</p>

<div class="photobounding" style="width:536px">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://metaskills.net/assets/2010/7/8/jsc_textmate.gif" alt="TextMate Windows With JavaScript" width="508" />
  </div>
</div>

<div class="photobounding" style="width:548px">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="http://metaskills.net/assets/2010/7/8/jsc_terminal.gif" alt="Mac OS Terminal App Lauanched From TextMate JavaScript" width="520" />
  </div>
</div>


<h2>Great, Now What?</h2>

<p>
  My simple script just loads the whole file, it does not take into account TM's selected text. Nor does it do anything with selected files. I would love to see someone write a TextMate bundle that could preload up jQuery/Prototype or a set of files. The ultimate would be a bundle command that executed and updated markers like the Ruby bundle can do. Sadly, I do not have that much time on my hands :)
</p>





filename: 2010-07-19-a-macport-rubyodbc-update.html
         title: A MacPort/RubyODBC Update
    categories: ["Apple/OSX", "Database", "Heuristics", "Home", "Ruby/Rails"]
     disqus_id: /2010/7/19/a-macport-rubyodbc-update
          body: 


<div id="flash_indif" class="flash_message mt20 mb0">
  I have changed my mind about the UTF-8 version of RubyODBC. Please <a href="http://groups.google.com/group/rails-sqlserver-adapter/browse_thread/thread/367cf70b2b48d4a0?hl=en">read that section</a> in the the rails 3 announcements for the SQL Server adapter.
</div>


<p>
  Quite a while ago I wrote a 
  <a href="/2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more">soup 
  to nuts article on getting the full multi-ruby development stack installed</a> for those using the SQL Server adapter. The base 
  package management system used there was MacPorts. In it I described how to edit the outdated Portfile for the rb-odbc package 
  and exclaimed how important it was to use the +utf8 variant. I was totally wrong about that part.
</p>

<p>
  This past week I started heavily exploring <a href="http://rvm.beginrescueend.com/" class="external-link">RVM</a> at the advice 
  of friend while we visited the Boston.rb user grooup. As an aside, I finally feel my unix-fu is strong enough to cover the edge cases 
  needed to get the SQL Server stack happy with RVM. Good news, but that's next weeks blog post. Anyways I found that while updating 
  my core MacPort's rb-odbc package that +utf8 was blowing up. I am currently using MacPorts 1.9.1 and was targeting 0.99991 of RubyODBC.
  Here is the updated port file. To edit your current port file run <code>mate $(port file rb-odbc)</code> and paste this 
  new one in. Details afterward.
</p>

<pre>
# $Id: Portfile 30250 2010-07-18 02:16:17Z ken@metaskills.net $
PortSystem		1.0
PortGroup		  ruby 1.0

ruby.setup		      {odbc ruby-odbc} 0.99991 extconf.rb {README doc test} 
maintainers		      nomaintainer
description		      An extension library for ODBC from ruby.
long_description	  Extension library to use ODBC data sources from Ruby. \
                    Supports Ruby 1.6.x and 1.8 on Win32 OSes and UN*X 
checksums		        md5 64eaf6089e7ca17eeff54c4fe052ac96
homepage            http://www.ch-werner.de/rubyodbc
master_sites        http://www.ch-werner.de/rubyodbc
categories-append   databases
platforms		        darwin 

configure.cmd             ${ruby.bin} -rvendor-specific -Cext extconf.rb
build.pre_args-append     -C ext
destroot.pre_args-append  -C ext

variant utf8 {
  configure.cmd             ${ruby.bin} -rvendor-specific -Cext/utf8 extconf.rb
  build.pre_args-delete     -C ext
  build.pre_args-append     -C ext/utf8
  destroot.pre_args-delete  -C ext
  destroot.pre_args-append  -C ext/utf8
}
</pre>

<p>
  So where did I go wrong on my old article? My first big mistake was thinking that the <code>+utf8</code> port variant was needed. 
  Not only is it <strong>NOT NEEDED</strong>, it may not work right at all. In fact, the old Portfile in MacPorts trunk technically 
  did not even configure/make/install the utf8 version either! Honestly â€“ I spent all day learning the MacPort's Portfile syntax 
  and tested this. Installing that variant just breaks with an error like <code>LoadError: dlsym(0x1010cd3b0, Init_odbc): symbol not 
  found</code>.
</p>

<p>
  So, even though my updated Portfile above now fixes that issue and supports actually building a utf8 version of RubyODBC, <strong>YOU DO NOT NEED 
  IT!</strong> In fact the entire SQL Server stack is tested with the plain non-utf8 package and passes with flying colors. This 
  includes passing tests where unicode columns return correctly utf8-encoded strings, among others. Though I 
  have not tested it, I believe the utf8 version would do more damage than good. The RubyODBC documentation says it would make 
  every string utf8 encoded. Not good for an adapter that has mixed data types. For my own personal notes, here is a diff of the 
  Makefile below. I think the Init_odbc error was a result of a missing flag in the Makefile.
</p>

<macro:code lang="diff">
# My notes
# +CPPFLAGS = -DHAVE_LONG_LONG
# +CPPFLAGS = -DHAVE_VERSION_H
# +CPPFLAGS = -DHAVE_TYPE_SQLBIGINT
# -CPPFLAGS = -DHAVE_SQLCONFIGDATASOURCEW
# -CPPFLAGS = -DHAVE_SQLINSTALLERERRORW
# -CPPFLAGS = -DHAVE_SQLWRITEFILEDSNW
# -CPPFLAGS = -DHAVE_SQLREADFILEDSNW
--- Makefile(+utf8)	2010-07-18 12:00:24.000000000 -0400
+++ Makefile(-utf8)	2010-07-18 12:49:32.000000000 -0400
@@ -47,7 +47,7 @@
 CFLAGS   =  -fno-common -O2 -arch x86_64  -fno-common -pipe -fno-common $(cflags) -arch x86_64
 INCFLAGS = -I. -I. -I/opt/local/lib/ruby/1.8/i686-darwin10 -I.
 DEFS     = 
-CPPFLAGS = -DHAVE_SQL_H -DHAVE_SQLEXT_H -DHAVE_TYPE_SQLTCHAR -DHAVE_TYPE_SQLLEN -DHAVE_TYPE_SQLULEN -DHAVE_ODBCINST_H -DHAVE_SQLCONFIGDATASOURCEW -DHAVE_SQLWRITEFILEDSNW -DHAVE_SQLREADFILEDSNW -DHAVE_SQLINSTALLERERROR -DHAVE_SQLINSTALLERERRORW -I/opt/local/include -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE  -I/opt/local/include
+CPPFLAGS = -DHAVE_VERSION_H -DHAVE_SQL_H -DHAVE_SQLEXT_H -DHAVE_TYPE_SQLTCHAR -DHAVE_TYPE_SQLLEN -DHAVE_TYPE_SQLULEN -DHAVE_ODBCINST_H -DHAVE_SQLINSTALLERERROR -DHAVE_TYPE_SQLBIGINT -I/opt/local/include -D_XOPEN_SOURCE -D_DARWIN_C_SOURCE  -I/opt/local/include -DHAVE_LONG_LONG
 CXXFLAGS = $(CFLAGS) 
 ldflags  = -L. -L/opt/local/lib -arch x86_64
 dldflags = 
@@ -89,7 +89,7 @@
 LIBS = $(LIBRUBYARG_SHARED) -lodbcinst -lodbc  -lpthread -ldl -lobjc  
 SRCS = init.c odbc.c
 OBJS = init.o odbc.o
-TARGET = odbc_utf8
+TARGET = odbc
 DLLIB = $(TARGET).bundle
 EXTSTATIC = 
 STATIC_LIB =
</macro:code>




filename: 2010-07-30-the-rvm-ruby-api.html
         title: The RVM Ruby API - Setting Up A CI System For The SQL Server Adapter
    categories: ["Apple/OSX", "Home", "Ruby/Rails"]
     disqus_id: /2010/7/30/the-rvm-ruby-api
          body: 


    
    <p>
      A few weeks ago I started looking into the <a href="http://rvm.beginrescueend.com/" class="external-link">Ruby Version Manager (RVM)</a> project to help me build a better testing setup for both my day job and the <a href="http://github.com/rails-sqlserver/activerecord-sqlserver-adapter" class="external-link">ActiveRecord SQL Server Adapter</a>. In a <a href="/2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more" class="external-link">previous article</a> I covered details of how to get a development stack up and running for Rails with SQL Server using MacPort's. This article will cover some new additions to that goal, but first and primarily, I wanted to talk about the wonders of RVM and it's new ruby API.
    </p>
    
    <p>
      So like any good agile software gardner tasked with building a continuous integration system, I wanted to do it in such a way that was completely automated using rake. My first cut at said rake task used ruby's Kernel.system to issue <code>rvm</code> commands down to the shell. This failed horribly! Basically no matter how hard I tried, I could not hit the rvm shell function from ruby's system command. It kept using the rvm binary which can not change the local shell environment and hence do very little magic that RVM allows. Thankfully <a href="http://twitter.com/wayneeseguin" class="external-link">@wayneeseguin</a> pointed me to the new RVM ruby API and <a href="http://blog.ninjahideout.com/posts/the-path-to-better-rvm-and-passenger-integration" class="external-link">this article on how to use it for passenger</a>. I immediately started to switch my rvm rake tasks to use the new RVM API and was just floored with how well it did. Below is a copy of that rake task. Take a look over it and read below for details and how I have used this with the SQL Server stack.
    </p>
    
    <div class="h20"></div>

<macro:code lang="ruby">

MYPROJECT_RUBIES = {
  'ruby-1.8.6-p388'   => {:alias => 'myprj186', :odbc => '0.99991'},
  'ruby-1.8.7-p299'   => {:alias => 'myprj187', :odbc => '0.99991'},
  'ruby-1.9.1-p378'   => {:alias => 'myprj191', :odbc => '0.99991'},
  'ruby-1.9.2-head'   => {:alias => 'myprj192', :odbc => '0.99992pre3'},
  'ree-1.8.7-2010.02' => {:alias => 'myprjree', :odbc => '0.99991'}
}

namespace :rvm do

  task :setup do
    unless @rvm_setup
      rvm_lib_path = "#{`echo $rvm_path`.strip}/lib"
      $LOAD_PATH.unshift(rvm_lib_path) unless $LOAD_PATH.include?(rvm_lib_path)
      require 'rvm'
      require 'tmpdir'
      @rvm_setup = true
    end
  end

  namespace :install do

    task :all => [:setup,:rubies,:odbc,:gems]

    task :rubies => :setup do
      installed_rubies = RVM.list_strings
      MYPROJECT_RUBIES.keys.each do |rubie|
        if installed_rubies.include?(rubie)
          puts "info: Rubie #{rubie} already installed."
        else
          with_my_environment_vars do
            good_msg = "info: Rubie #{rubie} installed."
            bad_msg = "Failed #{rubie} install! Check RVM logs here: #{RVM.path}/log/#{rubie}"
            puts "info: Rubie #{rubie} installation inprogress. This could take awhile..."
            RVM.install(rubie,rvm_install_options) ? puts(good_msg) : abort(bad_msg)
          end
        end
        RVM.alias_create MYPROJECT_RUBIES[rubie][:alias], "#{rubie}@myproject"
      end
    end

    task :odbc => :setup do
      rvm_each_rubie do
        odbc = "ruby-odbc-#{myproject_current_rubie_info[:odbc]}"
        RVM.chdir(Dir.tmpdir) do
          RVM.run "rm -rf #{odbc}*"
          puts "info: RubyODBC downloading #{odbc}..."
          RVM.run "curl -O http://www.ch-werner.de/rubyodbc/#{odbc}.tar.gz"
          puts "info: RubyODBC extracting clean work directory..."
          RVM.run "tar -xf #{odbc}.tar.gz"
          RVM.chdir("#{odbc}/ext") do
            puts "info: RubyODBC configuring..."
            RVM.ruby 'extconf.rb', "--with-odbc-dir=#{rvm_odbc_dir}"
            puts "info: RubyODBC make and installing for #{rvm_current_name}..."
            RVM.run "make && make install"
          end
        end
      end
    end

    task :gems => :setup do
      puts "info: Installing our app gems."
      rvm_each_rubie do
        myproject_gem_specs.each { |spec| rvm_install_gem(spec) }
      end
    end

  end

  task :remove => :setup do
    myproject_rubies.each { |rubie| RVM.remove(rubie) }
  end

end


def myproject_rubies
  MYPROJECT_RUBIES.keys.map{ |rubie| "#{rubie}@myproject" }
end

def myproject_current_rubie_info
  MYPROJECT_RUBIES[rvm_current_rubie_name]
end

def myproject_gem_specs
  [
    ['rails','2.3.8'],
    ['activerecord-sqlserver-adapter','2.3.8'],
    ['erubis','2.6.6'],
    ['haml','3.0.13'],
    ['mocha','0.9.8'],
  ]
end

def rvm_each_rubie
  myproject_rubies.each do |rubie|
    RVM.use(rubie)
    yield
  end
ensure
  RVM.reset_current!
end

def rvm_current_rubie_name
  rvm_current_name.sub('@myproject','')
end

def rvm_current_name
  RVM.current.expanded_name
end

def rvm_gem_available?(spec)
  gem, version = spec
  RVM.ruby_eval("require 'rubygems' ; print Gem.available?('#{gem}','#{version}')").stdout == 'true'
end

def rvm_install_gem(spec)
  gem, version = spec
  if rvm_gem_available?(spec)
    puts "info: Gem #{gem}-#{version} already installed in #{rvm_current_name}."
  else
    puts "info: Installing gem #{gem}-#{version} in #{rvm_current_name}..."
    puts RVM.perform_set_operation(:gem,'install',gem,'-v',version).stdout
  end
end

def for_macports?
  `uname`.strip == 'Darwin' && `which port`.present?
end

def rvm_install_options
  {}
end

def my_environment_vars
  if for_macports?
    {'CC' => '/usr/bin/gcc-4.2',
     'CFLAGS' => '-O2 -arch x86_64',
     'LDFLAGS' => '-L/opt/local/lib -arch x86_64',
     'CPPFLAGS' => '-I/opt/local/include'}
  else
    {}
  end
end

def rvm_odbc_dir
  for_macports? ? '/opt/local' : '/usr/local'
end

def set_environment_vars(vars)
  vars.each { |k,v| ENV[k] = v }
end

def with_my_environment_vars
  my_vars = my_environment_vars
  current_vars = my_vars.inject({}) { |cvars,kv| k,v = kv ; cvars[k] = ENV[k] ; cvars }
  set_environment_vars(my_vars)
  yield
ensure
  set_environment_vars(current_vars)
end
</macro:code>
    
    
    <h2>RVM Rake Task Breakdown</h2>
    
    <p>
      This is the fun part - lets start from top to bottom. I'll focus only on the parts that are centric to why the RVM ruby API is so bad ass and the rake task in general. The following section is dedicated to RVM with the SQL Server Adapter stack. First, the :setup task, this is called before every other task. It simply sets up the load path so that the RVM API file can be required. That api file is located in your rvm repo path, typically in your ~/.rvm directory. Now every other task can use the <code>RVM</code> module which implements method missing for many commands.
    </p>
    
    <p>
      Past this my rvm namespace is broken up into three main install tasks. The primary concerns are <code>rvm:install:rubies</code> and <code>rvm:install:gems</code> each invoked by the rake task. Starting with the :rubies task, this iterates over a collection of ruby version strings first checking if RVM knows its installed then installing it otherwise.
    </p>
    
    <p>
      In the :gems task, things get a little interesting. I am using a few methods (seen toward the bottom) that give this a nice little DSL of my own around RVM. The first is a block method called <code>rvm_each_rubie</code>. This iterates over each of my project's ruby strings, tells RVM to use that ruby, hence dynamically switching to that ruby/gemset then yielding to the block. That means that each go around I will be in an completely different ruby/gem environment, each specific to my project using RVM gemsets. This allows the inner method for iterating over the required gems for my project and asking to install them with <code>rvm_install_gem</code>. This method uses <code>RVM.ruby_eval</code> to execute a string of ruby in the context of the current ruby version and gemset. In this case, finding out if a gem is installed already. If not, I use the <code>RVM.perform_set_operation</code> to install the gem, again in current context. I use perform_set_operation so I can read the STDOUT back to the rake task so a user sees exactly what is going of for the gem install.
    </p>
    
    <p>
      Past that there are a few other details. Most can be picked up by reading the helper methods toward the bottom. Using the RVM ruby API is a bit of a chore if you rely on documentation. Sure it has some, but nothing beats reading the code to see what is available to you. Remember you can find the API library by opening up the <code>~/.rvm/lib</code> directory. I'm sure you can also find help on the <a href="http://rvm.beginrescueend.com/support/irc/" class="external-link">RVM IRC channel</a>.
    </p>
    
    <p>
      Though it is not specific to general RVM API goodness, the :odbc task does show some great interfaces that RVM exposes for doing standard file system directory changing and running commands to the system.
    </p>
    
    
    <h2>Notes On RVM With The SQL Server Adapter Stack</h2>
    
    <p>
      So you use the ActiveRecord SQLServerAdapter? That means you have some underlying components installed - namely FreeTDS, unixODBC, and RubyODBC right. If your like me and believe that MacPorts is the way to go and risking a Homebrew interleaved dependency with Apple's libraries is risky, this section is for you! So you have a MacPort base and you want to compile your RVM rubies in such a way that other dependencies such as Nokogiri and RubyODBC use your /opt/local installs. By default this does not happen because unless ruby was compiled the right way, it wont be able to allow built gems to know about your /opt/local directory. So this is what I came up with.
    </p>
    
    <p>
      Take a look at the <code>my_environment_vars</code> method. This works in-conjunction with the <code>with_my_environment_vars</code> block method. Basically it temporarily set's MacPort specific environment variables before installing a ruby version via RVM. The ones shown are what I have found work best for my system. I think the most important are <code>LDFLAGS=-L/opt/local/lib -arch x86_64</code> and <code>CPPFLAGS=-I/opt/local/include</code>. Once ruby is built with those, it can easily reflect with standard 3rd party install methods that use <code>RbConfig</code>. To date any gem that I have had to compile, most importantly RubyODBC, does so perfectly against my /opt/local ports. This includes MySQL, Nokogiri, everything! I love it. I totally encourage anyone to use RVM and to get to know it's great ruby API for automating all sorts of things.
    </p>
    
    
    <h2>Resources</h2>
    
    <ul class="mt10">
      <li><a href="http://rvm.beginrescueend.com/" class="external-link">Ruby Version Manager (RVM)</a></li>
      <li><a href="http://github.com/rails-sqlserver/activerecord-sqlserver-adapter" class="external-link">ActiveRecord SQL Server Adapter</a></li>
      <li><a href="/2009/9/5/the-ultimate-os-x-snow-leopard-stack-for-rails-development-x86_64-macports-ruby-1-8-1-9-sql-server-more">The Ultimate OS X Snow Leopard Stack For Rails Development - x86_64, MacPorts, Ruby 1.8/1.9, SQL Server, SQLite3, MySQL & More</a></li>
      <li><a href="http://wiki.github.com/rails-sqlserver/activerecord-sqlserver-adapter/" class="external-link">SQL Server Adapter Wiki</a></li>
    </ul>




filename: 2010-08-06-protip-exclude-your-rvm-install-from-timemachine-backups.html
         title: Protip: Exclude Your RVM Install From Time Machine Backups
    categories: ["Home"]
     disqus_id: /2010/8/6/protip-exclude-your-rvm-install-from-timemachine-backups
          body: 


<p>
  You may not realize it, but that <code>~/.rvm</code> directory is getting big and may be hurting your Time Machine backups. Especially if you are doing a lot of development. I just checked mine today.
</p>

<pre class="command">
du -skh ~/.rvm/gems
1012M	/Users/kencollins/.rvm/gems
</pre>

<p>
  Ouch! That's around 1gig of stuff that is pointless to backup just in the gems directory. I frequently blow away certain rubies and install them again using <a href="/2010/7/30/the-rvm-ruby-api">various rake tasks</a> and just found out today that you have to pass the --gems option to rvm remove to clean those old gemsets out. Either way, that whole rvm directory can just be ignored from Time Machine backups. Here is how, there is really only one tricky part.
</p>

<p>
  First, open up your System Preferences, then open up the Time Machine pref pane. From here click on the "Options...". Within this window you will be able to add a folder to be excluded from backup. Hit the "+" button to add a directory. Now here is the tricky part, your rvm directory is prefixed with a period and hence is invisible to the normal finder windows. Thankfully all Mac file windows can use a keyboard shortcut. Hit <code>Command+Shift G</code>. That will blind down a "Go to the folder:" window. Simply type in <code>~/.rvm</code> here and hit "Go". Now choose "Exclude" from the main file window. Your done!
</p>

<div class="photobounding" style="width:491px;">
  <div class="tl"></div>
  <div class="tr"></div>
  <div class="bl"></div>
  <div class="br"></div>
  <div class="photoborder"></div>
  <div class="phototime">
    <img src="/assets/2010/8/6/exclude_from_timemachine.gif" alt="" width="463" height="320" />
  </div>
</div>




filename: 2010-08-19-how-to-clean-a-campfire-room-of-uploads.html
         title: How To Clean A Campfire Room Of Uploads
    categories: ["Home", "Ruby/Rails", "Workflow"]
     disqus_id: /2010/8/19/how-to-clean-a-campfire-room-of-uploads
          body: 



<p>For us at work, our uploads to campfire are really transitory. Most of the time they are simple screenshots around a current topic. Every now and then vacation photos or even movies. And the end of the day none of it has value to us as the real value of campfire is our textual transcripts.</p>

<p>This morning after 4 years of campfire, we were real close to our 1GB limit of uploads. Time for a clean up. I found no easy way of automating this, so I turned to the Tinder gem. It has a nice way interface to the campfire api using HTTParty as the backend. I found out that there was no easy way to delete uploads too. So after some good ole fashion DOM inspection and knowing rails application conventions, I found my own interface. Below is a little script I used to clean up our room this morning. It basically loops thru a rooms uploads, 5 at a time, and deletes them. Pausing for a quarter of a second between each so I don't freak out the new 37signals administrator :)</p>


<macro:code lang="ruby">
require 'rubygems'
require 'tinder'

class CampfireUploadCleaner
  
  CF_DOMAIN = 'mydomain'
  CF_ROOM   = 'My Room Name'
  CF_TOKEN  = ENV['MY_CF_TOKEN']
  
  def initialize
    @campfire = Tinder::Campfire.new CF_DOMAIN, :token => CF_TOKEN
  end
  
  def room
    @room ||= @campfire.find_room_by_name(CF_ROOM)
  end
  
  def connection
    room.send(:connection)
  end
  
  def delete_uploads
    uploads = room.send(:get,:uploads)['uploads']
    uploads.each do |upload|
      id = upload['id']
      name = upload['name']
      connection.post "/uploads/delete/#{id}?n=0"
      puts "Deleted: [#{id}] #{name}"
      sleep(0.25)
    end
  end
  
  def sweep_uploads
    while room.files.present?
      delete_uploads
    end
  end
  
end

cleaner = CampfireUploadCleaner.new

cleaner.delete_uploads  # => Deletes the top 5 uploads.
cleaner.sweep_uploads   # => Deletes all uploads.
</macro:code>

<p>The upload hash actually contains much more than just the id and name of the upload. There is a timestamp, filetype and other attributes. So if you wanted to extend this script, you could. I did not spent a lot of time with it, but I never figured out how to get more than the top 5 uploads too. I'm sure some param hacking would yield some good results.</p>



filename: 2010-10-18-tinytds-a-modern-simple-and-fast-freetds-library-for-ruby-using-db-library.html
         title: TinyTds - A modern, simple and fast FreeTDS library for Ruby using DB-Library 
    categories: ["Database", "Home", "Ruby/Rails"]
     disqus_id: /2010/10/18/tinytds-a-modern-simple-and-fast-freetds-library-for-ruby-using-db-library
          body: 


<p>I just finished the first cut of learning C extensions for ruby and I <a href="http://github.com/rails-sqlserver/tiny_tds" class="external-link">present The TinyTds gem</a>. It is meant to serve the extremely common use-case of connecting, querying and iterating over results to Microsoft SQL Server databases from ruby. Even though it uses FreeTDSâ€™s DB-Library, it is NOT meant to serve as direct 1:1 mapping of that complex C API</p>

<p>The benefits are speed, automatic casting to ruby primitives, and proper encoding support. It converts all SQL Server datatypes to native ruby objects supporting :utc or :local time zones for time-like types. To date it is the only ruby client library that allows client encoding options, defaulting to UTF-8, while connecting to SQL Server. It also properly encodes all string and binary data. The motivation for TinyTds is to become the de-facto low level connection mode for the SQL Server adapter for ActiveRecord. For further details see the special thanks to Erik Bryn for his help, the authors/contributors of the Mysql2 gem for inspiration, and Yehuda Katz for articulating rubyâ€™s need for proper encoding support. Please read up on it here.</p>






